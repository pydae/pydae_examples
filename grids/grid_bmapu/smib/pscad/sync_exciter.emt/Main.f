!=======================================================================
! Generated by  : PSCAD v4.2.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   :  EXAMPLE 2
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE DSDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'
      REAL    APLIN         ! nonlinear transfer characteristic
!     SUBR    PSS1A         ! PSS1A 
!     SUBR    EXCAC1A       ! AC State Exciter AC1A
!     SUBR    NEWSNC        ! Synchronous Machine Simulation
!     SUBR    SANDH2        ! Sample and Hold
!     SUBR    3PHVSRC       ! 3-Phase Source model

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Parameters

! Electrical Node Indexes
      INTEGER NT_2(3)

! Control Signals
      INTEGER DIST, ENAB, S2M, GRID, InitEx
      INTEGER InitGv
      REAL    RT_1, RT_2, RT_3(3), RT_4, POUT
      REAL    QOUT, IF, TM, EF, Lang, Theta, Wang
      REAL    RT_5, RT_6, Vrms, RT_7, RT_8, W
      REAL    RT_9, RT_10, RT_11, RT_12, RT_13
      REAL    RT_14, RT_15, RT_16, RT_17, RT_18
      REAL    RT_19, RT_20, RT_21, RT_22, RT_23
      REAL    RT_24

! Internal Variables
      INTEGER B_Stt1, B_Stt2, B_Stt3, ISTORI
      INTEGER IVD1_1, SP_TQ, M_ACTV
      REAL    RVD2_1(2), RVD1_1, RVD10_1(10)
      REAL    RVD10_2(10), Pw_O, Qva_O, Vn_O
      REAL    Cn_O, LdA_O, Tht_O, Tesd_O, Tmsd_O
      REAL    Z_O1, Z_O2, Z_O3, Z_O4, Z_O5, Z_O6
      REAL    SP_IN, RVD1_2, MCVTPU, MVTPU
      REAL    SBASE_I, E_MAG, F_RAD, R_PH

! Indexing variables
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indexes
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Record local indexes
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage
      NTXFR = NTXFR + 1
      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF

! Record Offset and Increment Storage Counters
      ISTOI     = NSTOI
      NSTOI     = NSTOI + 6
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 36
      IPGB      = NPGB
      NPGB      = NPGB + 11
      INODE     = NNODE + 2
      NNODE     = NNODE + 11

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO 100  IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
  100 CONTINUE

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 12

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      RT_1     = STOF(ISTOF + 1)
      RT_2     = STOF(ISTOF + 2)
      RT_4     = STOF(ISTOF + 6)
      POUT     = STOF(ISTOF + 7)
      QOUT     = STOF(ISTOF + 8)
      IF       = STOF(ISTOF + 9)
      TM       = STOF(ISTOF + 10)
      EF       = STOF(ISTOF + 11)
      Lang     = STOF(ISTOF + 12)
      Theta    = STOF(ISTOF + 13)
      Wang     = STOF(ISTOF + 14)
      RT_5     = STOF(ISTOF + 15)
      RT_6     = STOF(ISTOF + 16)
      Vrms     = STOF(ISTOF + 17)
      RT_7     = STOF(ISTOF + 18)
      RT_8     = STOF(ISTOF + 19)
      DIST     = STOI(ISTOI + 1)
      ENAB     = STOI(ISTOI + 2)
      S2M      = STOI(ISTOI + 3)
      GRID     = STOI(ISTOI + 4)
      W        = STOF(ISTOF + 20)
      RT_9     = STOF(ISTOF + 21)
      RT_10    = STOF(ISTOF + 22)
      RT_11    = STOF(ISTOF + 23)
      RT_12    = STOF(ISTOF + 24)
      RT_13    = STOF(ISTOF + 25)
      InitEx   = STOI(ISTOI + 5)
      RT_14    = STOF(ISTOF + 26)
      RT_15    = STOF(ISTOF + 27)
      RT_16    = STOF(ISTOF + 28)
      RT_17    = STOF(ISTOF + 29)
      RT_18    = STOF(ISTOF + 30)
      RT_19    = STOF(ISTOF + 31)
      RT_20    = STOF(ISTOF + 32)
      RT_21    = STOF(ISTOF + 33)
      RT_22    = STOF(ISTOF + 34)
      RT_23    = STOF(ISTOF + 35)
      RT_24    = STOF(ISTOF + 36)
      InitGv   = STOI(ISTOI + 6)

! Array(1:3) quantities...
      DO 101  IT_0 = 1,3
         RT_3(IT_0) = STOF(ISTOF + 2 + IT_0)
  101 CONTINUE

!---------------------------------------
! Transfer from Imports
!---------------------------------------


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array(1:3) quantities...
      DO 102  IT_0 = 1,3
         NT_2(IT_0) = NODE(INODE + 3 + IT_0)
  102 CONTINUE

!---------------------------------------
! Read Model data (if any)
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[time-sig] Output of Simulation Time 
      RT_21 = TIME

! 20:[compare] Single Input Level Comparator 
!
      CALL EMTDC_X2COMP(0,0,3.0,RT_21,1.0,0.0,0.0,RVD2_1)
      RT_22 = RVD2_1(1)

! 30:[unity] Type conversion block 
! real -> nearest integer
      GRID = NINT(RT_22)

! 40:[const] Real Constant 
      RT_10 = 0.0

! 50:[const] Real Constant 
      RT_11 = 0.01

! 60:[const] Real Constant 
      RT_20 = 7.967

! 70:[time-sig] Output of Simulation Time 
      RT_8 = TIME

! 80:[breaker3] 3 Phase Breaker 'GRID'
      ISTORI = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+8),0.01,1000000.0,0.0,0,NINT(&
     &1.0-REAL(GRID)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+9),0.01,1000000.0,0.0,0,NINT(&
     &1.0-REAL(GRID)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+4),0.01,1000000.0,0.0,0,NINT(&
     &1.0-REAL(GRID)))
!
      B_Stt1 = 2*E_BtoI(OPENBR( (IBRCH(1)+8),SS(1)))
      B_Stt2 = 2*E_BtoI(OPENBR( (IBRCH(1)+9),SS(1)))
      B_Stt3 = 2*E_BtoI(OPENBR( (IBRCH(1)+4),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(ISTORI+0) .NE. B_Stt1)) THEN
         CALL PSCAD_AGI(106900008,B_Stt1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(ISTORI+1) .NE. B_Stt2)) THEN
         CALL PSCAD_AGI(106900008,B_Stt2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(ISTORI+2) .NE. B_Stt3)) THEN
         CALL PSCAD_AGI(106900008,B_Stt3,"BOpen3")
      ENDIF
      STORI(ISTORI+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+8),SS(1)))
      STORI(ISTORI+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+9),SS(1)))
      STORI(ISTORI+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+4),SS(1)))

! 100:[time-sig] Output of Simulation Time 
      RT_18 = TIME

! 110:[compare] Single Input Level Comparator 
!
      CALL EMTDC_X2COMP(0,0,0.3,RT_18,0.0,0.0,1.0,RVD2_1)
      RT_19 = RVD2_1(1)

! 120:[unity] Type conversion block 
! real -> nearest integer
      S2M = NINT(RT_19)

! 130:[time-sig] Output of Simulation Time 
      RT_16 = TIME

! 140:[compare] Single Input Level Comparator 
!
      CALL EMTDC_X2COMP(0,0,0.5,RT_16,0.0,0.0,1.0,RVD2_1)
      RT_17 = RVD2_1(1)

! 150:[unity] Type conversion block 
! real -> nearest integer
      ENAB = NINT(RT_17)

! 170:[time-sig] Output of Simulation Time 
      RT_14 = TIME

! 180:[compare] Single Input Level Comparator 
!
      CALL EMTDC_X2COMP(0,0,1.0,RT_14,1.0,0.0,0.0,RVD2_1)
      RT_15 = RVD2_1(1)

! 190:[unity] Type conversion block 
! real -> nearest integer
      DIST = NINT(RT_15)

! 200:[select] Two Input Selector 
!  Selector
      IF (DIST .EQ. 1) THEN
         RT_12 = RT_10
      ELSE
         RT_12 = RT_11
      ENDIF
!

! 210:[nl_tfun] Non-Linear Transfer Characteristic 
      RVD10_1(1)  = 0.0
      RVD10_2(1)  = 60.0
      RVD10_1(2)  = 10.0
      RVD10_2(2)  = 60.0
      RVD10_1(3)  = 15.0
      RVD10_2(3)  = 59.0
      RVD10_1(4)  = 20.0
      RVD10_2(4)  = 59.0
      DO IVD1_1 = 4+1,10
        RVD10_1(IVD1_1) = 0.0
        RVD10_2(IVD1_1) = 0.0
      ENDDO
      RT_7 = APLIN(4,RVD10_1,RVD10_2,RT_8)
!

! 220:[gain] Gain Block 
!  Gain
      RT_23 = 0.0026525 * W
!

! 230:[pss] Power System Stabilizer 
! Initializing the PSS & DEC output variable.
      RT_24 = 0.0
!
! Single Input Power System stabilizer PSS1A
!
      CALL PSS1A(RT_23,0.0,10.0,10.0,0.0,0.0,1.5,1.0,1.0,1.0,0.1,-0.1,In&
     &itEx,RT_24)
!

! 240:[excac] Type AC exciter 
! AC Exciter Model AC1A
      CALL EXCAC1A(RT_13,RT_3,RT_24,0.0,0.0, 200.0,0.02,14.5,-14.5,-1.0E&
     &10,1.0E10,6.03,-5.43, 0.1,4.18,0.03,3.14,0.8,1.0,0.38,0.2,IF,0.03,&
     &1.0,RT_2,InitEx,EF,0.0,0.0,0.0)
      RT_4 = STORF(THIS+5)
!

! 250:[sync_machine] Synchronous Machine 'HG'
      CALL E_CPFSYNC(0.500070760013,0.0,1.0,0.0,7.967,RVD1_1,RVD1_2)
!  Synchronous machine model
      STORI(NSTORI) = NINT(STOR(NEXC+294))
      SP_IN = 376.991118
      CALL NEWSNC(SS(1), NT_2(1),NT_2(2),NT_2(3),0.0,RVD1_1,RVD1_2,0,S2M&
     &,1.0,0,ENAB,SP_IN,RT_1,0,0,1.0,0.0,376.991118,EF,0,1.0,IF,Vn_O,Cn_&
     &O,LdA_O,Tht_O,W,RT_9,Pw_O,Qva_O,Tmsd_O,Tesd_O,M_ACTV,SP_TQ,1,Z_O1,&
     &1,Z_O2,1,Z_O3,1,Z_O4,1,Z_O5,1,Z_O6,0)
      TM = RT_1
!     IF (SP_TQ .EQ. 0) TM = STOR(NEXC-375+22)+STOR(NEXC-375+347)
      IF (SP_TQ .EQ. 0) TM = Tmsd_O
      RT_5=Tmsd_O
      RT_2 = STOR(NEXC-375+265)*STOR(NEXC-375+302)
      IF ((M_ACTV .EQ. 1) .AND. (STORI(NSTORI).EQ.0)) THEN
          IF (STOR(NEXC-375+293).GT.0.5) THEN
              STORF(NSTORF) = STOR(NEXC-375+161)
          ELSE
              STORF(NSTORF) = STOR(NEXC-375+296)
          ENDIF
      ENDIF
      IF (M_ACTV .EQ. 1) THEN
        STORF(NSTORF+1) = STORF(NSTORF+1) + (W-376.991118)*DELT
        IF (SP_TQ .EQ. 0) STORF(NSTORF+2) = LdA_O
        STORF(NSTORF+3) = STORF(NSTORF) + STORF(NSTORF+1) + STORF(NSTORF&
     &+2)
      ELSE
        STORF(NSTORF+3) = 0.0
      ENDIF
      MVTPU=VM3PH2(SS(1),NT_2(1),NT_2(2),NT_2(3),0.02)/(SQRT_3*7.967)
      IF(MVTPU .LT. 1.0E-8) THEN 
         MCVTPU=1.0
      ELSE
         MCVTPU=MVTPU
      ENDIF

      SBASE_I = 1.0/(119.98302*1.0)

      RT_3(1) = MCVTPU
      IF(MVTPU .LT. 1.0E-8) THEN 
         RT_3(2) = 0.0
         RT_3(3) = 0.0
      ELSE
         RT_3(2) = Pw_O*SBASE_I/MCVTPU
         RT_3(3) = -Qva_O*SBASE_I/MCVTPU
      ENDIF
      POUT = Pw_O/119.98302
      QOUT = Qva_O/119.98302
      Lang = LdA_O
      Theta = Tht_O
      InitGv = SP_TQ
      InitEx = M_ACTV
      Wang = STORF(NSTORF+3)
      NSTORF = NSTORF + 4
      NSTORI = NSTORI + 1
!  End of code for Synchronous machine model
!

! 260:[sandhdefn] Sample and Hold 
!  Sample and Hold
      CALL SANDH2(RT_5,ENAB,  1,  RT_1)

! 270:[sandhdefn] Sample and Hold 
!  Sample and Hold
      CALL SANDH2(RT_4,S2M,  1,  RT_6)

! 280:[sumjct] Summing/Differencing Junctions 
      RT_13 = + RT_12 + RT_6
!

! 290:[pgb] Output Channel 'Internal Phase Angle'

      PGB(IPGB+2) = Wang

! 300:[pgb] Output Channel 'Theta'

      PGB(IPGB+3) = Theta

! 310:[pgb] Output Channel 'Load Angle'

      PGB(IPGB+4) = Lang

! 320:[pgb] Output Channel 'FIELD VOLTAGE'

      PGB(IPGB+5) = EF

! 330:[pgb] Output Channel 'FIELD CURRENT'

      PGB(IPGB+6) = IF

! 340:[pgb] Output Channel 'OMEGA'

      PGB(IPGB+7) = W

! 350:[pgb] Output Channel 'REACTIVE POWER'

      PGB(IPGB+8) = 120.0 * QOUT

! 360:[pgb] Output Channel 'MECHANICAL TORQUE'

      PGB(IPGB+9) = TM

! 370:[pgb] Output Channel 'REAL POWER'

      PGB(IPGB+10) = 120.0 * POUT

! 380:[breaker3] 3 Phase Breaker 'DIST'
      ISTORI = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+1),0.01,1000000.0,0.0,0,NINT(&
     &1.0-REAL(DIST)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+2),0.01,1000000.0,0.0,0,NINT(&
     &1.0-REAL(DIST)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+3),0.01,1000000.0,0.0,0,NINT(&
     &1.0-REAL(DIST)))
!
      B_Stt1 = 2*E_BtoI(OPENBR( (IBRCH(1)+1),SS(1)))
      B_Stt2 = 2*E_BtoI(OPENBR( (IBRCH(1)+2),SS(1)))
      B_Stt3 = 2*E_BtoI(OPENBR( (IBRCH(1)+3),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(ISTORI+0) .NE. B_Stt1)) THEN
         CALL PSCAD_AGI(106873080,B_Stt1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(ISTORI+1) .NE. B_Stt2)) THEN
         CALL PSCAD_AGI(106873080,B_Stt2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(ISTORI+2) .NE. B_Stt3)) THEN
         CALL PSCAD_AGI(106873080,B_Stt3,"BOpen3")
      ENDIF
      STORI(ISTORI+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+1),SS(1)))
      STORI(ISTORI+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+2),SS(1)))
      STORI(ISTORI+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+3),SS(1)))

! 390:[source_3] Three Phase Voltage Source Model 2 'Source 1'
! Three Phase Source: Source 1  Type: L
!  Mag: externally controlled, Freq: externally controlled, Phase: 0.0 degs, StartUp: 0.05 sec
      E_MAG = RT_20
      F_RAD = RT_7 * TWO_PI
      R_PH  = 0.0*PI_BY180
      CALL EMTDC_3PHVSRC(SS(1), (IBRCH(1)+5), (IBRCH(1)+6), (IBRCH(1)+7)&
     &, 0.05, .TRUE., E_MAG , F_RAD, R_PH)
!

! 400:[pgb] Output Channel 'MECHANICAL TORQUE'

      PGB(IPGB+11) = RT_24

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 1) = RT_1
      STOF(ISTOF + 2) = RT_2
      STOF(ISTOF + 6) = RT_4
      STOF(ISTOF + 7) = POUT
      STOF(ISTOF + 8) = QOUT
      STOF(ISTOF + 9) = IF
      STOF(ISTOF + 10) = TM
      STOF(ISTOF + 11) = EF
      STOF(ISTOF + 12) = Lang
      STOF(ISTOF + 13) = Theta
      STOF(ISTOF + 14) = Wang
      STOF(ISTOF + 15) = RT_5
      STOF(ISTOF + 16) = RT_6
      STOF(ISTOF + 17) = Vrms
      STOF(ISTOF + 18) = RT_7
      STOF(ISTOF + 19) = RT_8
      STOI(ISTOI + 1) = DIST
      STOI(ISTOI + 2) = ENAB
      STOI(ISTOI + 3) = S2M
      STOI(ISTOI + 4) = GRID
      STOF(ISTOF + 20) = W
      STOF(ISTOF + 21) = RT_9
      STOF(ISTOF + 22) = RT_10
      STOF(ISTOF + 23) = RT_11
      STOF(ISTOF + 24) = RT_12
      STOF(ISTOF + 25) = RT_13
      STOI(ISTOI + 5) = InitEx
      STOF(ISTOF + 26) = RT_14
      STOF(ISTOF + 27) = RT_15
      STOF(ISTOF + 28) = RT_16
      STOF(ISTOF + 29) = RT_17
      STOF(ISTOF + 30) = RT_18
      STOF(ISTOF + 31) = RT_19
      STOF(ISTOF + 32) = RT_20
      STOF(ISTOF + 33) = RT_21
      STOF(ISTOF + 34) = RT_22
      STOF(ISTOF + 35) = RT_23
      STOF(ISTOF + 36) = RT_24
      STOI(ISTOI + 6) = InitGv

! Array(1:3) quantities...
      DO 103  IT_0 = 1,3
         STOF(ISTOF + 2 + IT_0) = RT_3(IT_0)
  103 CONTINUE

!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE DSOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indexes
      INTEGER NT_2(3)

! Control Signals
      REAL    Vrms

! Internal Variables
      INTEGER IVD1_1
      REAL    P_1, Q_1, RVD1_1

! Indexing variables
      INTEGER ISTOL, ISTOI, ISTOF, IT_0           ! Storage Indexes
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Record local indexes
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage
      NTXFR = NTXFR + 1
      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)

! Record Offset and Increment Storage Counters
      IPGB      = NPGB
      NPGB      = NPGB + 11
      INODE     = NNODE + 2
      NNODE     = NNODE + 11

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO 100  IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
  100 CONTINUE

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 12

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      Vrms     = STOF(ISTOF + 17)

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array(1:3) quantities...
      DO 101  IT_0 = 1,3
         NT_2(IT_0) = NODE(INODE + 3 + IT_0)
  101 CONTINUE

!---------------------------------------
! Read Model data (if any)
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 80:[breaker3] 3 Phase Breaker 'GRID'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+8), (IBRCH(1)+9), (IBRCH(1)+4),0,0&
     &,0,IVD1_1,0.02,P_1,Q_1)

! 90:[multimeter] Multimeter 
!
!
!
!
!
      RVD1_1 = VM3PH2(SS(1), NT_2(1), NT_2(2), NT_2(3), 0.02) 
      Vrms = RVD1_1
!
!

! 160:[pgb] Output Channel 'TERMINAL VOLTAGE'

      PGB(IPGB+1) = Vrms

! 380:[breaker3] 3 Phase Breaker 'DIST'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (IBRCH(1)+3),0,0&
     &,0,IVD1_1,0.02,P_1,Q_1)

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 17) = Vrms

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

