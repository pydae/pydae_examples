!=======================================================================
! Generated by  : PSCAD v4.2.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE DSDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

!     SUBR    3PHVSRC       ! 3-Phase Source model
      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'
!     SUBR    NEWSNC        ! Synchronous Machine Simulation
!     SUBR    EXCAC1A       ! AC State Exciter AC1A

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Parameters

! Electrical Node Indexes
      INTEGER NT_1, NT_2, NT_3

! Control Signals
      INTEGER IT_1, IT_2, InitEx, IT_3, InitGv
      REAL    RT_1, RT_2(3), RT_3, RT_4, RT_5
      REAL    RT_6, RT_7, RT_8, RT_9, RT_10
      REAL    RT_11, RT_12, RT_13, RT_14, Testdy

! Internal Variables
      INTEGER SP_TQ, M_ACTV
      REAL    E_MAG, F_RAD, R_PH, Pw_O, Qva_O
      REAL    Vn_O, Cn_O, LdA_O, Tht_O, Tesd_O
      REAL    Tmsd_O, Z_O1, Z_O2, Z_O3, Z_O4
      REAL    Z_O5, Z_O6, SP_IN, RVD1_1, RVD1_2
      REAL    MCVTPU, MVTPU, SBASE_I

! Indexing variables
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indexes
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Record local indexes
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage
      NTXFR = NTXFR + 1
      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF

! Record Offset and Increment Storage Counters
      ISTOI     = NSTOI
      NSTOI     = NSTOI + 5
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 17
      NPGB      = NPGB + 2
      INODE     = NNODE + 2
      NNODE     = NNODE + 8

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO 100  IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
  100 CONTINUE

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 6

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      RT_1     = STOF(ISTOF + 1)
      IT_1     = STOI(ISTOI + 1)
      IT_2     = STOI(ISTOI + 2)
      RT_3     = STOF(ISTOF + 5)
      RT_4     = STOF(ISTOF + 6)
      RT_5     = STOF(ISTOF + 7)
      InitEx   = STOI(ISTOI + 3)
      RT_6     = STOF(ISTOF + 8)
      RT_7     = STOF(ISTOF + 9)
      RT_8     = STOF(ISTOF + 10)
      RT_9     = STOF(ISTOF + 11)
      IT_3     = STOI(ISTOI + 4)
      RT_10    = STOF(ISTOF + 12)
      RT_11    = STOF(ISTOF + 13)
      RT_12    = STOF(ISTOF + 14)
      RT_13    = STOF(ISTOF + 15)
      RT_14    = STOF(ISTOF + 16)
      Testdy   = STOF(ISTOF + 17)
      InitGv   = STOI(ISTOI + 5)

! Array(1:3) quantities...
      DO 101  IT_0 = 1,3
         RT_2(IT_0) = STOF(ISTOF + 1 + IT_0)
  101 CONTINUE

!---------------------------------------
! Transfer from Imports
!---------------------------------------


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------

      NT_1  = NODE(INODE + 1)
      NT_2  = NODE(INODE + 2)
      NT_3  = NODE(INODE + 3)

!---------------------------------------
! Read Model data (if any)
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[const] Real Constant 
      RT_5 = 1.0

! 20:[const] Real Constant 
      RT_13 = 231.0

! 30:[const] Real Constant 
      RT_14 = 50.0

! 70:[source_3] Three Phase Voltage Source Model 2 'Source 1'
! Three Phase Source: Source 1  Type: L
!  Mag: externally controlled, Freq: externally controlled, Phase: 0.0 degs, StartUp: 0.05 sec
      E_MAG = RT_13
      F_RAD = RT_14 * TWO_PI
      R_PH  = 0.0*PI_BY180
      CALL EMTDC_3PHVSRC(SS(1), (IBRCH(1)+3), (IBRCH(1)+2), (IBRCH(1)+1)&
     &, 0.05, .TRUE., E_MAG , F_RAD, R_PH)
!

! 80:[const] Real Constant 
      RT_9 = 0.0

! 130:[sync_machine] Synchronous Machine 'Sync1'
      CALL E_CPFSYNC(-721.688172974,-7794.23226812,1.0,-0.095993,0.4,RVD&
     &1_1,RVD1_2)
!  Synchronous machine model
      STORI(NSTORI) = NINT(STOR(NEXC+294))
      SP_IN = 314.15926
      CALL NEWSNC(SS(1), NT_2,NT_1,NT_3,0.0,RVD1_1,RVD1_2,0,0,1.0,0,1,SP&
     &_IN,RT_9,0,0,1.0,0.0,314.15926,RT_4,0,1.0,RT_3,Vn_O,Cn_O,LdA_O,Tht&
     &_O,RT_7,RT_6,Pw_O,Qva_O,Tmsd_O,Tesd_O,M_ACTV,SP_TQ,1,Z_O1,1,Z_O2,1&
     &,Z_O3,1,Z_O4,1,Z_O5,1,Z_O6,0)
      RT_8 = RT_9
!     IF (SP_TQ .EQ. 0) RT_8 = STOR(NEXC-375+22)+STOR(NEXC-375+347)
      IF (SP_TQ .EQ. 0) RT_8 = Tmsd_O
      RT_1 = STOR(NEXC-375+265)*STOR(NEXC-375+302)
      IF ((M_ACTV .EQ. 1) .AND. (STORI(NSTORI).EQ.0)) THEN
          IF (STOR(NEXC-375+293).GT.0.5) THEN
              STORF(NSTORF) = STOR(NEXC-375+161)
          ELSE
              STORF(NSTORF) = STOR(NEXC-375+296)
          ENDIF
      ENDIF
      IF (M_ACTV .EQ. 1) THEN
        STORF(NSTORF+1) = STORF(NSTORF+1) + (RT_7-314.15926)*DELT
        IF (SP_TQ .EQ. 0) STORF(NSTORF+2) = LdA_O
        STORF(NSTORF+3) = STORF(NSTORF) + STORF(NSTORF+1) + STORF(NSTORF&
     &+2)
      ELSE
        STORF(NSTORF+3) = 0.0
      ENDIF
      MVTPU=VM3PH2(SS(1),NT_2,NT_1,NT_3,0.02)/(SQRT_3*0.4)
      IF(MVTPU .LT. 1.0E-8) THEN 
         MCVTPU=1.0
      ELSE
         MCVTPU=MVTPU
      ENDIF

      SBASE_I = 1.0/(0.034641*1.0)

      RT_2(1) = MCVTPU
      IF(MVTPU .LT. 1.0E-8) THEN 
         RT_2(2) = 0.0
         RT_2(3) = 0.0
      ELSE
         RT_2(2) = Pw_O*SBASE_I/MCVTPU
         RT_2(3) = -Qva_O*SBASE_I/MCVTPU
      ENDIF
      RT_7 = RT_7/314.15926
      Testdy = Tesd_O
      InitGv = SP_TQ
      InitEx = M_ACTV
      NSTORF = NSTORF + 4
      NSTORI = NSTORI + 1
!  End of code for Synchronous machine model
!

! 140:[excac] Type AC exciter 
! AC Exciter Model AC1A
      CALL EXCAC1A(RT_5,RT_2,0.0,0.0,0.0, 400.0,0.02,14.5,-14.5,-1.0E10,&
     &1.0E10,6.03,-5.43, 0.1,4.18,0.03,3.14,0.8,1.0,0.38,0.2,RT_3,0.03,1&
     &.0,RT_1,InitEx,RT_4,0.0,0.0,0.0)
!

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 1) = RT_1
      STOI(ISTOI + 1) = IT_1
      STOI(ISTOI + 2) = IT_2
      STOF(ISTOF + 5) = RT_3
      STOF(ISTOF + 6) = RT_4
      STOF(ISTOF + 7) = RT_5
      STOI(ISTOI + 3) = InitEx
      STOF(ISTOF + 8) = RT_6
      STOF(ISTOF + 9) = RT_7
      STOF(ISTOF + 10) = RT_8
      STOF(ISTOF + 11) = RT_9
      STOI(ISTOI + 4) = IT_3
      STOF(ISTOF + 12) = RT_10
      STOF(ISTOF + 13) = RT_11
      STOF(ISTOF + 14) = RT_12
      STOF(ISTOF + 15) = RT_13
      STOF(ISTOF + 16) = RT_14
      STOF(ISTOF + 17) = Testdy
      STOI(ISTOI + 5) = InitGv

! Array(1:3) quantities...
      DO 102  IT_0 = 1,3
         STOF(ISTOF + 1 + IT_0) = RT_2(IT_0)
  102 CONTINUE

!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE DSOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    P3PH2         ! Three Phase Real Power Meter
      REAL    Q3PH2         ! Three Phase Reactive Power Meter
      REAL    VM3PH2        ! '3 Phase RMS Voltage Measurement'

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indexes
      INTEGER NT_1, NT_2, NT_3, NT_4, NT_5, NT_6

! Control Signals
      INTEGER IT_1, IT_2, IT_3
      REAL    RT_10, RT_11, RT_12

! Internal Variables

! Indexing variables
      INTEGER ISTOL, ISTOI, ISTOF, IT_0           ! Storage Indexes
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Record local indexes
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage
      NTXFR = NTXFR + 1
      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)

! Record Offset and Increment Storage Counters
      IPGB      = NPGB
      NPGB      = NPGB + 2
      INODE     = NNODE + 2
      NNODE     = NNODE + 8

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO 100  IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
  100 CONTINUE

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 6

!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      IT_1     = STOI(ISTOI + 1)
      IT_2     = STOI(ISTOI + 2)
      IT_3     = STOI(ISTOI + 4)
      RT_10    = STOF(ISTOF + 12)
      RT_11    = STOF(ISTOF + 13)
      RT_12    = STOF(ISTOF + 14)

!---------------------------------------
! Electrical Node Lookup
!---------------------------------------

      NT_1  = NODE(INODE + 1)
      NT_2  = NODE(INODE + 2)
      NT_3  = NODE(INODE + 3)
      NT_4  = NODE(INODE + 4)
      NT_5  = NODE(INODE + 5)
      NT_6  = NODE(INODE + 6)

!---------------------------------------
! Read Model data (if any)
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 90:[power] Real/Reactive Power Meter 
!  3 Phase Power Meter
      RT_11 = P3PH2(SS(1),  NT_5,NT_4,NT_6, NT_2,NT_1,NT_3, 0.02)
      RT_12 = Q3PH2(SS(1),  NT_5,NT_4,NT_6, NT_2,NT_1,NT_3, 0.02)
!

! 100:[rms3ph] Three Phase RMS Meter 
!
      RT_10 = 0.00434782608696 * VM3PH2(SS(1), NT_5, NT_4, NT_6, 0.02)
!



! 110:[pgb] Output Channel '<Untitled>'

      PGB(IPGB+1) = RT_12

! 120:[pgb] Output Channel '<Untitled>'

      PGB(IPGB+2) = RT_11

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOI(ISTOI + 1) = IT_1
      STOI(ISTOI + 2) = IT_2
      STOI(ISTOI + 4) = IT_3
      STOF(ISTOF + 12) = RT_10
      STOF(ISTOF + 13) = RT_11
      STOF(ISTOF + 14) = RT_12

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

