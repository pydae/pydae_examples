import numpy as np
import numba
import scipy.optimize as sopt
import scipy.sparse as sspa
from scipy.sparse.linalg import spsolve,spilu,splu
from numba import cuda
import cffi
import numba.core.typing.cffi_utils as cffi_support
from io import BytesIO
import pkgutil

dae_file_mode = 'local'

ffi = cffi.FFI()

if dae_file_mode == 'local':
    import cigre_eu_lv_cffi as jacs
if dae_file_mode == 'enviroment':
    import envus.no_enviroment.cigre_eu_lv_cffi as jacs
if dae_file_mode == 'colab':
    import cigre_eu_lv_cffi as jacs
    
cffi_support.register_module(jacs)
f_ini_eval = jacs.lib.f_ini_eval
g_ini_eval = jacs.lib.g_ini_eval
f_run_eval = jacs.lib.f_run_eval
g_run_eval = jacs.lib.g_run_eval
h_eval  = jacs.lib.h_eval

de_jac_ini_xy_eval = jacs.lib.de_jac_ini_xy_eval
de_jac_ini_up_eval = jacs.lib.de_jac_ini_up_eval
de_jac_ini_num_eval = jacs.lib.de_jac_ini_num_eval

sp_jac_ini_xy_eval = jacs.lib.sp_jac_ini_xy_eval
sp_jac_ini_up_eval = jacs.lib.sp_jac_ini_up_eval
sp_jac_ini_num_eval = jacs.lib.sp_jac_ini_num_eval

de_jac_run_xy_eval = jacs.lib.de_jac_run_xy_eval
de_jac_run_up_eval = jacs.lib.de_jac_run_up_eval
de_jac_run_num_eval = jacs.lib.de_jac_run_num_eval

sp_jac_run_xy_eval = jacs.lib.sp_jac_run_xy_eval
sp_jac_run_up_eval = jacs.lib.sp_jac_run_up_eval
sp_jac_run_num_eval = jacs.lib.sp_jac_run_num_eval

de_jac_trap_xy_eval= jacs.lib.de_jac_trap_xy_eval            
de_jac_trap_up_eval= jacs.lib.de_jac_trap_up_eval        
de_jac_trap_num_eval= jacs.lib.de_jac_trap_num_eval

sp_jac_trap_xy_eval= jacs.lib.sp_jac_trap_xy_eval            
sp_jac_trap_up_eval= jacs.lib.sp_jac_trap_up_eval        
sp_jac_trap_num_eval= jacs.lib.sp_jac_trap_num_eval

sp_Fu_run_up_eval = jacs.lib.sp_Fu_run_up_eval
sp_Gu_run_up_eval = jacs.lib.sp_Gu_run_up_eval
sp_Hx_run_up_eval = jacs.lib.sp_Hx_run_up_eval
sp_Hy_run_up_eval = jacs.lib.sp_Hy_run_up_eval
sp_Hu_run_up_eval = jacs.lib.sp_Hu_run_up_eval
sp_Fu_run_xy_eval = jacs.lib.sp_Fu_run_xy_eval
sp_Gu_run_xy_eval = jacs.lib.sp_Gu_run_xy_eval
sp_Hx_run_xy_eval = jacs.lib.sp_Hx_run_xy_eval
sp_Hy_run_xy_eval = jacs.lib.sp_Hy_run_xy_eval
sp_Hu_run_xy_eval = jacs.lib.sp_Hu_run_xy_eval



import json

sin = np.sin
cos = np.cos
atan2 = np.arctan2
sqrt = np.sqrt 
sign = np.sign 
exp = np.exp


class model: 

    def __init__(self): 
        
        self.matrices_folder = 'build'
        
        self.dae_file_mode = 'local'
        self.t_end = 10.000000 
        self.Dt = 0.0010000 
        self.decimation = 10.000000 
        self.itol = 1e-6 
        self.Dt_max = 0.001000 
        self.Dt_min = 0.001000 
        self.solvern = 5 
        self.imax = 100 
        self.N_x = 1
        self.N_y = 454 
        self.N_z = 345 
        self.N_store = 100000 
        self.params_list = ['g_R01_0_R02_0_0', 'b_R01_0_R02_0_0', 'g_R01_0_R02_0_1', 'b_R01_0_R02_0_1', 'g_R01_0_R02_0_2', 'b_R01_0_R02_0_2', 'g_R01_0_R02_0_3', 'b_R01_0_R02_0_3', 'g_R01_1_R02_1_0', 'b_R01_1_R02_1_0', 'g_R01_1_R02_1_1', 'b_R01_1_R02_1_1', 'g_R01_1_R02_1_2', 'b_R01_1_R02_1_2', 'g_R01_1_R02_1_3', 'b_R01_1_R02_1_3', 'g_R01_2_R02_2_0', 'b_R01_2_R02_2_0', 'g_R01_2_R02_2_1', 'b_R01_2_R02_2_1', 'g_R01_2_R02_2_2', 'b_R01_2_R02_2_2', 'g_R01_2_R02_2_3', 'b_R01_2_R02_2_3', 'g_R01_3_R02_3_0', 'b_R01_3_R02_3_0', 'g_R01_3_R02_3_1', 'b_R01_3_R02_3_1', 'g_R01_3_R02_3_2', 'b_R01_3_R02_3_2', 'g_R01_3_R02_3_3', 'b_R01_3_R02_3_3', 'g_R02_0_R03_0_0', 'b_R02_0_R03_0_0', 'g_R02_0_R03_0_1', 'b_R02_0_R03_0_1', 'g_R02_0_R03_0_2', 'b_R02_0_R03_0_2', 'g_R02_0_R03_0_3', 'b_R02_0_R03_0_3', 'g_R02_1_R03_1_0', 'b_R02_1_R03_1_0', 'g_R02_1_R03_1_1', 'b_R02_1_R03_1_1', 'g_R02_1_R03_1_2', 'b_R02_1_R03_1_2', 'g_R02_1_R03_1_3', 'b_R02_1_R03_1_3', 'g_R02_2_R03_2_0', 'b_R02_2_R03_2_0', 'g_R02_2_R03_2_1', 'b_R02_2_R03_2_1', 'g_R02_2_R03_2_2', 'b_R02_2_R03_2_2', 'g_R02_2_R03_2_3', 'b_R02_2_R03_2_3', 'g_R02_3_R03_3_0', 'b_R02_3_R03_3_0', 'g_R02_3_R03_3_1', 'b_R02_3_R03_3_1', 'g_R02_3_R03_3_2', 'b_R02_3_R03_3_2', 'g_R02_3_R03_3_3', 'b_R02_3_R03_3_3', 'g_R03_0_R04_0_0', 'b_R03_0_R04_0_0', 'g_R03_0_R04_0_1', 'b_R03_0_R04_0_1', 'g_R03_0_R04_0_2', 'b_R03_0_R04_0_2', 'g_R03_0_R04_0_3', 'b_R03_0_R04_0_3', 'g_R03_1_R04_1_0', 'b_R03_1_R04_1_0', 'g_R03_1_R04_1_1', 'b_R03_1_R04_1_1', 'g_R03_1_R04_1_2', 'b_R03_1_R04_1_2', 'g_R03_1_R04_1_3', 'b_R03_1_R04_1_3', 'g_R03_2_R04_2_0', 'b_R03_2_R04_2_0', 'g_R03_2_R04_2_1', 'b_R03_2_R04_2_1', 'g_R03_2_R04_2_2', 'b_R03_2_R04_2_2', 'g_R03_2_R04_2_3', 'b_R03_2_R04_2_3', 'g_R03_3_R04_3_0', 'b_R03_3_R04_3_0', 'g_R03_3_R04_3_1', 'b_R03_3_R04_3_1', 'g_R03_3_R04_3_2', 'b_R03_3_R04_3_2', 'g_R03_3_R04_3_3', 'b_R03_3_R04_3_3', 'g_R04_0_R05_0_0', 'b_R04_0_R05_0_0', 'g_R04_0_R05_0_1', 'b_R04_0_R05_0_1', 'g_R04_0_R05_0_2', 'b_R04_0_R05_0_2', 'g_R04_0_R05_0_3', 'b_R04_0_R05_0_3', 'g_R04_1_R05_1_0', 'b_R04_1_R05_1_0', 'g_R04_1_R05_1_1', 'b_R04_1_R05_1_1', 'g_R04_1_R05_1_2', 'b_R04_1_R05_1_2', 'g_R04_1_R05_1_3', 'b_R04_1_R05_1_3', 'g_R04_2_R05_2_0', 'b_R04_2_R05_2_0', 'g_R04_2_R05_2_1', 'b_R04_2_R05_2_1', 'g_R04_2_R05_2_2', 'b_R04_2_R05_2_2', 'g_R04_2_R05_2_3', 'b_R04_2_R05_2_3', 'g_R04_3_R05_3_0', 'b_R04_3_R05_3_0', 'g_R04_3_R05_3_1', 'b_R04_3_R05_3_1', 'g_R04_3_R05_3_2', 'b_R04_3_R05_3_2', 'g_R04_3_R05_3_3', 'b_R04_3_R05_3_3', 'g_R05_0_R06_0_0', 'b_R05_0_R06_0_0', 'g_R05_0_R06_0_1', 'b_R05_0_R06_0_1', 'g_R05_0_R06_0_2', 'b_R05_0_R06_0_2', 'g_R05_0_R06_0_3', 'b_R05_0_R06_0_3', 'g_R05_1_R06_1_0', 'b_R05_1_R06_1_0', 'g_R05_1_R06_1_1', 'b_R05_1_R06_1_1', 'g_R05_1_R06_1_2', 'b_R05_1_R06_1_2', 'g_R05_1_R06_1_3', 'b_R05_1_R06_1_3', 'g_R05_2_R06_2_0', 'b_R05_2_R06_2_0', 'g_R05_2_R06_2_1', 'b_R05_2_R06_2_1', 'g_R05_2_R06_2_2', 'b_R05_2_R06_2_2', 'g_R05_2_R06_2_3', 'b_R05_2_R06_2_3', 'g_R05_3_R06_3_0', 'b_R05_3_R06_3_0', 'g_R05_3_R06_3_1', 'b_R05_3_R06_3_1', 'g_R05_3_R06_3_2', 'b_R05_3_R06_3_2', 'g_R05_3_R06_3_3', 'b_R05_3_R06_3_3', 'g_R06_0_R07_0_0', 'b_R06_0_R07_0_0', 'g_R06_0_R07_0_1', 'b_R06_0_R07_0_1', 'g_R06_0_R07_0_2', 'b_R06_0_R07_0_2', 'g_R06_0_R07_0_3', 'b_R06_0_R07_0_3', 'g_R06_1_R07_1_0', 'b_R06_1_R07_1_0', 'g_R06_1_R07_1_1', 'b_R06_1_R07_1_1', 'g_R06_1_R07_1_2', 'b_R06_1_R07_1_2', 'g_R06_1_R07_1_3', 'b_R06_1_R07_1_3', 'g_R06_2_R07_2_0', 'b_R06_2_R07_2_0', 'g_R06_2_R07_2_1', 'b_R06_2_R07_2_1', 'g_R06_2_R07_2_2', 'b_R06_2_R07_2_2', 'g_R06_2_R07_2_3', 'b_R06_2_R07_2_3', 'g_R06_3_R07_3_0', 'b_R06_3_R07_3_0', 'g_R06_3_R07_3_1', 'b_R06_3_R07_3_1', 'g_R06_3_R07_3_2', 'b_R06_3_R07_3_2', 'g_R06_3_R07_3_3', 'b_R06_3_R07_3_3', 'g_R07_0_R08_0_0', 'b_R07_0_R08_0_0', 'g_R07_0_R08_0_1', 'b_R07_0_R08_0_1', 'g_R07_0_R08_0_2', 'b_R07_0_R08_0_2', 'g_R07_0_R08_0_3', 'b_R07_0_R08_0_3', 'g_R07_1_R08_1_0', 'b_R07_1_R08_1_0', 'g_R07_1_R08_1_1', 'b_R07_1_R08_1_1', 'g_R07_1_R08_1_2', 'b_R07_1_R08_1_2', 'g_R07_1_R08_1_3', 'b_R07_1_R08_1_3', 'g_R07_2_R08_2_0', 'b_R07_2_R08_2_0', 'g_R07_2_R08_2_1', 'b_R07_2_R08_2_1', 'g_R07_2_R08_2_2', 'b_R07_2_R08_2_2', 'g_R07_2_R08_2_3', 'b_R07_2_R08_2_3', 'g_R07_3_R08_3_0', 'b_R07_3_R08_3_0', 'g_R07_3_R08_3_1', 'b_R07_3_R08_3_1', 'g_R07_3_R08_3_2', 'b_R07_3_R08_3_2', 'g_R07_3_R08_3_3', 'b_R07_3_R08_3_3', 'g_R08_0_R09_0_0', 'b_R08_0_R09_0_0', 'g_R08_0_R09_0_1', 'b_R08_0_R09_0_1', 'g_R08_0_R09_0_2', 'b_R08_0_R09_0_2', 'g_R08_0_R09_0_3', 'b_R08_0_R09_0_3', 'g_R08_1_R09_1_0', 'b_R08_1_R09_1_0', 'g_R08_1_R09_1_1', 'b_R08_1_R09_1_1', 'g_R08_1_R09_1_2', 'b_R08_1_R09_1_2', 'g_R08_1_R09_1_3', 'b_R08_1_R09_1_3', 'g_R08_2_R09_2_0', 'b_R08_2_R09_2_0', 'g_R08_2_R09_2_1', 'b_R08_2_R09_2_1', 'g_R08_2_R09_2_2', 'b_R08_2_R09_2_2', 'g_R08_2_R09_2_3', 'b_R08_2_R09_2_3', 'g_R08_3_R09_3_0', 'b_R08_3_R09_3_0', 'g_R08_3_R09_3_1', 'b_R08_3_R09_3_1', 'g_R08_3_R09_3_2', 'b_R08_3_R09_3_2', 'g_R08_3_R09_3_3', 'b_R08_3_R09_3_3', 'g_R09_0_R10_0_0', 'b_R09_0_R10_0_0', 'g_R09_0_R10_0_1', 'b_R09_0_R10_0_1', 'g_R09_0_R10_0_2', 'b_R09_0_R10_0_2', 'g_R09_0_R10_0_3', 'b_R09_0_R10_0_3', 'g_R09_1_R10_1_0', 'b_R09_1_R10_1_0', 'g_R09_1_R10_1_1', 'b_R09_1_R10_1_1', 'g_R09_1_R10_1_2', 'b_R09_1_R10_1_2', 'g_R09_1_R10_1_3', 'b_R09_1_R10_1_3', 'g_R09_2_R10_2_0', 'b_R09_2_R10_2_0', 'g_R09_2_R10_2_1', 'b_R09_2_R10_2_1', 'g_R09_2_R10_2_2', 'b_R09_2_R10_2_2', 'g_R09_2_R10_2_3', 'b_R09_2_R10_2_3', 'g_R09_3_R10_3_0', 'b_R09_3_R10_3_0', 'g_R09_3_R10_3_1', 'b_R09_3_R10_3_1', 'g_R09_3_R10_3_2', 'b_R09_3_R10_3_2', 'g_R09_3_R10_3_3', 'b_R09_3_R10_3_3', 'g_R03_0_R11_0_0', 'b_R03_0_R11_0_0', 'g_R03_0_R11_0_1', 'b_R03_0_R11_0_1', 'g_R03_0_R11_0_2', 'b_R03_0_R11_0_2', 'g_R03_0_R11_0_3', 'b_R03_0_R11_0_3', 'g_R03_1_R11_1_0', 'b_R03_1_R11_1_0', 'g_R03_1_R11_1_1', 'b_R03_1_R11_1_1', 'g_R03_1_R11_1_2', 'b_R03_1_R11_1_2', 'g_R03_1_R11_1_3', 'b_R03_1_R11_1_3', 'g_R03_2_R11_2_0', 'b_R03_2_R11_2_0', 'g_R03_2_R11_2_1', 'b_R03_2_R11_2_1', 'g_R03_2_R11_2_2', 'b_R03_2_R11_2_2', 'g_R03_2_R11_2_3', 'b_R03_2_R11_2_3', 'g_R03_3_R11_3_0', 'b_R03_3_R11_3_0', 'g_R03_3_R11_3_1', 'b_R03_3_R11_3_1', 'g_R03_3_R11_3_2', 'b_R03_3_R11_3_2', 'g_R03_3_R11_3_3', 'b_R03_3_R11_3_3', 'g_R04_0_R12_0_0', 'b_R04_0_R12_0_0', 'g_R04_0_R12_0_1', 'b_R04_0_R12_0_1', 'g_R04_0_R12_0_2', 'b_R04_0_R12_0_2', 'g_R04_0_R12_0_3', 'b_R04_0_R12_0_3', 'g_R04_1_R12_1_0', 'b_R04_1_R12_1_0', 'g_R04_1_R12_1_1', 'b_R04_1_R12_1_1', 'g_R04_1_R12_1_2', 'b_R04_1_R12_1_2', 'g_R04_1_R12_1_3', 'b_R04_1_R12_1_3', 'g_R04_2_R12_2_0', 'b_R04_2_R12_2_0', 'g_R04_2_R12_2_1', 'b_R04_2_R12_2_1', 'g_R04_2_R12_2_2', 'b_R04_2_R12_2_2', 'g_R04_2_R12_2_3', 'b_R04_2_R12_2_3', 'g_R04_3_R12_3_0', 'b_R04_3_R12_3_0', 'g_R04_3_R12_3_1', 'b_R04_3_R12_3_1', 'g_R04_3_R12_3_2', 'b_R04_3_R12_3_2', 'g_R04_3_R12_3_3', 'b_R04_3_R12_3_3', 'g_R12_0_R13_0_0', 'b_R12_0_R13_0_0', 'g_R12_0_R13_0_1', 'b_R12_0_R13_0_1', 'g_R12_0_R13_0_2', 'b_R12_0_R13_0_2', 'g_R12_0_R13_0_3', 'b_R12_0_R13_0_3', 'g_R12_1_R13_1_0', 'b_R12_1_R13_1_0', 'g_R12_1_R13_1_1', 'b_R12_1_R13_1_1', 'g_R12_1_R13_1_2', 'b_R12_1_R13_1_2', 'g_R12_1_R13_1_3', 'b_R12_1_R13_1_3', 'g_R12_2_R13_2_0', 'b_R12_2_R13_2_0', 'g_R12_2_R13_2_1', 'b_R12_2_R13_2_1', 'g_R12_2_R13_2_2', 'b_R12_2_R13_2_2', 'g_R12_2_R13_2_3', 'b_R12_2_R13_2_3', 'g_R12_3_R13_3_0', 'b_R12_3_R13_3_0', 'g_R12_3_R13_3_1', 'b_R12_3_R13_3_1', 'g_R12_3_R13_3_2', 'b_R12_3_R13_3_2', 'g_R12_3_R13_3_3', 'b_R12_3_R13_3_3', 'g_R13_0_R14_0_0', 'b_R13_0_R14_0_0', 'g_R13_0_R14_0_1', 'b_R13_0_R14_0_1', 'g_R13_0_R14_0_2', 'b_R13_0_R14_0_2', 'g_R13_0_R14_0_3', 'b_R13_0_R14_0_3', 'g_R13_1_R14_1_0', 'b_R13_1_R14_1_0', 'g_R13_1_R14_1_1', 'b_R13_1_R14_1_1', 'g_R13_1_R14_1_2', 'b_R13_1_R14_1_2', 'g_R13_1_R14_1_3', 'b_R13_1_R14_1_3', 'g_R13_2_R14_2_0', 'b_R13_2_R14_2_0', 'g_R13_2_R14_2_1', 'b_R13_2_R14_2_1', 'g_R13_2_R14_2_2', 'b_R13_2_R14_2_2', 'g_R13_2_R14_2_3', 'b_R13_2_R14_2_3', 'g_R13_3_R14_3_0', 'b_R13_3_R14_3_0', 'g_R13_3_R14_3_1', 'b_R13_3_R14_3_1', 'g_R13_3_R14_3_2', 'b_R13_3_R14_3_2', 'g_R13_3_R14_3_3', 'b_R13_3_R14_3_3', 'g_R14_0_R15_0_0', 'b_R14_0_R15_0_0', 'g_R14_0_R15_0_1', 'b_R14_0_R15_0_1', 'g_R14_0_R15_0_2', 'b_R14_0_R15_0_2', 'g_R14_0_R15_0_3', 'b_R14_0_R15_0_3', 'g_R14_1_R15_1_0', 'b_R14_1_R15_1_0', 'g_R14_1_R15_1_1', 'b_R14_1_R15_1_1', 'g_R14_1_R15_1_2', 'b_R14_1_R15_1_2', 'g_R14_1_R15_1_3', 'b_R14_1_R15_1_3', 'g_R14_2_R15_2_0', 'b_R14_2_R15_2_0', 'g_R14_2_R15_2_1', 'b_R14_2_R15_2_1', 'g_R14_2_R15_2_2', 'b_R14_2_R15_2_2', 'g_R14_2_R15_2_3', 'b_R14_2_R15_2_3', 'g_R14_3_R15_3_0', 'b_R14_3_R15_3_0', 'g_R14_3_R15_3_1', 'b_R14_3_R15_3_1', 'g_R14_3_R15_3_2', 'b_R14_3_R15_3_2', 'g_R14_3_R15_3_3', 'b_R14_3_R15_3_3', 'g_R06_0_R16_0_0', 'b_R06_0_R16_0_0', 'g_R06_0_R16_0_1', 'b_R06_0_R16_0_1', 'g_R06_0_R16_0_2', 'b_R06_0_R16_0_2', 'g_R06_0_R16_0_3', 'b_R06_0_R16_0_3', 'g_R06_1_R16_1_0', 'b_R06_1_R16_1_0', 'g_R06_1_R16_1_1', 'b_R06_1_R16_1_1', 'g_R06_1_R16_1_2', 'b_R06_1_R16_1_2', 'g_R06_1_R16_1_3', 'b_R06_1_R16_1_3', 'g_R06_2_R16_2_0', 'b_R06_2_R16_2_0', 'g_R06_2_R16_2_1', 'b_R06_2_R16_2_1', 'g_R06_2_R16_2_2', 'b_R06_2_R16_2_2', 'g_R06_2_R16_2_3', 'b_R06_2_R16_2_3', 'g_R06_3_R16_3_0', 'b_R06_3_R16_3_0', 'g_R06_3_R16_3_1', 'b_R06_3_R16_3_1', 'g_R06_3_R16_3_2', 'b_R06_3_R16_3_2', 'g_R06_3_R16_3_3', 'b_R06_3_R16_3_3', 'g_R09_0_R17_0_0', 'b_R09_0_R17_0_0', 'g_R09_0_R17_0_1', 'b_R09_0_R17_0_1', 'g_R09_0_R17_0_2', 'b_R09_0_R17_0_2', 'g_R09_0_R17_0_3', 'b_R09_0_R17_0_3', 'g_R09_1_R17_1_0', 'b_R09_1_R17_1_0', 'g_R09_1_R17_1_1', 'b_R09_1_R17_1_1', 'g_R09_1_R17_1_2', 'b_R09_1_R17_1_2', 'g_R09_1_R17_1_3', 'b_R09_1_R17_1_3', 'g_R09_2_R17_2_0', 'b_R09_2_R17_2_0', 'g_R09_2_R17_2_1', 'b_R09_2_R17_2_1', 'g_R09_2_R17_2_2', 'b_R09_2_R17_2_2', 'g_R09_2_R17_2_3', 'b_R09_2_R17_2_3', 'g_R09_3_R17_3_0', 'b_R09_3_R17_3_0', 'g_R09_3_R17_3_1', 'b_R09_3_R17_3_1', 'g_R09_3_R17_3_2', 'b_R09_3_R17_3_2', 'g_R09_3_R17_3_3', 'b_R09_3_R17_3_3', 'g_R10_0_R18_0_0', 'b_R10_0_R18_0_0', 'g_R10_0_R18_0_1', 'b_R10_0_R18_0_1', 'g_R10_0_R18_0_2', 'b_R10_0_R18_0_2', 'g_R10_0_R18_0_3', 'b_R10_0_R18_0_3', 'g_R10_1_R18_1_0', 'b_R10_1_R18_1_0', 'g_R10_1_R18_1_1', 'b_R10_1_R18_1_1', 'g_R10_1_R18_1_2', 'b_R10_1_R18_1_2', 'g_R10_1_R18_1_3', 'b_R10_1_R18_1_3', 'g_R10_2_R18_2_0', 'b_R10_2_R18_2_0', 'g_R10_2_R18_2_1', 'b_R10_2_R18_2_1', 'g_R10_2_R18_2_2', 'b_R10_2_R18_2_2', 'g_R10_2_R18_2_3', 'b_R10_2_R18_2_3', 'g_R10_3_R18_3_0', 'b_R10_3_R18_3_0', 'g_R10_3_R18_3_1', 'b_R10_3_R18_3_1', 'g_R10_3_R18_3_2', 'b_R10_3_R18_3_2', 'g_R10_3_R18_3_3', 'b_R10_3_R18_3_3', 'g_I01_0_I02_0_0', 'b_I01_0_I02_0_0', 'g_I01_0_I02_0_1', 'b_I01_0_I02_0_1', 'g_I01_0_I02_0_2', 'b_I01_0_I02_0_2', 'g_I01_0_I02_0_3', 'b_I01_0_I02_0_3', 'g_I01_1_I02_1_0', 'b_I01_1_I02_1_0', 'g_I01_1_I02_1_1', 'b_I01_1_I02_1_1', 'g_I01_1_I02_1_2', 'b_I01_1_I02_1_2', 'g_I01_1_I02_1_3', 'b_I01_1_I02_1_3', 'g_I01_2_I02_2_0', 'b_I01_2_I02_2_0', 'g_I01_2_I02_2_1', 'b_I01_2_I02_2_1', 'g_I01_2_I02_2_2', 'b_I01_2_I02_2_2', 'g_I01_2_I02_2_3', 'b_I01_2_I02_2_3', 'g_I01_3_I02_3_0', 'b_I01_3_I02_3_0', 'g_I01_3_I02_3_1', 'b_I01_3_I02_3_1', 'g_I01_3_I02_3_2', 'b_I01_3_I02_3_2', 'g_I01_3_I02_3_3', 'b_I01_3_I02_3_3', 'g_C01_0_C02_0_0', 'b_C01_0_C02_0_0', 'g_C01_0_C02_0_1', 'b_C01_0_C02_0_1', 'g_C01_0_C02_0_2', 'b_C01_0_C02_0_2', 'g_C01_0_C02_0_3', 'b_C01_0_C02_0_3', 'g_C01_1_C02_1_0', 'b_C01_1_C02_1_0', 'g_C01_1_C02_1_1', 'b_C01_1_C02_1_1', 'g_C01_1_C02_1_2', 'b_C01_1_C02_1_2', 'g_C01_1_C02_1_3', 'b_C01_1_C02_1_3', 'g_C01_2_C02_2_0', 'b_C01_2_C02_2_0', 'g_C01_2_C02_2_1', 'b_C01_2_C02_2_1', 'g_C01_2_C02_2_2', 'b_C01_2_C02_2_2', 'g_C01_2_C02_2_3', 'b_C01_2_C02_2_3', 'g_C01_3_C02_3_0', 'b_C01_3_C02_3_0', 'g_C01_3_C02_3_1', 'b_C01_3_C02_3_1', 'g_C01_3_C02_3_2', 'b_C01_3_C02_3_2', 'g_C01_3_C02_3_3', 'b_C01_3_C02_3_3', 'g_C02_0_C03_0_0', 'b_C02_0_C03_0_0', 'g_C02_0_C03_0_1', 'b_C02_0_C03_0_1', 'g_C02_0_C03_0_2', 'b_C02_0_C03_0_2', 'g_C02_0_C03_0_3', 'b_C02_0_C03_0_3', 'g_C02_1_C03_1_0', 'b_C02_1_C03_1_0', 'g_C02_1_C03_1_1', 'b_C02_1_C03_1_1', 'g_C02_1_C03_1_2', 'b_C02_1_C03_1_2', 'g_C02_1_C03_1_3', 'b_C02_1_C03_1_3', 'g_C02_2_C03_2_0', 'b_C02_2_C03_2_0', 'g_C02_2_C03_2_1', 'b_C02_2_C03_2_1', 'g_C02_2_C03_2_2', 'b_C02_2_C03_2_2', 'g_C02_2_C03_2_3', 'b_C02_2_C03_2_3', 'g_C02_3_C03_3_0', 'b_C02_3_C03_3_0', 'g_C02_3_C03_3_1', 'b_C02_3_C03_3_1', 'g_C02_3_C03_3_2', 'b_C02_3_C03_3_2', 'g_C02_3_C03_3_3', 'b_C02_3_C03_3_3', 'g_C03_0_C04_0_0', 'b_C03_0_C04_0_0', 'g_C03_0_C04_0_1', 'b_C03_0_C04_0_1', 'g_C03_0_C04_0_2', 'b_C03_0_C04_0_2', 'g_C03_0_C04_0_3', 'b_C03_0_C04_0_3', 'g_C03_1_C04_1_0', 'b_C03_1_C04_1_0', 'g_C03_1_C04_1_1', 'b_C03_1_C04_1_1', 'g_C03_1_C04_1_2', 'b_C03_1_C04_1_2', 'g_C03_1_C04_1_3', 'b_C03_1_C04_1_3', 'g_C03_2_C04_2_0', 'b_C03_2_C04_2_0', 'g_C03_2_C04_2_1', 'b_C03_2_C04_2_1', 'g_C03_2_C04_2_2', 'b_C03_2_C04_2_2', 'g_C03_2_C04_2_3', 'b_C03_2_C04_2_3', 'g_C03_3_C04_3_0', 'b_C03_3_C04_3_0', 'g_C03_3_C04_3_1', 'b_C03_3_C04_3_1', 'g_C03_3_C04_3_2', 'b_C03_3_C04_3_2', 'g_C03_3_C04_3_3', 'b_C03_3_C04_3_3', 'g_C04_0_C05_0_0', 'b_C04_0_C05_0_0', 'g_C04_0_C05_0_1', 'b_C04_0_C05_0_1', 'g_C04_0_C05_0_2', 'b_C04_0_C05_0_2', 'g_C04_0_C05_0_3', 'b_C04_0_C05_0_3', 'g_C04_1_C05_1_0', 'b_C04_1_C05_1_0', 'g_C04_1_C05_1_1', 'b_C04_1_C05_1_1', 'g_C04_1_C05_1_2', 'b_C04_1_C05_1_2', 'g_C04_1_C05_1_3', 'b_C04_1_C05_1_3', 'g_C04_2_C05_2_0', 'b_C04_2_C05_2_0', 'g_C04_2_C05_2_1', 'b_C04_2_C05_2_1', 'g_C04_2_C05_2_2', 'b_C04_2_C05_2_2', 'g_C04_2_C05_2_3', 'b_C04_2_C05_2_3', 'g_C04_3_C05_3_0', 'b_C04_3_C05_3_0', 'g_C04_3_C05_3_1', 'b_C04_3_C05_3_1', 'g_C04_3_C05_3_2', 'b_C04_3_C05_3_2', 'g_C04_3_C05_3_3', 'b_C04_3_C05_3_3', 'g_C05_0_C06_0_0', 'b_C05_0_C06_0_0', 'g_C05_0_C06_0_1', 'b_C05_0_C06_0_1', 'g_C05_0_C06_0_2', 'b_C05_0_C06_0_2', 'g_C05_0_C06_0_3', 'b_C05_0_C06_0_3', 'g_C05_1_C06_1_0', 'b_C05_1_C06_1_0', 'g_C05_1_C06_1_1', 'b_C05_1_C06_1_1', 'g_C05_1_C06_1_2', 'b_C05_1_C06_1_2', 'g_C05_1_C06_1_3', 'b_C05_1_C06_1_3', 'g_C05_2_C06_2_0', 'b_C05_2_C06_2_0', 'g_C05_2_C06_2_1', 'b_C05_2_C06_2_1', 'g_C05_2_C06_2_2', 'b_C05_2_C06_2_2', 'g_C05_2_C06_2_3', 'b_C05_2_C06_2_3', 'g_C05_3_C06_3_0', 'b_C05_3_C06_3_0', 'g_C05_3_C06_3_1', 'b_C05_3_C06_3_1', 'g_C05_3_C06_3_2', 'b_C05_3_C06_3_2', 'g_C05_3_C06_3_3', 'b_C05_3_C06_3_3', 'g_C06_0_C07_0_0', 'b_C06_0_C07_0_0', 'g_C06_0_C07_0_1', 'b_C06_0_C07_0_1', 'g_C06_0_C07_0_2', 'b_C06_0_C07_0_2', 'g_C06_0_C07_0_3', 'b_C06_0_C07_0_3', 'g_C06_1_C07_1_0', 'b_C06_1_C07_1_0', 'g_C06_1_C07_1_1', 'b_C06_1_C07_1_1', 'g_C06_1_C07_1_2', 'b_C06_1_C07_1_2', 'g_C06_1_C07_1_3', 'b_C06_1_C07_1_3', 'g_C06_2_C07_2_0', 'b_C06_2_C07_2_0', 'g_C06_2_C07_2_1', 'b_C06_2_C07_2_1', 'g_C06_2_C07_2_2', 'b_C06_2_C07_2_2', 'g_C06_2_C07_2_3', 'b_C06_2_C07_2_3', 'g_C06_3_C07_3_0', 'b_C06_3_C07_3_0', 'g_C06_3_C07_3_1', 'b_C06_3_C07_3_1', 'g_C06_3_C07_3_2', 'b_C06_3_C07_3_2', 'g_C06_3_C07_3_3', 'b_C06_3_C07_3_3', 'g_C07_0_C08_0_0', 'b_C07_0_C08_0_0', 'g_C07_0_C08_0_1', 'b_C07_0_C08_0_1', 'g_C07_0_C08_0_2', 'b_C07_0_C08_0_2', 'g_C07_0_C08_0_3', 'b_C07_0_C08_0_3', 'g_C07_1_C08_1_0', 'b_C07_1_C08_1_0', 'g_C07_1_C08_1_1', 'b_C07_1_C08_1_1', 'g_C07_1_C08_1_2', 'b_C07_1_C08_1_2', 'g_C07_1_C08_1_3', 'b_C07_1_C08_1_3', 'g_C07_2_C08_2_0', 'b_C07_2_C08_2_0', 'g_C07_2_C08_2_1', 'b_C07_2_C08_2_1', 'g_C07_2_C08_2_2', 'b_C07_2_C08_2_2', 'g_C07_2_C08_2_3', 'b_C07_2_C08_2_3', 'g_C07_3_C08_3_0', 'b_C07_3_C08_3_0', 'g_C07_3_C08_3_1', 'b_C07_3_C08_3_1', 'g_C07_3_C08_3_2', 'b_C07_3_C08_3_2', 'g_C07_3_C08_3_3', 'b_C07_3_C08_3_3', 'g_C08_0_C09_0_0', 'b_C08_0_C09_0_0', 'g_C08_0_C09_0_1', 'b_C08_0_C09_0_1', 'g_C08_0_C09_0_2', 'b_C08_0_C09_0_2', 'g_C08_0_C09_0_3', 'b_C08_0_C09_0_3', 'g_C08_1_C09_1_0', 'b_C08_1_C09_1_0', 'g_C08_1_C09_1_1', 'b_C08_1_C09_1_1', 'g_C08_1_C09_1_2', 'b_C08_1_C09_1_2', 'g_C08_1_C09_1_3', 'b_C08_1_C09_1_3', 'g_C08_2_C09_2_0', 'b_C08_2_C09_2_0', 'g_C08_2_C09_2_1', 'b_C08_2_C09_2_1', 'g_C08_2_C09_2_2', 'b_C08_2_C09_2_2', 'g_C08_2_C09_2_3', 'b_C08_2_C09_2_3', 'g_C08_3_C09_3_0', 'b_C08_3_C09_3_0', 'g_C08_3_C09_3_1', 'b_C08_3_C09_3_1', 'g_C08_3_C09_3_2', 'b_C08_3_C09_3_2', 'g_C08_3_C09_3_3', 'b_C08_3_C09_3_3', 'g_C03_0_C10_0_0', 'b_C03_0_C10_0_0', 'g_C03_0_C10_0_1', 'b_C03_0_C10_0_1', 'g_C03_0_C10_0_2', 'b_C03_0_C10_0_2', 'g_C03_0_C10_0_3', 'b_C03_0_C10_0_3', 'g_C03_1_C10_1_0', 'b_C03_1_C10_1_0', 'g_C03_1_C10_1_1', 'b_C03_1_C10_1_1', 'g_C03_1_C10_1_2', 'b_C03_1_C10_1_2', 'g_C03_1_C10_1_3', 'b_C03_1_C10_1_3', 'g_C03_2_C10_2_0', 'b_C03_2_C10_2_0', 'g_C03_2_C10_2_1', 'b_C03_2_C10_2_1', 'g_C03_2_C10_2_2', 'b_C03_2_C10_2_2', 'g_C03_2_C10_2_3', 'b_C03_2_C10_2_3', 'g_C03_3_C10_3_0', 'b_C03_3_C10_3_0', 'g_C03_3_C10_3_1', 'b_C03_3_C10_3_1', 'g_C03_3_C10_3_2', 'b_C03_3_C10_3_2', 'g_C03_3_C10_3_3', 'b_C03_3_C10_3_3', 'g_C10_0_C11_0_0', 'b_C10_0_C11_0_0', 'g_C10_0_C11_0_1', 'b_C10_0_C11_0_1', 'g_C10_0_C11_0_2', 'b_C10_0_C11_0_2', 'g_C10_0_C11_0_3', 'b_C10_0_C11_0_3', 'g_C10_1_C11_1_0', 'b_C10_1_C11_1_0', 'g_C10_1_C11_1_1', 'b_C10_1_C11_1_1', 'g_C10_1_C11_1_2', 'b_C10_1_C11_1_2', 'g_C10_1_C11_1_3', 'b_C10_1_C11_1_3', 'g_C10_2_C11_2_0', 'b_C10_2_C11_2_0', 'g_C10_2_C11_2_1', 'b_C10_2_C11_2_1', 'g_C10_2_C11_2_2', 'b_C10_2_C11_2_2', 'g_C10_2_C11_2_3', 'b_C10_2_C11_2_3', 'g_C10_3_C11_3_0', 'b_C10_3_C11_3_0', 'g_C10_3_C11_3_1', 'b_C10_3_C11_3_1', 'g_C10_3_C11_3_2', 'b_C10_3_C11_3_2', 'g_C10_3_C11_3_3', 'b_C10_3_C11_3_3', 'g_C01_0_C12_0_0', 'b_C01_0_C12_0_0', 'g_C01_0_C12_0_1', 'b_C01_0_C12_0_1', 'g_C01_0_C12_0_2', 'b_C01_0_C12_0_2', 'g_C01_0_C12_0_3', 'b_C01_0_C12_0_3', 'g_C01_1_C12_1_0', 'b_C01_1_C12_1_0', 'g_C01_1_C12_1_1', 'b_C01_1_C12_1_1', 'g_C01_1_C12_1_2', 'b_C01_1_C12_1_2', 'g_C01_1_C12_1_3', 'b_C01_1_C12_1_3', 'g_C01_2_C12_2_0', 'b_C01_2_C12_2_0', 'g_C01_2_C12_2_1', 'b_C01_2_C12_2_1', 'g_C01_2_C12_2_2', 'b_C01_2_C12_2_2', 'g_C01_2_C12_2_3', 'b_C01_2_C12_2_3', 'g_C01_3_C12_3_0', 'b_C01_3_C12_3_0', 'g_C01_3_C12_3_1', 'b_C01_3_C12_3_1', 'g_C01_3_C12_3_2', 'b_C01_3_C12_3_2', 'g_C01_3_C12_3_3', 'b_C01_3_C12_3_3', 'g_C01_0_C13_0_0', 'b_C01_0_C13_0_0', 'g_C01_0_C13_0_1', 'b_C01_0_C13_0_1', 'g_C01_0_C13_0_2', 'b_C01_0_C13_0_2', 'g_C01_0_C13_0_3', 'b_C01_0_C13_0_3', 'g_C01_1_C13_1_0', 'b_C01_1_C13_1_0', 'g_C01_1_C13_1_1', 'b_C01_1_C13_1_1', 'g_C01_1_C13_1_2', 'b_C01_1_C13_1_2', 'g_C01_1_C13_1_3', 'b_C01_1_C13_1_3', 'g_C01_2_C13_2_0', 'b_C01_2_C13_2_0', 'g_C01_2_C13_2_1', 'b_C01_2_C13_2_1', 'g_C01_2_C13_2_2', 'b_C01_2_C13_2_2', 'g_C01_2_C13_2_3', 'b_C01_2_C13_2_3', 'g_C01_3_C13_3_0', 'b_C01_3_C13_3_0', 'g_C01_3_C13_3_1', 'b_C01_3_C13_3_1', 'g_C01_3_C13_3_2', 'b_C01_3_C13_3_2', 'g_C01_3_C13_3_3', 'b_C01_3_C13_3_3', 'g_C10_0_C14_0_0', 'b_C10_0_C14_0_0', 'g_C10_0_C14_0_1', 'b_C10_0_C14_0_1', 'g_C10_0_C14_0_2', 'b_C10_0_C14_0_2', 'g_C10_0_C14_0_3', 'b_C10_0_C14_0_3', 'g_C10_1_C14_1_0', 'b_C10_1_C14_1_0', 'g_C10_1_C14_1_1', 'b_C10_1_C14_1_1', 'g_C10_1_C14_1_2', 'b_C10_1_C14_1_2', 'g_C10_1_C14_1_3', 'b_C10_1_C14_1_3', 'g_C10_2_C14_2_0', 'b_C10_2_C14_2_0', 'g_C10_2_C14_2_1', 'b_C10_2_C14_2_1', 'g_C10_2_C14_2_2', 'b_C10_2_C14_2_2', 'g_C10_2_C14_2_3', 'b_C10_2_C14_2_3', 'g_C10_3_C14_3_0', 'b_C10_3_C14_3_0', 'g_C10_3_C14_3_1', 'b_C10_3_C14_3_1', 'g_C10_3_C14_3_2', 'b_C10_3_C14_3_2', 'g_C10_3_C14_3_3', 'b_C10_3_C14_3_3', 'g_C05_0_C15_0_0', 'b_C05_0_C15_0_0', 'g_C05_0_C15_0_1', 'b_C05_0_C15_0_1', 'g_C05_0_C15_0_2', 'b_C05_0_C15_0_2', 'g_C05_0_C15_0_3', 'b_C05_0_C15_0_3', 'g_C05_1_C15_1_0', 'b_C05_1_C15_1_0', 'g_C05_1_C15_1_1', 'b_C05_1_C15_1_1', 'g_C05_1_C15_1_2', 'b_C05_1_C15_1_2', 'g_C05_1_C15_1_3', 'b_C05_1_C15_1_3', 'g_C05_2_C15_2_0', 'b_C05_2_C15_2_0', 'g_C05_2_C15_2_1', 'b_C05_2_C15_2_1', 'g_C05_2_C15_2_2', 'b_C05_2_C15_2_2', 'g_C05_2_C15_2_3', 'b_C05_2_C15_2_3', 'g_C05_3_C15_3_0', 'b_C05_3_C15_3_0', 'g_C05_3_C15_3_1', 'b_C05_3_C15_3_1', 'g_C05_3_C15_3_2', 'b_C05_3_C15_3_2', 'g_C05_3_C15_3_3', 'b_C05_3_C15_3_3', 'g_C05_0_C16_0_0', 'b_C05_0_C16_0_0', 'g_C05_0_C16_0_1', 'b_C05_0_C16_0_1', 'g_C05_0_C16_0_2', 'b_C05_0_C16_0_2', 'g_C05_0_C16_0_3', 'b_C05_0_C16_0_3', 'g_C05_1_C16_1_0', 'b_C05_1_C16_1_0', 'g_C05_1_C16_1_1', 'b_C05_1_C16_1_1', 'g_C05_1_C16_1_2', 'b_C05_1_C16_1_2', 'g_C05_1_C16_1_3', 'b_C05_1_C16_1_3', 'g_C05_2_C16_2_0', 'b_C05_2_C16_2_0', 'g_C05_2_C16_2_1', 'b_C05_2_C16_2_1', 'g_C05_2_C16_2_2', 'b_C05_2_C16_2_2', 'g_C05_2_C16_2_3', 'b_C05_2_C16_2_3', 'g_C05_3_C16_3_0', 'b_C05_3_C16_3_0', 'g_C05_3_C16_3_1', 'b_C05_3_C16_3_1', 'g_C05_3_C16_3_2', 'b_C05_3_C16_3_2', 'g_C05_3_C16_3_3', 'b_C05_3_C16_3_3', 'g_C05_0_C18_0_0', 'b_C05_0_C18_0_0', 'g_C05_0_C18_0_1', 'b_C05_0_C18_0_1', 'g_C05_0_C18_0_2', 'b_C05_0_C18_0_2', 'g_C05_0_C18_0_3', 'b_C05_0_C18_0_3', 'g_C05_1_C18_1_0', 'b_C05_1_C18_1_0', 'g_C05_1_C18_1_1', 'b_C05_1_C18_1_1', 'g_C05_1_C18_1_2', 'b_C05_1_C18_1_2', 'g_C05_1_C18_1_3', 'b_C05_1_C18_1_3', 'g_C05_2_C18_2_0', 'b_C05_2_C18_2_0', 'g_C05_2_C18_2_1', 'b_C05_2_C18_2_1', 'g_C05_2_C18_2_2', 'b_C05_2_C18_2_2', 'g_C05_2_C18_2_3', 'b_C05_2_C18_2_3', 'g_C05_3_C18_3_0', 'b_C05_3_C18_3_0', 'g_C05_3_C18_3_1', 'b_C05_3_C18_3_1', 'g_C05_3_C18_3_2', 'b_C05_3_C18_3_2', 'g_C05_3_C18_3_3', 'b_C05_3_C18_3_3', 'g_C06_0_C17_0_0', 'b_C06_0_C17_0_0', 'g_C06_0_C17_0_1', 'b_C06_0_C17_0_1', 'g_C06_0_C17_0_2', 'b_C06_0_C17_0_2', 'g_C06_0_C17_0_3', 'b_C06_0_C17_0_3', 'g_C06_1_C17_1_0', 'b_C06_1_C17_1_0', 'g_C06_1_C17_1_1', 'b_C06_1_C17_1_1', 'g_C06_1_C17_1_2', 'b_C06_1_C17_1_2', 'g_C06_1_C17_1_3', 'b_C06_1_C17_1_3', 'g_C06_2_C17_2_0', 'b_C06_2_C17_2_0', 'g_C06_2_C17_2_1', 'b_C06_2_C17_2_1', 'g_C06_2_C17_2_2', 'b_C06_2_C17_2_2', 'g_C06_2_C17_2_3', 'b_C06_2_C17_2_3', 'g_C06_3_C17_3_0', 'b_C06_3_C17_3_0', 'g_C06_3_C17_3_1', 'b_C06_3_C17_3_1', 'g_C06_3_C17_3_2', 'b_C06_3_C17_3_2', 'g_C06_3_C17_3_3', 'b_C06_3_C17_3_3', 'g_C08_0_C19_0_0', 'b_C08_0_C19_0_0', 'g_C08_0_C19_0_1', 'b_C08_0_C19_0_1', 'g_C08_0_C19_0_2', 'b_C08_0_C19_0_2', 'g_C08_0_C19_0_3', 'b_C08_0_C19_0_3', 'g_C08_1_C19_1_0', 'b_C08_1_C19_1_0', 'g_C08_1_C19_1_1', 'b_C08_1_C19_1_1', 'g_C08_1_C19_1_2', 'b_C08_1_C19_1_2', 'g_C08_1_C19_1_3', 'b_C08_1_C19_1_3', 'g_C08_2_C19_2_0', 'b_C08_2_C19_2_0', 'g_C08_2_C19_2_1', 'b_C08_2_C19_2_1', 'g_C08_2_C19_2_2', 'b_C08_2_C19_2_2', 'g_C08_2_C19_2_3', 'b_C08_2_C19_2_3', 'g_C08_3_C19_3_0', 'b_C08_3_C19_3_0', 'g_C08_3_C19_3_1', 'b_C08_3_C19_3_1', 'g_C08_3_C19_3_2', 'b_C08_3_C19_3_2', 'g_C08_3_C19_3_3', 'b_C08_3_C19_3_3', 'g_C09_0_C20_0_0', 'b_C09_0_C20_0_0', 'g_C09_0_C20_0_1', 'b_C09_0_C20_0_1', 'g_C09_0_C20_0_2', 'b_C09_0_C20_0_2', 'g_C09_0_C20_0_3', 'b_C09_0_C20_0_3', 'g_C09_1_C20_1_0', 'b_C09_1_C20_1_0', 'g_C09_1_C20_1_1', 'b_C09_1_C20_1_1', 'g_C09_1_C20_1_2', 'b_C09_1_C20_1_2', 'g_C09_1_C20_1_3', 'b_C09_1_C20_1_3', 'g_C09_2_C20_2_0', 'b_C09_2_C20_2_0', 'g_C09_2_C20_2_1', 'b_C09_2_C20_2_1', 'g_C09_2_C20_2_2', 'b_C09_2_C20_2_2', 'g_C09_2_C20_2_3', 'b_C09_2_C20_2_3', 'g_C09_3_C20_3_0', 'b_C09_3_C20_3_0', 'g_C09_3_C20_3_1', 'b_C09_3_C20_3_1', 'g_C09_3_C20_3_2', 'b_C09_3_C20_3_2', 'g_C09_3_C20_3_3', 'b_C09_3_C20_3_3', 'g_shunt_R01_3', 'b_shunt_R01_3', 'g_shunt_R02_3', 'b_shunt_R02_3', 'g_shunt_R04_3', 'b_shunt_R04_3', 'g_shunt_R06_3', 'b_shunt_R06_3', 'g_shunt_R08_3', 'b_shunt_R08_3', 'g_shunt_R10_3', 'b_shunt_R10_3', 'g_shunt_R13_3', 'b_shunt_R13_3', 'g_shunt_R11_3', 'b_shunt_R11_3', 'g_shunt_R15_3', 'b_shunt_R15_3', 'g_shunt_R16_3', 'b_shunt_R16_3', 'g_shunt_R17_3', 'b_shunt_R17_3', 'g_shunt_R18_3', 'b_shunt_R18_3', 'g_shunt_I01_3', 'b_shunt_I01_3', 'g_shunt_I02_3', 'b_shunt_I02_3', 'g_shunt_C01_3', 'b_shunt_C01_3', 'g_shunt_C03_3', 'b_shunt_C03_3', 'g_shunt_C05_3', 'b_shunt_C05_3', 'g_shunt_C07_3', 'b_shunt_C07_3', 'g_shunt_C09_3', 'b_shunt_C09_3', 'g_shunt_C11_3', 'b_shunt_C11_3', 'g_shunt_C12_3', 'b_shunt_C12_3', 'g_shunt_C13_3', 'b_shunt_C13_3', 'g_shunt_C14_3', 'b_shunt_C14_3', 'g_shunt_C16_3', 'b_shunt_C16_3', 'g_shunt_C17_3', 'b_shunt_C17_3', 'g_shunt_C18_3', 'b_shunt_C18_3', 'g_shunt_C19_3', 'b_shunt_C19_3', 'g_shunt_C20_3', 'b_shunt_C20_3', 'X_MV0_s', 'R_MV0_s', 'X_MV0_sn', 'R_MV0_sn', 'X_MV0_ng', 'R_MV0_ng', 'K_p_agc', 'K_i_agc', 'K_xif'] 
        self.params_values_list  = [105.5717693131801, -54.0657727682604, -39.63922290582014, 10.271373625351348, -24.95759979486919, 23.284964480954027, -39.63922290582015, 10.271373625351352, -39.63922290582017, 10.271373625351346, 105.57176931318008, -54.0657727682604, -39.63922290582016, 10.27137362535135, -24.957599794869182, 23.28496448095403, -24.957599794869186, 23.284964480954038, -39.63922290582016, 10.271373625351346, 105.5717693131801, -54.06577276826041, -39.639222905820155, 10.271373625351346, -39.63922290582015, 10.271373625351345, -24.95759979486918, 23.284964480954027, -39.639222905820155, 10.271373625351346, 105.57176931318008, -54.0657727682604, 105.5717693131801, -54.0657727682604, -39.63922290582014, 10.271373625351348, -24.95759979486919, 23.284964480954027, -39.63922290582015, 10.271373625351352, -39.63922290582017, 10.271373625351346, 105.57176931318008, -54.0657727682604, -39.63922290582016, 10.27137362535135, -24.957599794869182, 23.28496448095403, -24.957599794869186, 23.284964480954038, -39.63922290582016, 10.271373625351346, 105.5717693131801, -54.06577276826041, -39.639222905820155, 10.271373625351346, -39.63922290582015, 10.271373625351345, -24.95759979486918, 23.284964480954027, -39.639222905820155, 10.271373625351346, 105.57176931318008, -54.0657727682604, 105.5717693131801, -54.0657727682604, -39.63922290582014, 10.271373625351348, -24.95759979486919, 23.284964480954027, -39.63922290582015, 10.271373625351352, -39.63922290582017, 10.271373625351346, 105.57176931318008, -54.0657727682604, -39.63922290582016, 10.27137362535135, -24.957599794869182, 23.28496448095403, -24.957599794869186, 23.284964480954038, -39.63922290582016, 10.271373625351346, 105.5717693131801, -54.06577276826041, -39.639222905820155, 10.271373625351346, -39.63922290582015, 10.271373625351345, -24.95759979486918, 23.284964480954027, -39.639222905820155, 10.271373625351346, 105.57176931318008, -54.0657727682604, 105.5717693131801, -54.0657727682604, -39.63922290582014, 10.271373625351348, -24.95759979486919, 23.284964480954027, -39.63922290582015, 10.271373625351352, -39.63922290582017, 10.271373625351346, 105.57176931318008, -54.0657727682604, -39.63922290582016, 10.27137362535135, -24.957599794869182, 23.28496448095403, -24.957599794869186, 23.284964480954038, -39.63922290582016, 10.271373625351346, 105.5717693131801, -54.06577276826041, -39.639222905820155, 10.271373625351346, -39.63922290582015, 10.271373625351345, -24.95759979486918, 23.284964480954027, -39.639222905820155, 10.271373625351346, 105.57176931318008, -54.0657727682604, 105.5717693131801, -54.0657727682604, -39.63922290582014, 10.271373625351348, -24.95759979486919, 23.284964480954027, -39.63922290582015, 10.271373625351352, -39.63922290582017, 10.271373625351346, 105.57176931318008, -54.0657727682604, -39.63922290582016, 10.27137362535135, -24.957599794869182, 23.28496448095403, -24.957599794869186, 23.284964480954038, -39.63922290582016, 10.271373625351346, 105.5717693131801, -54.06577276826041, -39.639222905820155, 10.271373625351346, -39.63922290582015, 10.271373625351345, -24.95759979486918, 23.284964480954027, -39.639222905820155, 10.271373625351346, 105.57176931318008, -54.0657727682604, 105.5717693131801, -54.0657727682604, -39.63922290582014, 10.271373625351348, -24.95759979486919, 23.284964480954027, -39.63922290582015, 10.271373625351352, -39.63922290582017, 10.271373625351346, 105.57176931318008, -54.0657727682604, -39.63922290582016, 10.27137362535135, -24.957599794869182, 23.28496448095403, -24.957599794869186, 23.284964480954038, -39.63922290582016, 10.271373625351346, 105.5717693131801, -54.06577276826041, -39.639222905820155, 10.271373625351346, -39.63922290582015, 10.271373625351345, -24.95759979486918, 23.284964480954027, -39.639222905820155, 10.271373625351346, 105.57176931318008, -54.0657727682604, 105.5717693131801, -54.0657727682604, -39.63922290582014, 10.271373625351348, -24.95759979486919, 23.284964480954027, -39.63922290582015, 10.271373625351352, -39.63922290582017, 10.271373625351346, 105.57176931318008, -54.0657727682604, -39.63922290582016, 10.27137362535135, -24.957599794869182, 23.28496448095403, -24.957599794869186, 23.284964480954038, -39.63922290582016, 10.271373625351346, 105.5717693131801, -54.06577276826041, -39.639222905820155, 10.271373625351346, -39.63922290582015, 10.271373625351345, -24.95759979486918, 23.284964480954027, -39.639222905820155, 10.271373625351346, 105.57176931318008, -54.0657727682604, 105.5717693131801, -54.0657727682604, -39.63922290582014, 10.271373625351348, -24.95759979486919, 23.284964480954027, -39.63922290582015, 10.271373625351352, -39.63922290582017, 10.271373625351346, 105.57176931318008, -54.0657727682604, -39.63922290582016, 10.27137362535135, -24.957599794869182, 23.28496448095403, -24.957599794869186, 23.284964480954038, -39.63922290582016, 10.271373625351346, 105.5717693131801, -54.06577276826041, -39.639222905820155, 10.271373625351346, -39.63922290582015, 10.271373625351345, -24.95759979486918, 23.284964480954027, -39.639222905820155, 10.271373625351346, 105.57176931318008, -54.0657727682604, 105.5717693131801, -54.0657727682604, -39.63922290582014, 10.271373625351348, -24.95759979486919, 23.284964480954027, -39.63922290582015, 10.271373625351352, -39.63922290582017, 10.271373625351346, 105.57176931318008, -54.0657727682604, -39.63922290582016, 10.27137362535135, -24.957599794869182, 23.28496448095403, -24.957599794869186, 23.284964480954038, -39.63922290582016, 10.271373625351346, 105.5717693131801, -54.06577276826041, -39.639222905820155, 10.271373625351346, -39.63922290582015, 10.271373625351345, -24.95759979486918, 23.284964480954027, -39.639222905820155, 10.271373625351346, 105.57176931318008, -54.0657727682604, 26.530069300480555, -4.8467691558580075, -7.894613375147704, -1.58482814504483, -7.7214434746670095, -0.67991845328531, -7.894613375147707, -1.5848281450448325, -7.8946133751477054, -1.5848281450448318, 26.530069300480555, -4.84676915585801, -7.8946133751477054, -1.5848281450448327, -7.721443474667011, -0.6799184532853084, -7.721443474667007, -0.6799184532853103, -7.894613375147704, -1.5848281450448325, 26.53006930048056, -4.846769155858008, -7.894613375147707, -1.584828145044833, -7.894613375147707, -1.5848281450448325, -7.721443474667011, -0.6799184532853083, -7.894613375147706, -1.584828145044832, 26.530069300480562, -4.846769155858011, 26.530069300480555, -4.8467691558580075, -7.894613375147704, -1.58482814504483, -7.7214434746670095, -0.67991845328531, -7.894613375147707, -1.5848281450448325, -7.8946133751477054, -1.5848281450448318, 26.530069300480555, -4.84676915585801, -7.8946133751477054, -1.5848281450448327, -7.721443474667011, -0.6799184532853084, -7.721443474667007, -0.6799184532853103, -7.894613375147704, -1.5848281450448325, 26.53006930048056, -4.846769155858008, -7.894613375147707, -1.584828145044833, -7.894613375147707, -1.5848281450448325, -7.721443474667011, -0.6799184532853083, -7.894613375147706, -1.584828145044832, 26.530069300480562, -4.846769155858011, 26.530069300480555, -4.8467691558580075, -7.894613375147704, -1.58482814504483, -7.7214434746670095, -0.67991845328531, -7.894613375147707, -1.5848281450448325, -7.8946133751477054, -1.5848281450448318, 26.530069300480555, -4.84676915585801, -7.8946133751477054, -1.5848281450448327, -7.721443474667011, -0.6799184532853084, -7.721443474667007, -0.6799184532853103, -7.894613375147704, -1.5848281450448325, 26.53006930048056, -4.846769155858008, -7.894613375147707, -1.584828145044833, -7.894613375147707, -1.5848281450448325, -7.721443474667011, -0.6799184532853083, -7.894613375147706, -1.584828145044832, 26.530069300480562, -4.846769155858011, 26.530069300480555, -4.8467691558580075, -7.894613375147704, -1.58482814504483, -7.7214434746670095, -0.67991845328531, -7.894613375147707, -1.5848281450448325, -7.8946133751477054, -1.5848281450448318, 26.530069300480555, -4.84676915585801, -7.8946133751477054, -1.5848281450448327, -7.721443474667011, -0.6799184532853084, -7.721443474667007, -0.6799184532853103, -7.894613375147704, -1.5848281450448325, 26.53006930048056, -4.846769155858008, -7.894613375147707, -1.584828145044833, -7.894613375147707, -1.5848281450448325, -7.721443474667011, -0.6799184532853083, -7.894613375147706, -1.584828145044832, 26.530069300480562, -4.846769155858011, 26.530069300480555, -4.8467691558580075, -7.894613375147704, -1.58482814504483, -7.7214434746670095, -0.67991845328531, -7.894613375147707, -1.5848281450448325, -7.8946133751477054, -1.5848281450448318, 26.530069300480555, -4.84676915585801, -7.8946133751477054, -1.5848281450448327, -7.721443474667011, -0.6799184532853084, -7.721443474667007, -0.6799184532853103, -7.894613375147704, -1.5848281450448325, 26.53006930048056, -4.846769155858008, -7.894613375147707, -1.584828145044833, -7.894613375147707, -1.5848281450448325, -7.721443474667011, -0.6799184532853083, -7.894613375147706, -1.584828145044832, 26.530069300480562, -4.846769155858011, 30.95174751722732, -5.6545640151676775, -9.21038227100566, -1.848966169218973, -9.00835072044485, -0.793238195499528, -9.21038227100566, -1.848966169218973, -9.210382271005658, -1.8489661692189716, 30.951747517227325, -5.654564015167675, -9.210382271005663, -1.8489661692189743, -9.008350720444847, -0.7932381954995289, -9.008350720444847, -0.7932381954995267, -9.21038227100566, -1.8489661692189738, 30.951747517227332, -5.654564015167678, -9.210382271005662, -1.8489661692189727, -9.210382271005656, -1.8489661692189714, -9.008350720444847, -0.7932381954995289, -9.21038227100566, -1.8489661692189725, 30.951747517227325, -5.654564015167676, 30.95174751722732, -5.6545640151676775, -9.21038227100566, -1.848966169218973, -9.00835072044485, -0.793238195499528, -9.21038227100566, -1.848966169218973, -9.210382271005658, -1.8489661692189716, 30.951747517227325, -5.654564015167675, -9.210382271005663, -1.8489661692189743, -9.008350720444847, -0.7932381954995289, -9.008350720444847, -0.7932381954995267, -9.21038227100566, -1.8489661692189738, 30.951747517227332, -5.654564015167678, -9.210382271005662, -1.8489661692189727, -9.210382271005656, -1.8489661692189714, -9.008350720444847, -0.7932381954995289, -9.21038227100566, -1.8489661692189725, 30.951747517227325, -5.654564015167676, 30.95174751722732, -5.6545640151676775, -9.21038227100566, -1.848966169218973, -9.00835072044485, -0.793238195499528, -9.21038227100566, -1.848966169218973, -9.210382271005658, -1.8489661692189716, 30.951747517227325, -5.654564015167675, -9.210382271005663, -1.8489661692189743, -9.008350720444847, -0.7932381954995289, -9.008350720444847, -0.7932381954995267, -9.21038227100566, -1.8489661692189738, 30.951747517227332, -5.654564015167678, -9.210382271005662, -1.8489661692189727, -9.210382271005656, -1.8489661692189714, -9.008350720444847, -0.7932381954995289, -9.21038227100566, -1.8489661692189725, 30.951747517227325, -5.654564015167676, 12.926381327591708, -4.386792964964248, -4.464047081217498, 0.47261225367882165, -3.712240366659496, 1.7035704476484559, -4.464047081217497, 0.4726122536788186, -4.464047081217496, 0.4726122536788194, 12.926381327591706, -4.386792964964249, -4.464047081217495, 0.47261225367882115, -3.712240366659494, 1.7035704476484568, -3.712240366659495, 1.703570447648458, -4.464047081217497, 0.4726122536788212, 12.926381327591706, -4.3867929649642505, -4.4640470812174975, 0.4726122536788196, -4.464047081217497, 0.47261225367881887, -3.7122403666594934, 1.7035704476484546, -4.464047081217497, 0.4726122536788213, 12.926381327591706, -4.386792964964246, 37.23630290187536, -26.570039214509222, -13.629354083163696, 2.9300729927498574, -9.891672366198328, 4.786564600240502, -8.605941618732807, 4.940113672859166, -13.629046094918603, 2.9275271716180495, 39.439724228952706, -24.84772219616114, -12.60087719330945, 3.547408130782405, -9.816168046196614, 4.837006696145691, -9.816168046196612, 4.837006696145689, -12.522792999148527, 3.611467043362994, 39.35710312140279, -24.93321328682229, -13.631287596195895, 2.943157884263923, -8.685959325925934, 4.889139651792638, -9.900452468345346, 4.763512555192935, -13.347149797775748, 3.036890804399953, 37.152018479726614, -26.64353335546198, 37.23630290187536, -26.570039214509222, -13.629354083163696, 2.9300729927498574, -9.891672366198328, 4.786564600240502, -8.605941618732807, 4.940113672859166, -13.629046094918603, 2.9275271716180495, 39.439724228952706, -24.84772219616114, -12.60087719330945, 3.547408130782405, -9.816168046196614, 4.837006696145691, -9.816168046196612, 4.837006696145689, -12.522792999148527, 3.611467043362994, 39.35710312140279, -24.93321328682229, -13.631287596195895, 2.943157884263923, -8.685959325925934, 4.889139651792638, -9.900452468345346, 4.763512555192935, -13.347149797775748, 3.036890804399953, 37.152018479726614, -26.64353335546198, 37.23630290187536, -26.570039214509222, -13.629354083163696, 2.9300729927498574, -9.891672366198328, 4.786564600240502, -8.605941618732807, 4.940113672859166, -13.629046094918603, 2.9275271716180495, 39.439724228952706, -24.84772219616114, -12.60087719330945, 3.547408130782405, -9.816168046196614, 4.837006696145691, -9.816168046196612, 4.837006696145689, -12.522792999148527, 3.611467043362994, 39.35710312140279, -24.93321328682229, -13.631287596195895, 2.943157884263923, -8.685959325925934, 4.889139651792638, -9.900452468345346, 4.763512555192935, -13.347149797775748, 3.036890804399953, 37.152018479726614, -26.64353335546198, 37.23630290187536, -26.570039214509222, -13.629354083163696, 2.9300729927498574, -9.891672366198328, 4.786564600240502, -8.605941618732807, 4.940113672859166, -13.629046094918603, 2.9275271716180495, 39.439724228952706, -24.84772219616114, -12.60087719330945, 3.547408130782405, -9.816168046196614, 4.837006696145691, -9.816168046196612, 4.837006696145689, -12.522792999148527, 3.611467043362994, 39.35710312140279, -24.93321328682229, -13.631287596195895, 2.943157884263923, -8.685959325925934, 4.889139651792638, -9.900452468345346, 4.763512555192935, -13.347149797775748, 3.036890804399953, 37.152018479726614, -26.64353335546198, 37.23630290187536, -26.570039214509222, -13.629354083163696, 2.9300729927498574, -9.891672366198328, 4.786564600240502, -8.605941618732807, 4.940113672859166, -13.629046094918603, 2.9275271716180495, 39.439724228952706, -24.84772219616114, -12.60087719330945, 3.547408130782405, -9.816168046196614, 4.837006696145691, -9.816168046196612, 4.837006696145689, -12.522792999148527, 3.611467043362994, 39.35710312140279, -24.93321328682229, -13.631287596195895, 2.943157884263923, -8.685959325925934, 4.889139651792638, -9.900452468345346, 4.763512555192935, -13.347149797775748, 3.036890804399953, 37.152018479726614, -26.64353335546198, 37.23630290187536, -26.570039214509222, -13.629354083163696, 2.9300729927498574, -9.891672366198328, 4.786564600240502, -8.605941618732807, 4.940113672859166, -13.629046094918603, 2.9275271716180495, 39.439724228952706, -24.84772219616114, -12.60087719330945, 3.547408130782405, -9.816168046196614, 4.837006696145691, -9.816168046196612, 4.837006696145689, -12.522792999148527, 3.611467043362994, 39.35710312140279, -24.93321328682229, -13.631287596195895, 2.943157884263923, -8.685959325925934, 4.889139651792638, -9.900452468345346, 4.763512555192935, -13.347149797775748, 3.036890804399953, 37.152018479726614, -26.64353335546198, 37.23630290187536, -26.570039214509222, -13.629354083163696, 2.9300729927498574, -9.891672366198328, 4.786564600240502, -8.605941618732807, 4.940113672859166, -13.629046094918603, 2.9275271716180495, 39.439724228952706, -24.84772219616114, -12.60087719330945, 3.547408130782405, -9.816168046196614, 4.837006696145691, -9.816168046196612, 4.837006696145689, -12.522792999148527, 3.611467043362994, 39.35710312140279, -24.93321328682229, -13.631287596195895, 2.943157884263923, -8.685959325925934, 4.889139651792638, -9.900452468345346, 4.763512555192935, -13.347149797775748, 3.036890804399953, 37.152018479726614, -26.64353335546198, 37.23630290187536, -26.570039214509222, -13.629354083163696, 2.9300729927498574, -9.891672366198328, 4.786564600240502, -8.605941618732807, 4.940113672859166, -13.629046094918603, 2.9275271716180495, 39.439724228952706, -24.84772219616114, -12.60087719330945, 3.547408130782405, -9.816168046196614, 4.837006696145691, -9.816168046196612, 4.837006696145689, -12.522792999148527, 3.611467043362994, 39.35710312140279, -24.93321328682229, -13.631287596195895, 2.943157884263923, -8.685959325925934, 4.889139651792638, -9.900452468345346, 4.763512555192935, -13.347149797775748, 3.036890804399953, 37.152018479726614, -26.64353335546198, 19.505477149580546, -7.235437096012289, -4.440731473651757, -1.4580817739434224, -4.067883819714603, -0.7844709248119673, -3.834768213494553, -0.5991493631358196, -4.440731473651757, -1.4580817739434226, 19.51216957570495, -6.804628664747477, -4.426366208804188, -1.249251364198228, -4.067883819714601, -0.7844709248119671, -4.067883819714602, -0.7844709248119667, -4.426366208804187, -1.2492513641982281, 19.512169575704952, -6.804628664747477, -4.440731473651757, -1.4580817739434229, -3.834768213494553, -0.5991493631358191, -4.067883819714601, -0.7844709248119672, -4.4407314736517565, -1.4580817739434233, 19.505477149580543, -7.23543709601229, 19.505477149580546, -7.235437096012289, -4.440731473651757, -1.4580817739434224, -4.067883819714603, -0.7844709248119673, -3.834768213494553, -0.5991493631358196, -4.440731473651757, -1.4580817739434226, 19.51216957570495, -6.804628664747477, -4.426366208804188, -1.249251364198228, -4.067883819714601, -0.7844709248119671, -4.067883819714602, -0.7844709248119667, -4.426366208804187, -1.2492513641982281, 19.512169575704952, -6.804628664747477, -4.440731473651757, -1.4580817739434229, -3.834768213494553, -0.5991493631358191, -4.067883819714601, -0.7844709248119672, -4.4407314736517565, -1.4580817739434233, 19.505477149580543, -7.23543709601229, 13.907736203456661, -4.023116491968417, -2.2433859787390373, -1.3879402428031173, -2.1268448748867232, -1.066561114705277, -2.0269957844035056, -0.9508945297601061, -2.243385978739038, -1.3879402428031176, 13.855691465834457, -3.867586441664005, -2.266048339835236, -1.3110658710545546, -2.1268448748867232, -1.0665611147052774, -2.126844874886723, -1.066561114705277, -2.266048339835236, -1.3110658710545542, 13.855691465834461, -3.8675864416640056, -2.2433859787390382, -1.3879402428031178, -2.026995784403505, -0.9508945297601062, -2.1268448748867237, -1.0665611147052776, -2.2433859787390382, -1.3879402428031178, 13.907736203456665, -4.02311649196842, 13.907736203456661, -4.023116491968417, -2.2433859787390373, -1.3879402428031173, -2.1268448748867232, -1.066561114705277, -2.0269957844035056, -0.9508945297601061, -2.243385978739038, -1.3879402428031176, 13.855691465834457, -3.867586441664005, -2.266048339835236, -1.3110658710545546, -2.1268448748867232, -1.0665611147052774, -2.126844874886723, -1.066561114705277, -2.266048339835236, -1.3110658710545542, 13.855691465834461, -3.8675864416640056, -2.2433859787390382, -1.3879402428031178, -2.026995784403505, -0.9508945297601062, -2.1268448748867237, -1.0665611147052776, -2.2433859787390382, -1.3879402428031178, 13.907736203456665, -4.02311649196842, 13.907736203456661, -4.023116491968417, -2.2433859787390373, -1.3879402428031173, -2.1268448748867232, -1.066561114705277, -2.0269957844035056, -0.9508945297601061, -2.243385978739038, -1.3879402428031176, 13.855691465834457, -3.867586441664005, -2.266048339835236, -1.3110658710545546, -2.1268448748867232, -1.0665611147052774, -2.126844874886723, -1.066561114705277, -2.266048339835236, -1.3110658710545542, 13.855691465834461, -3.8675864416640056, -2.2433859787390382, -1.3879402428031178, -2.026995784403505, -0.9508945297601062, -2.1268448748867237, -1.0665611147052776, -2.2433859787390382, -1.3879402428031178, 13.907736203456665, -4.02311649196842, 13.907736203456661, -4.023116491968417, -2.2433859787390373, -1.3879402428031173, -2.1268448748867232, -1.066561114705277, -2.0269957844035056, -0.9508945297601061, -2.243385978739038, -1.3879402428031176, 13.855691465834457, -3.867586441664005, -2.266048339835236, -1.3110658710545546, -2.1268448748867232, -1.0665611147052774, -2.126844874886723, -1.066561114705277, -2.266048339835236, -1.3110658710545542, 13.855691465834461, -3.8675864416640056, -2.2433859787390382, -1.3879402428031178, -2.026995784403505, -0.9508945297601062, -2.1268448748867237, -1.0665611147052776, -2.2433859787390382, -1.3879402428031178, 13.907736203456665, -4.02311649196842, 19.505477149580546, -7.235437096012289, -4.440731473651757, -1.4580817739434224, -4.067883819714603, -0.7844709248119673, -3.834768213494553, -0.5991493631358196, -4.440731473651757, -1.4580817739434226, 19.51216957570495, -6.804628664747477, -4.426366208804188, -1.249251364198228, -4.067883819714601, -0.7844709248119671, -4.067883819714602, -0.7844709248119667, -4.426366208804187, -1.2492513641982281, 19.512169575704952, -6.804628664747477, -4.440731473651757, -1.4580817739434229, -3.834768213494553, -0.5991493631358191, -4.067883819714601, -0.7844709248119672, -4.4407314736517565, -1.4580817739434233, 19.505477149580543, -7.23543709601229, 19.505477149580546, -7.235437096012289, -4.440731473651757, -1.4580817739434224, -4.067883819714603, -0.7844709248119673, -3.834768213494553, -0.5991493631358196, -4.440731473651757, -1.4580817739434226, 19.51216957570495, -6.804628664747477, -4.426366208804188, -1.249251364198228, -4.067883819714601, -0.7844709248119671, -4.067883819714602, -0.7844709248119667, -4.426366208804187, -1.2492513641982281, 19.512169575704952, -6.804628664747477, -4.440731473651757, -1.4580817739434229, -3.834768213494553, -0.5991493631358191, -4.067883819714601, -0.7844709248119672, -4.4407314736517565, -1.4580817739434233, 19.505477149580543, -7.23543709601229, 13.907736203456661, -4.023116491968417, -2.2433859787390373, -1.3879402428031173, -2.1268448748867232, -1.066561114705277, -2.0269957844035056, -0.9508945297601061, -2.243385978739038, -1.3879402428031176, 13.855691465834457, -3.867586441664005, -2.266048339835236, -1.3110658710545546, -2.1268448748867232, -1.0665611147052774, -2.126844874886723, -1.066561114705277, -2.266048339835236, -1.3110658710545542, 13.855691465834461, -3.8675864416640056, -2.2433859787390382, -1.3879402428031178, -2.026995784403505, -0.9508945297601062, -2.1268448748867237, -1.0665611147052776, -2.2433859787390382, -1.3879402428031178, 13.907736203456665, -4.02311649196842, 13.907736203456661, -4.023116491968417, -2.2433859787390373, -1.3879402428031173, -2.1268448748867232, -1.066561114705277, -2.0269957844035056, -0.9508945297601061, -2.243385978739038, -1.3879402428031176, 13.855691465834457, -3.867586441664005, -2.266048339835236, -1.3110658710545546, -2.1268448748867232, -1.0665611147052774, -2.126844874886723, -1.066561114705277, -2.266048339835236, -1.3110658710545542, 13.855691465834461, -3.8675864416640056, -2.2433859787390382, -1.3879402428031178, -2.026995784403505, -0.9508945297601062, -2.1268448748867237, -1.0665611147052776, -2.2433859787390382, -1.3879402428031178, 13.907736203456665, -4.02311649196842, 13.907736203456661, -4.023116491968417, -2.2433859787390373, -1.3879402428031173, -2.1268448748867232, -1.066561114705277, -2.0269957844035056, -0.9508945297601061, -2.243385978739038, -1.3879402428031176, 13.855691465834457, -3.867586441664005, -2.266048339835236, -1.3110658710545546, -2.1268448748867232, -1.0665611147052774, -2.126844874886723, -1.066561114705277, -2.266048339835236, -1.3110658710545542, 13.855691465834461, -3.8675864416640056, -2.2433859787390382, -1.3879402428031178, -2.026995784403505, -0.9508945297601062, -2.1268448748867237, -1.0665611147052776, -2.2433859787390382, -1.3879402428031178, 13.907736203456665, -4.02311649196842, 0.3333333333333333, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.3333333333333333, 0.0, 0.025, 0.0, 0.3333333333333333, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.025, 0.0, 0.1, 0.01, 0.1, 0.01, 0, 3, 0.01, 0.01, 0.01] 
        self.inputs_ini_list = ['p_load_R01_a', 'q_load_R01_a', 'g_load_R01_a', 'b_load_R01_a', 'p_load_R01_b', 'q_load_R01_b', 'g_load_R01_b', 'b_load_R01_b', 'p_load_R01_c', 'q_load_R01_c', 'g_load_R01_c', 'b_load_R01_c', 'p_load_R11_a', 'q_load_R11_a', 'g_load_R11_a', 'b_load_R11_a', 'p_load_R11_b', 'q_load_R11_b', 'g_load_R11_b', 'b_load_R11_b', 'p_load_R11_c', 'q_load_R11_c', 'g_load_R11_c', 'b_load_R11_c', 'p_load_R15_a', 'q_load_R15_a', 'g_load_R15_a', 'b_load_R15_a', 'p_load_R15_b', 'q_load_R15_b', 'g_load_R15_b', 'b_load_R15_b', 'p_load_R15_c', 'q_load_R15_c', 'g_load_R15_c', 'b_load_R15_c', 'p_load_R16_a', 'q_load_R16_a', 'g_load_R16_a', 'b_load_R16_a', 'p_load_R16_b', 'q_load_R16_b', 'g_load_R16_b', 'b_load_R16_b', 'p_load_R16_c', 'q_load_R16_c', 'g_load_R16_c', 'b_load_R16_c', 'p_load_R17_a', 'q_load_R17_a', 'g_load_R17_a', 'b_load_R17_a', 'p_load_R17_b', 'q_load_R17_b', 'g_load_R17_b', 'b_load_R17_b', 'p_load_R17_c', 'q_load_R17_c', 'g_load_R17_c', 'b_load_R17_c', 'p_load_R18_a', 'q_load_R18_a', 'g_load_R18_a', 'b_load_R18_a', 'p_load_R18_b', 'q_load_R18_b', 'g_load_R18_b', 'b_load_R18_b', 'p_load_R18_c', 'q_load_R18_c', 'g_load_R18_c', 'b_load_R18_c', 'p_load_I02_a', 'q_load_I02_a', 'g_load_I02_a', 'b_load_I02_a', 'p_load_I02_b', 'q_load_I02_b', 'g_load_I02_b', 'b_load_I02_b', 'p_load_I02_c', 'q_load_I02_c', 'g_load_I02_c', 'b_load_I02_c', 'p_load_C01_a', 'q_load_C01_a', 'g_load_C01_a', 'b_load_C01_a', 'p_load_C01_b', 'q_load_C01_b', 'g_load_C01_b', 'b_load_C01_b', 'p_load_C01_c', 'q_load_C01_c', 'g_load_C01_c', 'b_load_C01_c', 'p_load_C12_a', 'q_load_C12_a', 'g_load_C12_a', 'b_load_C12_a', 'p_load_C12_b', 'q_load_C12_b', 'g_load_C12_b', 'b_load_C12_b', 'p_load_C12_c', 'q_load_C12_c', 'g_load_C12_c', 'b_load_C12_c', 'p_load_C13_a', 'q_load_C13_a', 'g_load_C13_a', 'b_load_C13_a', 'p_load_C13_b', 'q_load_C13_b', 'g_load_C13_b', 'b_load_C13_b', 'p_load_C13_c', 'q_load_C13_c', 'g_load_C13_c', 'b_load_C13_c', 'p_load_C14_a', 'q_load_C14_a', 'g_load_C14_a', 'b_load_C14_a', 'p_load_C14_b', 'q_load_C14_b', 'g_load_C14_b', 'b_load_C14_b', 'p_load_C14_c', 'q_load_C14_c', 'g_load_C14_c', 'b_load_C14_c', 'p_load_C17_a', 'q_load_C17_a', 'g_load_C17_a', 'b_load_C17_a', 'p_load_C17_b', 'q_load_C17_b', 'g_load_C17_b', 'b_load_C17_b', 'p_load_C17_c', 'q_load_C17_c', 'g_load_C17_c', 'b_load_C17_c', 'p_load_C18_a', 'q_load_C18_a', 'g_load_C18_a', 'b_load_C18_a', 'p_load_C18_b', 'q_load_C18_b', 'g_load_C18_b', 'b_load_C18_b', 'p_load_C18_c', 'q_load_C18_c', 'g_load_C18_c', 'b_load_C18_c', 'p_load_C19_a', 'q_load_C19_a', 'g_load_C19_a', 'b_load_C19_a', 'p_load_C19_b', 'q_load_C19_b', 'g_load_C19_b', 'b_load_C19_b', 'p_load_C19_c', 'q_load_C19_c', 'g_load_C19_c', 'b_load_C19_c', 'p_load_C20_a', 'q_load_C20_a', 'g_load_C20_a', 'b_load_C20_a', 'p_load_C20_b', 'q_load_C20_b', 'g_load_C20_b', 'b_load_C20_b', 'p_load_C20_c', 'q_load_C20_c', 'g_load_C20_c', 'b_load_C20_c', 'e_ao_m_MV0', 'e_bo_m_MV0', 'e_co_m_MV0', 'phi_MV0', 'u_freq'] 
        self.inputs_ini_values_list  = [1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 11547.005383792515, 11547.005383792515, 11547.005383792515, 0.0, 0.0] 
        self.inputs_run_list = ['p_load_R01_a', 'q_load_R01_a', 'g_load_R01_a', 'b_load_R01_a', 'p_load_R01_b', 'q_load_R01_b', 'g_load_R01_b', 'b_load_R01_b', 'p_load_R01_c', 'q_load_R01_c', 'g_load_R01_c', 'b_load_R01_c', 'p_load_R11_a', 'q_load_R11_a', 'g_load_R11_a', 'b_load_R11_a', 'p_load_R11_b', 'q_load_R11_b', 'g_load_R11_b', 'b_load_R11_b', 'p_load_R11_c', 'q_load_R11_c', 'g_load_R11_c', 'b_load_R11_c', 'p_load_R15_a', 'q_load_R15_a', 'g_load_R15_a', 'b_load_R15_a', 'p_load_R15_b', 'q_load_R15_b', 'g_load_R15_b', 'b_load_R15_b', 'p_load_R15_c', 'q_load_R15_c', 'g_load_R15_c', 'b_load_R15_c', 'p_load_R16_a', 'q_load_R16_a', 'g_load_R16_a', 'b_load_R16_a', 'p_load_R16_b', 'q_load_R16_b', 'g_load_R16_b', 'b_load_R16_b', 'p_load_R16_c', 'q_load_R16_c', 'g_load_R16_c', 'b_load_R16_c', 'p_load_R17_a', 'q_load_R17_a', 'g_load_R17_a', 'b_load_R17_a', 'p_load_R17_b', 'q_load_R17_b', 'g_load_R17_b', 'b_load_R17_b', 'p_load_R17_c', 'q_load_R17_c', 'g_load_R17_c', 'b_load_R17_c', 'p_load_R18_a', 'q_load_R18_a', 'g_load_R18_a', 'b_load_R18_a', 'p_load_R18_b', 'q_load_R18_b', 'g_load_R18_b', 'b_load_R18_b', 'p_load_R18_c', 'q_load_R18_c', 'g_load_R18_c', 'b_load_R18_c', 'p_load_I02_a', 'q_load_I02_a', 'g_load_I02_a', 'b_load_I02_a', 'p_load_I02_b', 'q_load_I02_b', 'g_load_I02_b', 'b_load_I02_b', 'p_load_I02_c', 'q_load_I02_c', 'g_load_I02_c', 'b_load_I02_c', 'p_load_C01_a', 'q_load_C01_a', 'g_load_C01_a', 'b_load_C01_a', 'p_load_C01_b', 'q_load_C01_b', 'g_load_C01_b', 'b_load_C01_b', 'p_load_C01_c', 'q_load_C01_c', 'g_load_C01_c', 'b_load_C01_c', 'p_load_C12_a', 'q_load_C12_a', 'g_load_C12_a', 'b_load_C12_a', 'p_load_C12_b', 'q_load_C12_b', 'g_load_C12_b', 'b_load_C12_b', 'p_load_C12_c', 'q_load_C12_c', 'g_load_C12_c', 'b_load_C12_c', 'p_load_C13_a', 'q_load_C13_a', 'g_load_C13_a', 'b_load_C13_a', 'p_load_C13_b', 'q_load_C13_b', 'g_load_C13_b', 'b_load_C13_b', 'p_load_C13_c', 'q_load_C13_c', 'g_load_C13_c', 'b_load_C13_c', 'p_load_C14_a', 'q_load_C14_a', 'g_load_C14_a', 'b_load_C14_a', 'p_load_C14_b', 'q_load_C14_b', 'g_load_C14_b', 'b_load_C14_b', 'p_load_C14_c', 'q_load_C14_c', 'g_load_C14_c', 'b_load_C14_c', 'p_load_C17_a', 'q_load_C17_a', 'g_load_C17_a', 'b_load_C17_a', 'p_load_C17_b', 'q_load_C17_b', 'g_load_C17_b', 'b_load_C17_b', 'p_load_C17_c', 'q_load_C17_c', 'g_load_C17_c', 'b_load_C17_c', 'p_load_C18_a', 'q_load_C18_a', 'g_load_C18_a', 'b_load_C18_a', 'p_load_C18_b', 'q_load_C18_b', 'g_load_C18_b', 'b_load_C18_b', 'p_load_C18_c', 'q_load_C18_c', 'g_load_C18_c', 'b_load_C18_c', 'p_load_C19_a', 'q_load_C19_a', 'g_load_C19_a', 'b_load_C19_a', 'p_load_C19_b', 'q_load_C19_b', 'g_load_C19_b', 'b_load_C19_b', 'p_load_C19_c', 'q_load_C19_c', 'g_load_C19_c', 'b_load_C19_c', 'p_load_C20_a', 'q_load_C20_a', 'g_load_C20_a', 'b_load_C20_a', 'p_load_C20_b', 'q_load_C20_b', 'g_load_C20_b', 'b_load_C20_b', 'p_load_C20_c', 'q_load_C20_c', 'g_load_C20_c', 'b_load_C20_c', 'e_ao_m_MV0', 'e_bo_m_MV0', 'e_co_m_MV0', 'phi_MV0', 'u_freq'] 
        self.inputs_run_values_list = [1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 1000.0, 0, 0, 0, 11547.005383792515, 11547.005383792515, 11547.005383792515, 0.0, 0.0] 
        self.outputs_list = ['i_l_R01_0_R02_0_r', 'i_l_R01_0_R02_0_i', 'i_l_R01_1_R02_1_r', 'i_l_R01_1_R02_1_i', 'i_l_R01_2_R02_2_r', 'i_l_R01_2_R02_2_i', 'i_l_R01_3_R02_3_r', 'i_l_R01_3_R02_3_i', 'i_l_R02_0_R03_0_r', 'i_l_R02_0_R03_0_i', 'i_l_R02_1_R03_1_r', 'i_l_R02_1_R03_1_i', 'i_l_R02_2_R03_2_r', 'i_l_R02_2_R03_2_i', 'i_l_R02_3_R03_3_r', 'i_l_R02_3_R03_3_i', 'i_l_R03_0_R04_0_r', 'i_l_R03_0_R04_0_i', 'i_l_R03_1_R04_1_r', 'i_l_R03_1_R04_1_i', 'i_l_R03_2_R04_2_r', 'i_l_R03_2_R04_2_i', 'i_l_R03_3_R04_3_r', 'i_l_R03_3_R04_3_i', 'i_l_R04_0_R05_0_r', 'i_l_R04_0_R05_0_i', 'i_l_R04_1_R05_1_r', 'i_l_R04_1_R05_1_i', 'i_l_R04_2_R05_2_r', 'i_l_R04_2_R05_2_i', 'i_l_R04_3_R05_3_r', 'i_l_R04_3_R05_3_i', 'i_l_R05_0_R06_0_r', 'i_l_R05_0_R06_0_i', 'i_l_R05_1_R06_1_r', 'i_l_R05_1_R06_1_i', 'i_l_R05_2_R06_2_r', 'i_l_R05_2_R06_2_i', 'i_l_R05_3_R06_3_r', 'i_l_R05_3_R06_3_i', 'i_l_R06_0_R07_0_r', 'i_l_R06_0_R07_0_i', 'i_l_R06_1_R07_1_r', 'i_l_R06_1_R07_1_i', 'i_l_R06_2_R07_2_r', 'i_l_R06_2_R07_2_i', 'i_l_R06_3_R07_3_r', 'i_l_R06_3_R07_3_i', 'i_l_R07_0_R08_0_r', 'i_l_R07_0_R08_0_i', 'i_l_R07_1_R08_1_r', 'i_l_R07_1_R08_1_i', 'i_l_R07_2_R08_2_r', 'i_l_R07_2_R08_2_i', 'i_l_R07_3_R08_3_r', 'i_l_R07_3_R08_3_i', 'i_l_R08_0_R09_0_r', 'i_l_R08_0_R09_0_i', 'i_l_R08_1_R09_1_r', 'i_l_R08_1_R09_1_i', 'i_l_R08_2_R09_2_r', 'i_l_R08_2_R09_2_i', 'i_l_R08_3_R09_3_r', 'i_l_R08_3_R09_3_i', 'i_l_R09_0_R10_0_r', 'i_l_R09_0_R10_0_i', 'i_l_R09_1_R10_1_r', 'i_l_R09_1_R10_1_i', 'i_l_R09_2_R10_2_r', 'i_l_R09_2_R10_2_i', 'i_l_R09_3_R10_3_r', 'i_l_R09_3_R10_3_i', 'i_l_R03_0_R11_0_r', 'i_l_R03_0_R11_0_i', 'i_l_R03_1_R11_1_r', 'i_l_R03_1_R11_1_i', 'i_l_R03_2_R11_2_r', 'i_l_R03_2_R11_2_i', 'i_l_R03_3_R11_3_r', 'i_l_R03_3_R11_3_i', 'i_l_R04_0_R12_0_r', 'i_l_R04_0_R12_0_i', 'i_l_R04_1_R12_1_r', 'i_l_R04_1_R12_1_i', 'i_l_R04_2_R12_2_r', 'i_l_R04_2_R12_2_i', 'i_l_R04_3_R12_3_r', 'i_l_R04_3_R12_3_i', 'i_l_R12_0_R13_0_r', 'i_l_R12_0_R13_0_i', 'i_l_R12_1_R13_1_r', 'i_l_R12_1_R13_1_i', 'i_l_R12_2_R13_2_r', 'i_l_R12_2_R13_2_i', 'i_l_R12_3_R13_3_r', 'i_l_R12_3_R13_3_i', 'i_l_R13_0_R14_0_r', 'i_l_R13_0_R14_0_i', 'i_l_R13_1_R14_1_r', 'i_l_R13_1_R14_1_i', 'i_l_R13_2_R14_2_r', 'i_l_R13_2_R14_2_i', 'i_l_R13_3_R14_3_r', 'i_l_R13_3_R14_3_i', 'i_l_R14_0_R15_0_r', 'i_l_R14_0_R15_0_i', 'i_l_R14_1_R15_1_r', 'i_l_R14_1_R15_1_i', 'i_l_R14_2_R15_2_r', 'i_l_R14_2_R15_2_i', 'i_l_R14_3_R15_3_r', 'i_l_R14_3_R15_3_i', 'i_l_R06_0_R16_0_r', 'i_l_R06_0_R16_0_i', 'i_l_R06_1_R16_1_r', 'i_l_R06_1_R16_1_i', 'i_l_R06_2_R16_2_r', 'i_l_R06_2_R16_2_i', 'i_l_R06_3_R16_3_r', 'i_l_R06_3_R16_3_i', 'i_l_R09_0_R17_0_r', 'i_l_R09_0_R17_0_i', 'i_l_R09_1_R17_1_r', 'i_l_R09_1_R17_1_i', 'i_l_R09_2_R17_2_r', 'i_l_R09_2_R17_2_i', 'i_l_R09_3_R17_3_r', 'i_l_R09_3_R17_3_i', 'i_l_R10_0_R18_0_r', 'i_l_R10_0_R18_0_i', 'i_l_R10_1_R18_1_r', 'i_l_R10_1_R18_1_i', 'i_l_R10_2_R18_2_r', 'i_l_R10_2_R18_2_i', 'i_l_R10_3_R18_3_r', 'i_l_R10_3_R18_3_i', 'i_l_I01_0_I02_0_r', 'i_l_I01_0_I02_0_i', 'i_l_I01_1_I02_1_r', 'i_l_I01_1_I02_1_i', 'i_l_I01_2_I02_2_r', 'i_l_I01_2_I02_2_i', 'i_l_I01_3_I02_3_r', 'i_l_I01_3_I02_3_i', 'i_l_C01_0_C02_0_r', 'i_l_C01_0_C02_0_i', 'i_l_C01_1_C02_1_r', 'i_l_C01_1_C02_1_i', 'i_l_C01_2_C02_2_r', 'i_l_C01_2_C02_2_i', 'i_l_C01_3_C02_3_r', 'i_l_C01_3_C02_3_i', 'i_l_C02_0_C03_0_r', 'i_l_C02_0_C03_0_i', 'i_l_C02_1_C03_1_r', 'i_l_C02_1_C03_1_i', 'i_l_C02_2_C03_2_r', 'i_l_C02_2_C03_2_i', 'i_l_C02_3_C03_3_r', 'i_l_C02_3_C03_3_i', 'i_l_C03_0_C04_0_r', 'i_l_C03_0_C04_0_i', 'i_l_C03_1_C04_1_r', 'i_l_C03_1_C04_1_i', 'i_l_C03_2_C04_2_r', 'i_l_C03_2_C04_2_i', 'i_l_C03_3_C04_3_r', 'i_l_C03_3_C04_3_i', 'i_l_C04_0_C05_0_r', 'i_l_C04_0_C05_0_i', 'i_l_C04_1_C05_1_r', 'i_l_C04_1_C05_1_i', 'i_l_C04_2_C05_2_r', 'i_l_C04_2_C05_2_i', 'i_l_C04_3_C05_3_r', 'i_l_C04_3_C05_3_i', 'i_l_C05_0_C06_0_r', 'i_l_C05_0_C06_0_i', 'i_l_C05_1_C06_1_r', 'i_l_C05_1_C06_1_i', 'i_l_C05_2_C06_2_r', 'i_l_C05_2_C06_2_i', 'i_l_C05_3_C06_3_r', 'i_l_C05_3_C06_3_i', 'i_l_C06_0_C07_0_r', 'i_l_C06_0_C07_0_i', 'i_l_C06_1_C07_1_r', 'i_l_C06_1_C07_1_i', 'i_l_C06_2_C07_2_r', 'i_l_C06_2_C07_2_i', 'i_l_C06_3_C07_3_r', 'i_l_C06_3_C07_3_i', 'i_l_C07_0_C08_0_r', 'i_l_C07_0_C08_0_i', 'i_l_C07_1_C08_1_r', 'i_l_C07_1_C08_1_i', 'i_l_C07_2_C08_2_r', 'i_l_C07_2_C08_2_i', 'i_l_C07_3_C08_3_r', 'i_l_C07_3_C08_3_i', 'i_l_C08_0_C09_0_r', 'i_l_C08_0_C09_0_i', 'i_l_C08_1_C09_1_r', 'i_l_C08_1_C09_1_i', 'i_l_C08_2_C09_2_r', 'i_l_C08_2_C09_2_i', 'i_l_C08_3_C09_3_r', 'i_l_C08_3_C09_3_i', 'i_l_C03_0_C10_0_r', 'i_l_C03_0_C10_0_i', 'i_l_C03_1_C10_1_r', 'i_l_C03_1_C10_1_i', 'i_l_C03_2_C10_2_r', 'i_l_C03_2_C10_2_i', 'i_l_C03_3_C10_3_r', 'i_l_C03_3_C10_3_i', 'i_l_C10_0_C11_0_r', 'i_l_C10_0_C11_0_i', 'i_l_C10_1_C11_1_r', 'i_l_C10_1_C11_1_i', 'i_l_C10_2_C11_2_r', 'i_l_C10_2_C11_2_i', 'i_l_C10_3_C11_3_r', 'i_l_C10_3_C11_3_i', 'i_l_C01_0_C12_0_r', 'i_l_C01_0_C12_0_i', 'i_l_C01_1_C12_1_r', 'i_l_C01_1_C12_1_i', 'i_l_C01_2_C12_2_r', 'i_l_C01_2_C12_2_i', 'i_l_C01_3_C12_3_r', 'i_l_C01_3_C12_3_i', 'i_l_C01_0_C13_0_r', 'i_l_C01_0_C13_0_i', 'i_l_C01_1_C13_1_r', 'i_l_C01_1_C13_1_i', 'i_l_C01_2_C13_2_r', 'i_l_C01_2_C13_2_i', 'i_l_C01_3_C13_3_r', 'i_l_C01_3_C13_3_i', 'i_l_C10_0_C14_0_r', 'i_l_C10_0_C14_0_i', 'i_l_C10_1_C14_1_r', 'i_l_C10_1_C14_1_i', 'i_l_C10_2_C14_2_r', 'i_l_C10_2_C14_2_i', 'i_l_C10_3_C14_3_r', 'i_l_C10_3_C14_3_i', 'i_l_C05_0_C15_0_r', 'i_l_C05_0_C15_0_i', 'i_l_C05_1_C15_1_r', 'i_l_C05_1_C15_1_i', 'i_l_C05_2_C15_2_r', 'i_l_C05_2_C15_2_i', 'i_l_C05_3_C15_3_r', 'i_l_C05_3_C15_3_i', 'i_l_C05_0_C16_0_r', 'i_l_C05_0_C16_0_i', 'i_l_C05_1_C16_1_r', 'i_l_C05_1_C16_1_i', 'i_l_C05_2_C16_2_r', 'i_l_C05_2_C16_2_i', 'i_l_C05_3_C16_3_r', 'i_l_C05_3_C16_3_i', 'i_l_C05_0_C18_0_r', 'i_l_C05_0_C18_0_i', 'i_l_C05_1_C18_1_r', 'i_l_C05_1_C18_1_i', 'i_l_C05_2_C18_2_r', 'i_l_C05_2_C18_2_i', 'i_l_C05_3_C18_3_r', 'i_l_C05_3_C18_3_i', 'i_l_C06_0_C17_0_r', 'i_l_C06_0_C17_0_i', 'i_l_C06_1_C17_1_r', 'i_l_C06_1_C17_1_i', 'i_l_C06_2_C17_2_r', 'i_l_C06_2_C17_2_i', 'i_l_C06_3_C17_3_r', 'i_l_C06_3_C17_3_i', 'i_l_C08_0_C19_0_r', 'i_l_C08_0_C19_0_i', 'i_l_C08_1_C19_1_r', 'i_l_C08_1_C19_1_i', 'i_l_C08_2_C19_2_r', 'i_l_C08_2_C19_2_i', 'i_l_C08_3_C19_3_r', 'i_l_C08_3_C19_3_i', 'i_l_C09_0_C20_0_r', 'i_l_C09_0_C20_0_i', 'i_l_C09_1_C20_1_r', 'i_l_C09_1_C20_1_i', 'i_l_C09_2_C20_2_r', 'i_l_C09_2_C20_2_i', 'i_l_C09_3_C20_3_r', 'i_l_C09_3_C20_3_i', 'i_t_MV0_R01_1_0_r', 'i_t_MV0_R01_1_0_i', 'i_t_MV0_R01_1_1_r', 'i_t_MV0_R01_1_1_i', 'i_t_MV0_R01_1_2_r', 'i_t_MV0_R01_1_2_i', 'i_t_MV0_R01_2_0_r', 'i_t_MV0_R01_2_0_i', 'i_t_MV0_R01_2_1_r', 'i_t_MV0_R01_2_1_i', 'i_t_MV0_R01_2_2_r', 'i_t_MV0_R01_2_2_i', 'i_t_MV0_R01_2_3_r', 'i_t_MV0_R01_2_3_i', 'i_t_MV0_I01_1_0_r', 'i_t_MV0_I01_1_0_i', 'i_t_MV0_I01_1_1_r', 'i_t_MV0_I01_1_1_i', 'i_t_MV0_I01_1_2_r', 'i_t_MV0_I01_1_2_i', 'i_t_MV0_I01_2_0_r', 'i_t_MV0_I01_2_0_i', 'i_t_MV0_I01_2_1_r', 'i_t_MV0_I01_2_1_i', 'i_t_MV0_I01_2_2_r', 'i_t_MV0_I01_2_2_i', 'i_t_MV0_I01_2_3_r', 'i_t_MV0_I01_2_3_i', 'i_t_MV0_C01_1_0_r', 'i_t_MV0_C01_1_0_i', 'i_t_MV0_C01_1_1_r', 'i_t_MV0_C01_1_1_i', 'i_t_MV0_C01_1_2_r', 'i_t_MV0_C01_1_2_i', 'i_t_MV0_C01_2_0_r', 'i_t_MV0_C01_2_0_i', 'i_t_MV0_C01_2_1_r', 'i_t_MV0_C01_2_1_i', 'i_t_MV0_C01_2_2_r', 'i_t_MV0_C01_2_2_i', 'i_t_MV0_C01_2_3_r', 'i_t_MV0_C01_2_3_i', 'i_vsc_MV0_a_m', 'i_vsc_MV0_b_m', 'i_vsc_MV0_c_m', 'p_MV0', 'q_MV0', 'xi_freq', 'u_freq'] 
        self.x_list = ['xi_freq'] 
        self.y_run_list = ['V_MV0_0_r', 'V_MV0_0_i', 'V_MV0_1_r', 'V_MV0_1_i', 'V_MV0_2_r', 'V_MV0_2_i', 'V_R01_0_r', 'V_R01_0_i', 'V_R01_1_r', 'V_R01_1_i', 'V_R01_2_r', 'V_R01_2_i', 'V_R01_3_r', 'V_R01_3_i', 'V_R02_0_r', 'V_R02_0_i', 'V_R02_1_r', 'V_R02_1_i', 'V_R02_2_r', 'V_R02_2_i', 'V_R02_3_r', 'V_R02_3_i', 'V_R03_0_r', 'V_R03_0_i', 'V_R03_1_r', 'V_R03_1_i', 'V_R03_2_r', 'V_R03_2_i', 'V_R03_3_r', 'V_R03_3_i', 'V_R04_0_r', 'V_R04_0_i', 'V_R04_1_r', 'V_R04_1_i', 'V_R04_2_r', 'V_R04_2_i', 'V_R04_3_r', 'V_R04_3_i', 'V_R05_0_r', 'V_R05_0_i', 'V_R05_1_r', 'V_R05_1_i', 'V_R05_2_r', 'V_R05_2_i', 'V_R05_3_r', 'V_R05_3_i', 'V_R06_0_r', 'V_R06_0_i', 'V_R06_1_r', 'V_R06_1_i', 'V_R06_2_r', 'V_R06_2_i', 'V_R06_3_r', 'V_R06_3_i', 'V_R07_0_r', 'V_R07_0_i', 'V_R07_1_r', 'V_R07_1_i', 'V_R07_2_r', 'V_R07_2_i', 'V_R07_3_r', 'V_R07_3_i', 'V_R08_0_r', 'V_R08_0_i', 'V_R08_1_r', 'V_R08_1_i', 'V_R08_2_r', 'V_R08_2_i', 'V_R08_3_r', 'V_R08_3_i', 'V_R09_0_r', 'V_R09_0_i', 'V_R09_1_r', 'V_R09_1_i', 'V_R09_2_r', 'V_R09_2_i', 'V_R09_3_r', 'V_R09_3_i', 'V_R10_0_r', 'V_R10_0_i', 'V_R10_1_r', 'V_R10_1_i', 'V_R10_2_r', 'V_R10_2_i', 'V_R10_3_r', 'V_R10_3_i', 'V_R11_0_r', 'V_R11_0_i', 'V_R11_1_r', 'V_R11_1_i', 'V_R11_2_r', 'V_R11_2_i', 'V_R11_3_r', 'V_R11_3_i', 'V_R12_0_r', 'V_R12_0_i', 'V_R12_1_r', 'V_R12_1_i', 'V_R12_2_r', 'V_R12_2_i', 'V_R12_3_r', 'V_R12_3_i', 'V_R13_0_r', 'V_R13_0_i', 'V_R13_1_r', 'V_R13_1_i', 'V_R13_2_r', 'V_R13_2_i', 'V_R13_3_r', 'V_R13_3_i', 'V_R14_0_r', 'V_R14_0_i', 'V_R14_1_r', 'V_R14_1_i', 'V_R14_2_r', 'V_R14_2_i', 'V_R14_3_r', 'V_R14_3_i', 'V_R15_0_r', 'V_R15_0_i', 'V_R15_1_r', 'V_R15_1_i', 'V_R15_2_r', 'V_R15_2_i', 'V_R15_3_r', 'V_R15_3_i', 'V_R16_0_r', 'V_R16_0_i', 'V_R16_1_r', 'V_R16_1_i', 'V_R16_2_r', 'V_R16_2_i', 'V_R16_3_r', 'V_R16_3_i', 'V_R17_0_r', 'V_R17_0_i', 'V_R17_1_r', 'V_R17_1_i', 'V_R17_2_r', 'V_R17_2_i', 'V_R17_3_r', 'V_R17_3_i', 'V_R18_0_r', 'V_R18_0_i', 'V_R18_1_r', 'V_R18_1_i', 'V_R18_2_r', 'V_R18_2_i', 'V_R18_3_r', 'V_R18_3_i', 'V_I01_0_r', 'V_I01_0_i', 'V_I01_1_r', 'V_I01_1_i', 'V_I01_2_r', 'V_I01_2_i', 'V_I01_3_r', 'V_I01_3_i', 'V_I02_0_r', 'V_I02_0_i', 'V_I02_1_r', 'V_I02_1_i', 'V_I02_2_r', 'V_I02_2_i', 'V_I02_3_r', 'V_I02_3_i', 'V_C01_0_r', 'V_C01_0_i', 'V_C01_1_r', 'V_C01_1_i', 'V_C01_2_r', 'V_C01_2_i', 'V_C01_3_r', 'V_C01_3_i', 'V_C02_0_r', 'V_C02_0_i', 'V_C02_1_r', 'V_C02_1_i', 'V_C02_2_r', 'V_C02_2_i', 'V_C02_3_r', 'V_C02_3_i', 'V_C03_0_r', 'V_C03_0_i', 'V_C03_1_r', 'V_C03_1_i', 'V_C03_2_r', 'V_C03_2_i', 'V_C03_3_r', 'V_C03_3_i', 'V_C04_0_r', 'V_C04_0_i', 'V_C04_1_r', 'V_C04_1_i', 'V_C04_2_r', 'V_C04_2_i', 'V_C04_3_r', 'V_C04_3_i', 'V_C05_0_r', 'V_C05_0_i', 'V_C05_1_r', 'V_C05_1_i', 'V_C05_2_r', 'V_C05_2_i', 'V_C05_3_r', 'V_C05_3_i', 'V_C06_0_r', 'V_C06_0_i', 'V_C06_1_r', 'V_C06_1_i', 'V_C06_2_r', 'V_C06_2_i', 'V_C06_3_r', 'V_C06_3_i', 'V_C07_0_r', 'V_C07_0_i', 'V_C07_1_r', 'V_C07_1_i', 'V_C07_2_r', 'V_C07_2_i', 'V_C07_3_r', 'V_C07_3_i', 'V_C08_0_r', 'V_C08_0_i', 'V_C08_1_r', 'V_C08_1_i', 'V_C08_2_r', 'V_C08_2_i', 'V_C08_3_r', 'V_C08_3_i', 'V_C09_0_r', 'V_C09_0_i', 'V_C09_1_r', 'V_C09_1_i', 'V_C09_2_r', 'V_C09_2_i', 'V_C09_3_r', 'V_C09_3_i', 'V_C10_0_r', 'V_C10_0_i', 'V_C10_1_r', 'V_C10_1_i', 'V_C10_2_r', 'V_C10_2_i', 'V_C10_3_r', 'V_C10_3_i', 'V_C11_0_r', 'V_C11_0_i', 'V_C11_1_r', 'V_C11_1_i', 'V_C11_2_r', 'V_C11_2_i', 'V_C11_3_r', 'V_C11_3_i', 'V_C12_0_r', 'V_C12_0_i', 'V_C12_1_r', 'V_C12_1_i', 'V_C12_2_r', 'V_C12_2_i', 'V_C12_3_r', 'V_C12_3_i', 'V_C13_0_r', 'V_C13_0_i', 'V_C13_1_r', 'V_C13_1_i', 'V_C13_2_r', 'V_C13_2_i', 'V_C13_3_r', 'V_C13_3_i', 'V_C14_0_r', 'V_C14_0_i', 'V_C14_1_r', 'V_C14_1_i', 'V_C14_2_r', 'V_C14_2_i', 'V_C14_3_r', 'V_C14_3_i', 'V_C15_0_r', 'V_C15_0_i', 'V_C15_1_r', 'V_C15_1_i', 'V_C15_2_r', 'V_C15_2_i', 'V_C15_3_r', 'V_C15_3_i', 'V_C16_0_r', 'V_C16_0_i', 'V_C16_1_r', 'V_C16_1_i', 'V_C16_2_r', 'V_C16_2_i', 'V_C16_3_r', 'V_C16_3_i', 'V_C17_0_r', 'V_C17_0_i', 'V_C17_1_r', 'V_C17_1_i', 'V_C17_2_r', 'V_C17_2_i', 'V_C17_3_r', 'V_C17_3_i', 'V_C18_0_r', 'V_C18_0_i', 'V_C18_1_r', 'V_C18_1_i', 'V_C18_2_r', 'V_C18_2_i', 'V_C18_3_r', 'V_C18_3_i', 'V_C19_0_r', 'V_C19_0_i', 'V_C19_1_r', 'V_C19_1_i', 'V_C19_2_r', 'V_C19_2_i', 'V_C19_3_r', 'V_C19_3_i', 'V_C20_0_r', 'V_C20_0_i', 'V_C20_1_r', 'V_C20_1_i', 'V_C20_2_r', 'V_C20_2_i', 'V_C20_3_r', 'V_C20_3_i', 'i_load_R01_a_r', 'i_load_R01_a_i', 'i_load_R01_b_r', 'i_load_R01_b_i', 'i_load_R01_c_r', 'i_load_R01_c_i', 'i_load_R01_n_r', 'i_load_R01_n_i', 'i_load_R11_a_r', 'i_load_R11_a_i', 'i_load_R11_b_r', 'i_load_R11_b_i', 'i_load_R11_c_r', 'i_load_R11_c_i', 'i_load_R11_n_r', 'i_load_R11_n_i', 'i_load_R15_a_r', 'i_load_R15_a_i', 'i_load_R15_b_r', 'i_load_R15_b_i', 'i_load_R15_c_r', 'i_load_R15_c_i', 'i_load_R15_n_r', 'i_load_R15_n_i', 'i_load_R16_a_r', 'i_load_R16_a_i', 'i_load_R16_b_r', 'i_load_R16_b_i', 'i_load_R16_c_r', 'i_load_R16_c_i', 'i_load_R16_n_r', 'i_load_R16_n_i', 'i_load_R17_a_r', 'i_load_R17_a_i', 'i_load_R17_b_r', 'i_load_R17_b_i', 'i_load_R17_c_r', 'i_load_R17_c_i', 'i_load_R17_n_r', 'i_load_R17_n_i', 'i_load_R18_a_r', 'i_load_R18_a_i', 'i_load_R18_b_r', 'i_load_R18_b_i', 'i_load_R18_c_r', 'i_load_R18_c_i', 'i_load_R18_n_r', 'i_load_R18_n_i', 'i_load_I02_a_r', 'i_load_I02_a_i', 'i_load_I02_b_r', 'i_load_I02_b_i', 'i_load_I02_c_r', 'i_load_I02_c_i', 'i_load_I02_n_r', 'i_load_I02_n_i', 'i_load_C01_a_r', 'i_load_C01_a_i', 'i_load_C01_b_r', 'i_load_C01_b_i', 'i_load_C01_c_r', 'i_load_C01_c_i', 'i_load_C01_n_r', 'i_load_C01_n_i', 'i_load_C12_a_r', 'i_load_C12_a_i', 'i_load_C12_b_r', 'i_load_C12_b_i', 'i_load_C12_c_r', 'i_load_C12_c_i', 'i_load_C12_n_r', 'i_load_C12_n_i', 'i_load_C13_a_r', 'i_load_C13_a_i', 'i_load_C13_b_r', 'i_load_C13_b_i', 'i_load_C13_c_r', 'i_load_C13_c_i', 'i_load_C13_n_r', 'i_load_C13_n_i', 'i_load_C14_a_r', 'i_load_C14_a_i', 'i_load_C14_b_r', 'i_load_C14_b_i', 'i_load_C14_c_r', 'i_load_C14_c_i', 'i_load_C14_n_r', 'i_load_C14_n_i', 'i_load_C17_a_r', 'i_load_C17_a_i', 'i_load_C17_b_r', 'i_load_C17_b_i', 'i_load_C17_c_r', 'i_load_C17_c_i', 'i_load_C17_n_r', 'i_load_C17_n_i', 'i_load_C18_a_r', 'i_load_C18_a_i', 'i_load_C18_b_r', 'i_load_C18_b_i', 'i_load_C18_c_r', 'i_load_C18_c_i', 'i_load_C18_n_r', 'i_load_C18_n_i', 'i_load_C19_a_r', 'i_load_C19_a_i', 'i_load_C19_b_r', 'i_load_C19_b_i', 'i_load_C19_c_r', 'i_load_C19_c_i', 'i_load_C19_n_r', 'i_load_C19_n_i', 'i_load_C20_a_r', 'i_load_C20_a_i', 'i_load_C20_b_r', 'i_load_C20_b_i', 'i_load_C20_c_r', 'i_load_C20_c_i', 'i_load_C20_n_r', 'i_load_C20_n_i', 'i_vsc_MV0_a_r', 'i_vsc_MV0_b_r', 'i_vsc_MV0_c_r', 'i_vsc_MV0_a_i', 'i_vsc_MV0_b_i', 'i_vsc_MV0_c_i', 'omega_coi', 'p_agc'] 
        self.xy_list = self.x_list + self.y_run_list 
        self.y_ini_list = ['V_MV0_0_r', 'V_MV0_0_i', 'V_MV0_1_r', 'V_MV0_1_i', 'V_MV0_2_r', 'V_MV0_2_i', 'V_R01_0_r', 'V_R01_0_i', 'V_R01_1_r', 'V_R01_1_i', 'V_R01_2_r', 'V_R01_2_i', 'V_R01_3_r', 'V_R01_3_i', 'V_R02_0_r', 'V_R02_0_i', 'V_R02_1_r', 'V_R02_1_i', 'V_R02_2_r', 'V_R02_2_i', 'V_R02_3_r', 'V_R02_3_i', 'V_R03_0_r', 'V_R03_0_i', 'V_R03_1_r', 'V_R03_1_i', 'V_R03_2_r', 'V_R03_2_i', 'V_R03_3_r', 'V_R03_3_i', 'V_R04_0_r', 'V_R04_0_i', 'V_R04_1_r', 'V_R04_1_i', 'V_R04_2_r', 'V_R04_2_i', 'V_R04_3_r', 'V_R04_3_i', 'V_R05_0_r', 'V_R05_0_i', 'V_R05_1_r', 'V_R05_1_i', 'V_R05_2_r', 'V_R05_2_i', 'V_R05_3_r', 'V_R05_3_i', 'V_R06_0_r', 'V_R06_0_i', 'V_R06_1_r', 'V_R06_1_i', 'V_R06_2_r', 'V_R06_2_i', 'V_R06_3_r', 'V_R06_3_i', 'V_R07_0_r', 'V_R07_0_i', 'V_R07_1_r', 'V_R07_1_i', 'V_R07_2_r', 'V_R07_2_i', 'V_R07_3_r', 'V_R07_3_i', 'V_R08_0_r', 'V_R08_0_i', 'V_R08_1_r', 'V_R08_1_i', 'V_R08_2_r', 'V_R08_2_i', 'V_R08_3_r', 'V_R08_3_i', 'V_R09_0_r', 'V_R09_0_i', 'V_R09_1_r', 'V_R09_1_i', 'V_R09_2_r', 'V_R09_2_i', 'V_R09_3_r', 'V_R09_3_i', 'V_R10_0_r', 'V_R10_0_i', 'V_R10_1_r', 'V_R10_1_i', 'V_R10_2_r', 'V_R10_2_i', 'V_R10_3_r', 'V_R10_3_i', 'V_R11_0_r', 'V_R11_0_i', 'V_R11_1_r', 'V_R11_1_i', 'V_R11_2_r', 'V_R11_2_i', 'V_R11_3_r', 'V_R11_3_i', 'V_R12_0_r', 'V_R12_0_i', 'V_R12_1_r', 'V_R12_1_i', 'V_R12_2_r', 'V_R12_2_i', 'V_R12_3_r', 'V_R12_3_i', 'V_R13_0_r', 'V_R13_0_i', 'V_R13_1_r', 'V_R13_1_i', 'V_R13_2_r', 'V_R13_2_i', 'V_R13_3_r', 'V_R13_3_i', 'V_R14_0_r', 'V_R14_0_i', 'V_R14_1_r', 'V_R14_1_i', 'V_R14_2_r', 'V_R14_2_i', 'V_R14_3_r', 'V_R14_3_i', 'V_R15_0_r', 'V_R15_0_i', 'V_R15_1_r', 'V_R15_1_i', 'V_R15_2_r', 'V_R15_2_i', 'V_R15_3_r', 'V_R15_3_i', 'V_R16_0_r', 'V_R16_0_i', 'V_R16_1_r', 'V_R16_1_i', 'V_R16_2_r', 'V_R16_2_i', 'V_R16_3_r', 'V_R16_3_i', 'V_R17_0_r', 'V_R17_0_i', 'V_R17_1_r', 'V_R17_1_i', 'V_R17_2_r', 'V_R17_2_i', 'V_R17_3_r', 'V_R17_3_i', 'V_R18_0_r', 'V_R18_0_i', 'V_R18_1_r', 'V_R18_1_i', 'V_R18_2_r', 'V_R18_2_i', 'V_R18_3_r', 'V_R18_3_i', 'V_I01_0_r', 'V_I01_0_i', 'V_I01_1_r', 'V_I01_1_i', 'V_I01_2_r', 'V_I01_2_i', 'V_I01_3_r', 'V_I01_3_i', 'V_I02_0_r', 'V_I02_0_i', 'V_I02_1_r', 'V_I02_1_i', 'V_I02_2_r', 'V_I02_2_i', 'V_I02_3_r', 'V_I02_3_i', 'V_C01_0_r', 'V_C01_0_i', 'V_C01_1_r', 'V_C01_1_i', 'V_C01_2_r', 'V_C01_2_i', 'V_C01_3_r', 'V_C01_3_i', 'V_C02_0_r', 'V_C02_0_i', 'V_C02_1_r', 'V_C02_1_i', 'V_C02_2_r', 'V_C02_2_i', 'V_C02_3_r', 'V_C02_3_i', 'V_C03_0_r', 'V_C03_0_i', 'V_C03_1_r', 'V_C03_1_i', 'V_C03_2_r', 'V_C03_2_i', 'V_C03_3_r', 'V_C03_3_i', 'V_C04_0_r', 'V_C04_0_i', 'V_C04_1_r', 'V_C04_1_i', 'V_C04_2_r', 'V_C04_2_i', 'V_C04_3_r', 'V_C04_3_i', 'V_C05_0_r', 'V_C05_0_i', 'V_C05_1_r', 'V_C05_1_i', 'V_C05_2_r', 'V_C05_2_i', 'V_C05_3_r', 'V_C05_3_i', 'V_C06_0_r', 'V_C06_0_i', 'V_C06_1_r', 'V_C06_1_i', 'V_C06_2_r', 'V_C06_2_i', 'V_C06_3_r', 'V_C06_3_i', 'V_C07_0_r', 'V_C07_0_i', 'V_C07_1_r', 'V_C07_1_i', 'V_C07_2_r', 'V_C07_2_i', 'V_C07_3_r', 'V_C07_3_i', 'V_C08_0_r', 'V_C08_0_i', 'V_C08_1_r', 'V_C08_1_i', 'V_C08_2_r', 'V_C08_2_i', 'V_C08_3_r', 'V_C08_3_i', 'V_C09_0_r', 'V_C09_0_i', 'V_C09_1_r', 'V_C09_1_i', 'V_C09_2_r', 'V_C09_2_i', 'V_C09_3_r', 'V_C09_3_i', 'V_C10_0_r', 'V_C10_0_i', 'V_C10_1_r', 'V_C10_1_i', 'V_C10_2_r', 'V_C10_2_i', 'V_C10_3_r', 'V_C10_3_i', 'V_C11_0_r', 'V_C11_0_i', 'V_C11_1_r', 'V_C11_1_i', 'V_C11_2_r', 'V_C11_2_i', 'V_C11_3_r', 'V_C11_3_i', 'V_C12_0_r', 'V_C12_0_i', 'V_C12_1_r', 'V_C12_1_i', 'V_C12_2_r', 'V_C12_2_i', 'V_C12_3_r', 'V_C12_3_i', 'V_C13_0_r', 'V_C13_0_i', 'V_C13_1_r', 'V_C13_1_i', 'V_C13_2_r', 'V_C13_2_i', 'V_C13_3_r', 'V_C13_3_i', 'V_C14_0_r', 'V_C14_0_i', 'V_C14_1_r', 'V_C14_1_i', 'V_C14_2_r', 'V_C14_2_i', 'V_C14_3_r', 'V_C14_3_i', 'V_C15_0_r', 'V_C15_0_i', 'V_C15_1_r', 'V_C15_1_i', 'V_C15_2_r', 'V_C15_2_i', 'V_C15_3_r', 'V_C15_3_i', 'V_C16_0_r', 'V_C16_0_i', 'V_C16_1_r', 'V_C16_1_i', 'V_C16_2_r', 'V_C16_2_i', 'V_C16_3_r', 'V_C16_3_i', 'V_C17_0_r', 'V_C17_0_i', 'V_C17_1_r', 'V_C17_1_i', 'V_C17_2_r', 'V_C17_2_i', 'V_C17_3_r', 'V_C17_3_i', 'V_C18_0_r', 'V_C18_0_i', 'V_C18_1_r', 'V_C18_1_i', 'V_C18_2_r', 'V_C18_2_i', 'V_C18_3_r', 'V_C18_3_i', 'V_C19_0_r', 'V_C19_0_i', 'V_C19_1_r', 'V_C19_1_i', 'V_C19_2_r', 'V_C19_2_i', 'V_C19_3_r', 'V_C19_3_i', 'V_C20_0_r', 'V_C20_0_i', 'V_C20_1_r', 'V_C20_1_i', 'V_C20_2_r', 'V_C20_2_i', 'V_C20_3_r', 'V_C20_3_i', 'i_load_R01_a_r', 'i_load_R01_a_i', 'i_load_R01_b_r', 'i_load_R01_b_i', 'i_load_R01_c_r', 'i_load_R01_c_i', 'i_load_R01_n_r', 'i_load_R01_n_i', 'i_load_R11_a_r', 'i_load_R11_a_i', 'i_load_R11_b_r', 'i_load_R11_b_i', 'i_load_R11_c_r', 'i_load_R11_c_i', 'i_load_R11_n_r', 'i_load_R11_n_i', 'i_load_R15_a_r', 'i_load_R15_a_i', 'i_load_R15_b_r', 'i_load_R15_b_i', 'i_load_R15_c_r', 'i_load_R15_c_i', 'i_load_R15_n_r', 'i_load_R15_n_i', 'i_load_R16_a_r', 'i_load_R16_a_i', 'i_load_R16_b_r', 'i_load_R16_b_i', 'i_load_R16_c_r', 'i_load_R16_c_i', 'i_load_R16_n_r', 'i_load_R16_n_i', 'i_load_R17_a_r', 'i_load_R17_a_i', 'i_load_R17_b_r', 'i_load_R17_b_i', 'i_load_R17_c_r', 'i_load_R17_c_i', 'i_load_R17_n_r', 'i_load_R17_n_i', 'i_load_R18_a_r', 'i_load_R18_a_i', 'i_load_R18_b_r', 'i_load_R18_b_i', 'i_load_R18_c_r', 'i_load_R18_c_i', 'i_load_R18_n_r', 'i_load_R18_n_i', 'i_load_I02_a_r', 'i_load_I02_a_i', 'i_load_I02_b_r', 'i_load_I02_b_i', 'i_load_I02_c_r', 'i_load_I02_c_i', 'i_load_I02_n_r', 'i_load_I02_n_i', 'i_load_C01_a_r', 'i_load_C01_a_i', 'i_load_C01_b_r', 'i_load_C01_b_i', 'i_load_C01_c_r', 'i_load_C01_c_i', 'i_load_C01_n_r', 'i_load_C01_n_i', 'i_load_C12_a_r', 'i_load_C12_a_i', 'i_load_C12_b_r', 'i_load_C12_b_i', 'i_load_C12_c_r', 'i_load_C12_c_i', 'i_load_C12_n_r', 'i_load_C12_n_i', 'i_load_C13_a_r', 'i_load_C13_a_i', 'i_load_C13_b_r', 'i_load_C13_b_i', 'i_load_C13_c_r', 'i_load_C13_c_i', 'i_load_C13_n_r', 'i_load_C13_n_i', 'i_load_C14_a_r', 'i_load_C14_a_i', 'i_load_C14_b_r', 'i_load_C14_b_i', 'i_load_C14_c_r', 'i_load_C14_c_i', 'i_load_C14_n_r', 'i_load_C14_n_i', 'i_load_C17_a_r', 'i_load_C17_a_i', 'i_load_C17_b_r', 'i_load_C17_b_i', 'i_load_C17_c_r', 'i_load_C17_c_i', 'i_load_C17_n_r', 'i_load_C17_n_i', 'i_load_C18_a_r', 'i_load_C18_a_i', 'i_load_C18_b_r', 'i_load_C18_b_i', 'i_load_C18_c_r', 'i_load_C18_c_i', 'i_load_C18_n_r', 'i_load_C18_n_i', 'i_load_C19_a_r', 'i_load_C19_a_i', 'i_load_C19_b_r', 'i_load_C19_b_i', 'i_load_C19_c_r', 'i_load_C19_c_i', 'i_load_C19_n_r', 'i_load_C19_n_i', 'i_load_C20_a_r', 'i_load_C20_a_i', 'i_load_C20_b_r', 'i_load_C20_b_i', 'i_load_C20_c_r', 'i_load_C20_c_i', 'i_load_C20_n_r', 'i_load_C20_n_i', 'i_vsc_MV0_a_r', 'i_vsc_MV0_b_r', 'i_vsc_MV0_c_r', 'i_vsc_MV0_a_i', 'i_vsc_MV0_b_i', 'i_vsc_MV0_c_i', 'omega_coi', 'p_agc'] 
        self.xy_ini_list = self.x_list + self.y_ini_list 
        self.t = 0.0
        self.it = 0
        self.it_store = 0
        self.xy_prev = np.zeros((self.N_x+self.N_y,1))
        self.initialization_tol = 1e-6
        self.N_u = len(self.inputs_run_list) 
        self.sopt_root_method='hybr'
        self.sopt_root_jac=True
        self.u_ini_list = self.inputs_ini_list
        self.u_ini_values_list = self.inputs_ini_values_list
        self.u_run_list = self.inputs_run_list
        self.u_run_values_list = self.inputs_run_values_list
        self.N_u = len(self.u_run_list)
        self.u_ini = np.array(self.inputs_ini_values_list)
        self.p = np.array(self.params_values_list)
        self.xy_0 = np.zeros((self.N_x+self.N_y,))
        self.xy = np.zeros((self.N_x+self.N_y,))
        self.z = np.zeros((self.N_z,))
        
        # numerical elements of jacobians computing:
        x = self.xy[:self.N_x]
        y = self.xy[self.N_x:]
        
        self.yini2urun = list(set(self.u_run_list).intersection(set(self.y_ini_list)))
        self.uini2yrun = list(set(self.y_run_list).intersection(set(self.u_ini_list)))
        self.Time = np.zeros(self.N_store)
        self.X = np.zeros((self.N_store,self.N_x))
        self.Y = np.zeros((self.N_store,self.N_y))
        self.Z = np.zeros((self.N_store,self.N_z))
        self.iters = np.zeros(self.N_store) 
        self.u_run = np.array(self.u_run_values_list,dtype=np.float64)
 
        ## jac_ini
        self.jac_ini = np.zeros((self.N_x+self.N_y,self.N_x+self.N_y))
        self.sp_jac_ini_ia, self.sp_jac_ini_ja, self.sp_jac_ini_nia, self.sp_jac_ini_nja = sp_jac_ini_vectors()
        data = np.array(self.sp_jac_ini_ia,dtype=np.float64)
        #self.sp_jac_ini = sspa.csr_matrix((data, self.sp_jac_ini_ia, self.sp_jac_ini_ja), shape=(self.sp_jac_ini_nia,self.sp_jac_ini_nja))
           
        if self.dae_file_mode == 'enviroment':
            fobj = BytesIO(pkgutil.get_data(__name__, f'./cigre_eu_lv_sp_jac_ini_num.npz'))
            self.sp_jac_ini = sspa.load_npz(fobj)
        else:
            self.sp_jac_ini = sspa.load_npz(f'./{self.matrices_folder}/cigre_eu_lv_sp_jac_ini_num.npz')
            
            
        self.jac_ini = self.sp_jac_ini.toarray()

        #self.J_ini_d = np.array(self.sp_jac_ini_ia)*0.0
        #self.J_ini_i = np.array(self.sp_jac_ini_ia)
        #self.J_ini_p = np.array(self.sp_jac_ini_ja)
        de_jac_ini_eval(self.jac_ini,x,y,self.u_ini,self.p,self.Dt)
        sp_jac_ini_eval(self.sp_jac_ini.data,x,y,self.u_ini,self.p,self.Dt) 
        self.fill_factor_ini,self.drop_tol_ini,self.drop_rule_ini = 100,1e-10,'basic'       


        ## jac_run
        self.jac_run = np.zeros((self.N_x+self.N_y,self.N_x+self.N_y))
        self.sp_jac_run_ia, self.sp_jac_run_ja, self.sp_jac_run_nia, self.sp_jac_run_nja = sp_jac_run_vectors()
        data = np.array(self.sp_jac_run_ia,dtype=np.float64)

        if self.dae_file_mode == 'enviroment':
            fobj = BytesIO(pkgutil.get_data(__name__, './cigre_eu_lv_sp_jac_run_num.npz'))
            self.sp_jac_run = sspa.load_npz(fobj)
        else:
            self.sp_jac_run = sspa.load_npz(f'./{self.matrices_folder}/cigre_eu_lv_sp_jac_run_num.npz')
        self.jac_run = self.sp_jac_run.toarray()            
           
        self.J_run_d = np.array(self.sp_jac_run_ia)*0.0
        self.J_run_i = np.array(self.sp_jac_run_ia)
        self.J_run_p = np.array(self.sp_jac_run_ja)
        de_jac_run_eval(self.jac_run,x,y,self.u_run,self.p,self.Dt)
        sp_jac_run_eval(self.J_run_d,x,y,self.u_run,self.p,self.Dt)
        
        ## jac_trap
        self.jac_trap = np.zeros((self.N_x+self.N_y,self.N_x+self.N_y))
        self.sp_jac_trap_ia, self.sp_jac_trap_ja, self.sp_jac_trap_nia, self.sp_jac_trap_nja = sp_jac_trap_vectors()
        data = np.array(self.sp_jac_trap_ia,dtype=np.float64)
        #self.sp_jac_trap = sspa.csr_matrix((data, self.sp_jac_trap_ia, self.sp_jac_trap_ja), shape=(self.sp_jac_trap_nia,self.sp_jac_trap_nja))
       
    

        if self.dae_file_mode == 'enviroment':
            fobj = BytesIO(pkgutil.get_data(__name__, './cigre_eu_lv_sp_jac_trap_num.npz'))
            self.sp_jac_trap = sspa.load_npz(fobj)
        else:
            self.sp_jac_trap = sspa.load_npz(f'./{self.matrices_folder}/cigre_eu_lv_sp_jac_trap_num.npz')
            

        self.jac_trap = self.sp_jac_trap.toarray()
        
        #self.J_trap_d = np.array(self.sp_jac_trap_ia)*0.0
        #self.J_trap_i = np.array(self.sp_jac_trap_ia)
        #self.J_trap_p = np.array(self.sp_jac_trap_ja)
        de_jac_trap_eval(self.jac_trap,x,y,self.u_run,self.p,self.Dt)
        sp_jac_trap_eval(self.sp_jac_trap.data,x,y,self.u_run,self.p,self.Dt)
        self.fill_factor_trap,self.drop_tol_trap,self.drop_rule_trap = 100,1e-10,'basic' 
   

        

        
        self.max_it,self.itol,self.store = 50,1e-8,1 
        self.lmax_it,self.ltol,self.ldamp= 50,1e-8,1.0
        self.mode = 0 

        self.lmax_it_ini,self.ltol_ini,self.ldamp_ini=50,1e-8,1.0

        self.sp_Fu_run = sspa.load_npz(f'./{self.matrices_folder}/cigre_eu_lv_Fu_run_num.npz')
        self.sp_Gu_run = sspa.load_npz(f'./{self.matrices_folder}/cigre_eu_lv_Gu_run_num.npz')
        self.sp_Hx_run = sspa.load_npz(f'./{self.matrices_folder}/cigre_eu_lv_Hx_run_num.npz')
        self.sp_Hy_run = sspa.load_npz(f'./{self.matrices_folder}/cigre_eu_lv_Hy_run_num.npz')
        self.sp_Hu_run = sspa.load_npz(f'./{self.matrices_folder}/cigre_eu_lv_Hu_run_num.npz')        
        
        self.ss_solver = 2
        self.lsolver = 2
 
        



        
    def update(self):

        self.Time = np.zeros(self.N_store)
        self.X = np.zeros((self.N_store,self.N_x))
        self.Y = np.zeros((self.N_store,self.N_y))
        self.Z = np.zeros((self.N_store,self.N_z))
        self.iters = np.zeros(self.N_store)
        
    def ss_ini(self):

        xy_ini,it = sstate(self.xy_0,self.u_ini,self.p,self.jac_ini,self.N_x,self.N_y)
        self.xy_ini = xy_ini
        self.N_iters = it
        
        return xy_ini
    
    # def ini(self,up_dict,xy_0={}):

    #     for item in up_dict:
    #         self.set_value(item,up_dict[item])
            
    #     self.xy_ini = self.ss_ini()
    #     self.ini2run()
    #     jac_run_ss_eval_xy(self.jac_run,self.x,self.y_run,self.u_run,self.p)
    #     jac_run_ss_eval_up(self.jac_run,self.x,self.y_run,self.u_run,self.p)
        
    def jac_run_eval(self):
        de_jac_run_eval(self.jac_run,self.x,self.y_run,self.u_run,self.p,self.Dt)
      
    
    def run(self,t_end,up_dict):
        for item in up_dict:
            self.set_value(item,up_dict[item])
            
        t = self.t
        p = self.p
        it = self.it
        it_store = self.it_store
        xy = self.xy
        u = self.u_run
        z = self.z
        
        t,it,it_store,xy = daesolver(t,t_end,it,it_store,xy,u,p,z,
                                  self.jac_trap,
                                  self.Time,
                                  self.X,
                                  self.Y,
                                  self.Z,
                                  self.iters,
                                  self.Dt,
                                  self.N_x,
                                  self.N_y,
                                  self.N_z,
                                  self.decimation,
                                  max_it=self.max_it,itol=self.itol,store=self.store)
        
        self.t = t
        self.it = it
        self.it_store = it_store
        self.xy = xy
        self.z = z
 
    def runsp(self,t_end,up_dict):
        for item in up_dict:
            self.set_value(item,up_dict[item])
            
        t = self.t
        p = self.p
        it = self.it
        it_store = self.it_store
        xy = self.xy
        u = self.u_run
        
        t,it,it_store,xy = daesolver_sp(t,t_end,it,it_store,xy,u,p,
                                  self.sp_jac_trap,
                                  self.Time,
                                  self.X,
                                  self.Y,
                                  self.Z,
                                  self.iters,
                                  self.Dt,
                                  self.N_x,
                                  self.N_y,
                                  self.N_z,
                                  self.decimation,
                                  max_it=50,itol=1e-8,store=1)
        
        self.t = t
        self.it = it
        self.it_store = it_store
        self.xy = xy
        
    def post(self):
        
        self.Time = self.Time[:self.it_store]
        self.X = self.X[:self.it_store]
        self.Y = self.Y[:self.it_store]
        self.Z = self.Z[:self.it_store]
        
    def ini2run(self):
        
        ## y_ini to y_run
        self.y_ini = self.xy_ini[self.N_x:]
        self.y_run = np.copy(self.y_ini)
        self.u_run = np.copy(self.u_ini)
        
        ## y_ini to u_run
        for item in self.yini2urun:
            self.u_run[self.u_run_list.index(item)] = self.y_ini[self.y_ini_list.index(item)]
                
        ## u_ini to y_run
        for item in self.uini2yrun:
            self.y_run[self.y_run_list.index(item)] = self.u_ini[self.u_ini_list.index(item)]
            
        
        self.x = self.xy_ini[:self.N_x]
        self.xy[:self.N_x] = self.x
        self.xy[self.N_x:] = self.y_run
        c_h_eval(self.z,self.x,self.y_run,self.u_ini,self.p,self.Dt)
        

        
    def get_value(self,name):
        
        if name in self.inputs_run_list:
            value = self.u_run[self.inputs_run_list.index(name)]
            return value
            
        if name in self.x_list:
            idx = self.x_list.index(name)
            value = self.xy[idx]
            return value
            
        if name in self.y_run_list:
            idy = self.y_run_list.index(name)
            value = self.xy[self.N_x+idy]
            return value
        
        if name in self.params_list:
            idp = self.params_list.index(name)
            value = self.p[idp]
            return value
            
        if name in self.outputs_list:
            idz = self.outputs_list.index(name)
            value = self.z[idz]
            return value

    def get_values(self,name):
        if name in self.x_list:
            values = self.X[:,self.x_list.index(name)]
        if name in self.y_run_list:
            values = self.Y[:,self.y_run_list.index(name)]
        if name in self.outputs_list:
            values = self.Z[:,self.outputs_list.index(name)]
                        
        return values

    def get_mvalue(self,names):
        '''

        Parameters
        ----------
        names : list
            list of variables names to return each value.

        Returns
        -------
        mvalue : TYPE
            list of value of each variable.

        '''
        mvalue = []
        for name in names:
            mvalue += [self.get_value(name)]
                        
        return mvalue
    
    def set_value(self,name_,value):
        if name_ in self.inputs_ini_list or name_ in self.inputs_run_list:
            if name_ in self.inputs_ini_list:
                self.u_ini[self.inputs_ini_list.index(name_)] = value
            if name_ in self.inputs_run_list:
                self.u_run[self.inputs_run_list.index(name_)] = value
            return
        elif name_ in self.params_list:
            self.p[self.params_list.index(name_)] = value
            return
        else:
            print(f'Input or parameter {name_} not found.')
 
    def report_x(self,value_format='5.2f'):
        for item in self.x_list:
            print(f'{item:5s} = {self.get_value(item):{value_format}}')

    def report_y(self,value_format='5.2f'):
        for item in self.y_run_list:
            print(f'{item:5s} = {self.get_value(item):{value_format}}')
            
    def report_u(self,value_format='5.2f'):
        for item in self.inputs_run_list:
            print(f'{item:5s} ={self.get_value(item):{value_format}}')

    def report_z(self,value_format='5.2f'):
        for item in self.outputs_list:
            print(f'{item:5s} = {self.get_value(item):{value_format}}')

    def report_params(self,value_format='5.2f'):
        for item in self.params_list:
            print(f'{item:5s} ={self.get_value(item):{value_format}}')
            
    def ini(self,up_dict,xy_0={}):
        '''
        Find the steady state of the initialization problem:
            
               0 = f(x,y,u,p) 
               0 = g(x,y,u,p) 

        Parameters
        ----------
        up_dict : dict
            dictionary with all the parameters p and inputs u new values.
        xy_0: if scalar, all the x and y values initial guess are set to the scalar.
              if dict, the initial guesses are applied for the x and y that are in the dictionary
              if string, the initial guess considers a json file with the x and y names and their initial values

        Returns
        -------
        mvalue : TYPE
            list of value of each variable.

        '''
        
        self.it = 0
        self.it_store = 0
        self.t = 0.0
    
        for item in up_dict:
            self.set_value(item,up_dict[item])
            
        if type(xy_0) == dict:
            xy_0_dict = xy_0
            self.dict2xy0(xy_0_dict)
            
        if type(xy_0) == str:
            if xy_0 == 'eval':
                N_x = self.N_x
                self.xy_0_new = np.copy(self.xy_0)*0
                xy0_eval(self.xy_0_new[:N_x],self.xy_0_new[N_x:],self.u_ini,self.p)
                self.xy_0_evaluated = np.copy(self.xy_0_new)
                self.xy_0 = np.copy(self.xy_0_new)
            else:
                self.load_xy_0(file_name = xy_0)
                
        if type(xy_0) == float or type(xy_0) == int:
            self.xy_0 = np.ones(self.N_x+self.N_y,dtype=np.float64)*xy_0

        xy_ini,it = sstate(self.xy_0,self.u_ini,self.p,
                           self.jac_ini,
                           self.N_x,self.N_y,
                           max_it=self.max_it,tol=self.itol)
        
        if it < self.max_it-1:
            
            self.xy_ini = xy_ini
            self.N_iters = it

            self.ini2run()
            
            self.ini_convergence = True
            
        if it >= self.max_it-1:
            print(f'Maximum number of iterations (max_it = {self.max_it}) reached without convergence.')
            self.ini_convergence = False
            
        return self.ini_convergence
            
        


    
    def dict2xy0(self,xy_0_dict):
    
        for item in xy_0_dict:
            if item in self.x_list:
                self.xy_0[self.x_list.index(item)] = xy_0_dict[item]
            if item in self.y_ini_list:
                self.xy_0[self.y_ini_list.index(item) + self.N_x] = xy_0_dict[item]
        
    
    def save_xy_0(self,file_name = 'xy_0.json'):
        xy_0_dict = {}
        for item in self.x_list:
            xy_0_dict.update({item:self.get_value(item)})
        for item in self.y_ini_list:
            xy_0_dict.update({item:self.get_value(item)})
    
        xy_0_str = json.dumps(xy_0_dict, indent=4)
        with open(file_name,'w') as fobj:
            fobj.write(xy_0_str)
    
    def load_xy_0(self,file_name = 'xy_0.json'):
        with open(file_name) as fobj:
            xy_0_str = fobj.read()
        xy_0_dict = json.loads(xy_0_str)
    
        for item in xy_0_dict:
            if item in self.x_list:
                self.xy_0[self.x_list.index(item)] = xy_0_dict[item]
            if item in self.y_ini_list:
                self.xy_0[self.y_ini_list.index(item)+self.N_x] = xy_0_dict[item]            

    def load_params(self,data_input):
    
        if type(data_input) == str:
            json_file = data_input
            self.json_file = json_file
            self.json_data = open(json_file).read().replace("'",'"')
            data = json.loads(self.json_data)
        elif type(data_input) == dict:
            data = data_input
    
        self.data = data
        for item in self.data:
            self.set_value(item, self.data[item])

    def save_params(self,file_name = 'parameters.json'):
        params_dict = {}
        for item in self.params_list:
            params_dict.update({item:self.get_value(item)})

        params_dict_str = json.dumps(params_dict, indent=4)
        with open(file_name,'w') as fobj:
            fobj.write(params_dict_str)

    def save_inputs_ini(self,file_name = 'inputs_ini.json'):
        inputs_ini_dict = {}
        for item in self.inputs_ini_list:
            inputs_ini_dict.update({item:self.get_value(item)})

        inputs_ini_dict_str = json.dumps(inputs_ini_dict, indent=4)
        with open(file_name,'w') as fobj:
            fobj.write(inputs_ini_dict_str)

    def eval_preconditioner_ini(self):
    
        sp_jac_ini_eval(self.sp_jac_ini.data,self.x,self.y_run,self.u_run,self.p,self.Dt)
    
        csc_sp_jac_ini = sspa.csc_matrix(self.sp_jac_ini)
        P_slu = spilu(csc_sp_jac_ini,
                  fill_factor=self.fill_factor_ini,
                  drop_tol=self.drop_tol_ini,
                  drop_rule = self.drop_rule_ini)
    
        self.P_slu = P_slu
        P_d,P_i,P_p,perm_r,perm_c = slu2pydae(P_slu)   
        self.P_d = P_d
        self.P_i = P_i
        self.P_p = P_p
    
        self.perm_r = perm_r
        self.perm_c = perm_c
            
    
    def eval_preconditioner_trap(self):
    
        sp_jac_trap_eval(self.sp_jac_trap.data,self.x,self.y_run,self.u_run,self.p,self.Dt)
    
        #self.sp_jac_trap.data = self.J_trap_d 
        
        csc_sp_jac_trap = sspa.csc_matrix(self.sp_jac_trap)


        P_slu_trap = spilu(csc_sp_jac_trap,
                          fill_factor=self.fill_factor_trap,
                          drop_tol=self.drop_tol_trap,
                          drop_rule = self.drop_rule_trap)
    
        self.P_slu_trap = P_slu_trap
        P_d,P_i,P_p,perm_r,perm_c = slu2pydae(P_slu_trap)   
        self.P_trap_d = P_d
        self.P_trap_i = P_i
        self.P_trap_p = P_p
    
        self.perm_trap_r = perm_r
        self.perm_trap_c = perm_c
        
    def sprun(self,t_end,up_dict):
        
        for item in up_dict:
            self.set_value(item,up_dict[item])
    
        t = self.t
        p = self.p
        it = self.it
        it_store = self.it_store
        xy = self.xy
        u = self.u_run
        z = self.z
        self.iparams_run = np.zeros(10,dtype=np.float64)
    
        t,it,it_store,xy = spdaesolver(t,t_end,it,it_store,xy,u,p,z,
                                  self.sp_jac_trap.data,self.sp_jac_trap.indices,self.sp_jac_trap.indptr,
                                  self.P_trap_d,self.P_trap_i,self.P_trap_p,self.perm_trap_r,self.perm_trap_c,
                                  self.Time,
                                  self.X,
                                  self.Y,
                                  self.Z,
                                  self.iters,
                                  self.Dt,
                                  self.N_x,
                                  self.N_y,
                                  self.N_z,
                                  self.decimation,
                                  self.iparams_run,
                                  max_it=self.max_it,itol=self.max_it,store=self.store,
                                  lmax_it=self.lmax_it,ltol=self.ltol,ldamp=self.ldamp,mode=self.mode,
                                  lsolver = self.lsolver)
    
        self.t = t
        self.it = it
        self.it_store = it_store
        self.xy = xy
        self.z = z

            
    def spini(self,up_dict,xy_0={}):
    
        self.it = 0
        self.it_store = 0
        self.t = 0.0
    
        for item in up_dict:
            self.set_value(item,up_dict[item])
    
        if type(xy_0) == dict:
            xy_0_dict = xy_0
            self.dict2xy0(xy_0_dict)
    
        if type(xy_0) == str:
            if xy_0 == 'eval':
                N_x = self.N_x
                self.xy_0_new = np.copy(self.xy_0)*0
                xy0_eval(self.xy_0_new[:N_x],self.xy_0_new[N_x:],self.u_ini,self.p)
                self.xy_0_evaluated = np.copy(self.xy_0_new)
                self.xy_0 = np.copy(self.xy_0_new)
            else:
                self.load_xy_0(file_name = xy_0)

        self.xy_ini = self.spss_ini()


        if self.N_iters < self.max_it:
            
            self.ini2run()           
            self.ini_convergence = True
            
        if self.N_iters >= self.max_it:
            print(f'Maximum number of iterations (max_it = {self.max_it}) reached without convergence.')
            self.ini_convergence = False
            
        #jac_run_eval_xy(self.jac_run,self.x,self.y_run,self.u_run,self.p)
        #jac_run_eval_up(self.jac_run,self.x,self.y_run,self.u_run,self.p)
        
        return self.ini_convergence

        
    def spss_ini(self):
        J_d,J_i,J_p = csr2pydae(self.sp_jac_ini)
        
        xy_ini,it,iparams = spsstate(self.xy,self.u_ini,self.p,
                 self.sp_jac_ini.data,self.sp_jac_ini.indices,self.sp_jac_ini.indptr,
                 self.P_d,self.P_i,self.P_p,self.perm_r,self.perm_c,
                 self.N_x,self.N_y,
                 max_it=self.max_it,tol=self.itol,
                 lmax_it=self.lmax_it_ini,
                 ltol=self.ltol_ini,
                 ldamp=self.ldamp,solver=self.ss_solver)

 
        self.xy_ini = xy_ini
        self.N_iters = it
        self.iparams = iparams
    
        return xy_ini

    #def import_cffi(self):
        

    def eval_jac_u2z(self):

        '''

        0 =   J_run * xy + FG_u * u
        z = Hxy_run * xy + H_u * u

        xy = -1/J_run * FG_u * u
        z = -Hxy_run/J_run * FG_u * u + H_u * u
        z = (-Hxy_run/J_run * FG_u + H_u ) * u 
        '''
        
        sp_Fu_run_eval(self.sp_Fu_run.data,self.x,self.y_run,self.u_run,self.p,self.Dt)
        sp_Gu_run_eval(self.sp_Gu_run.data,self.x,self.y_run,self.u_run,self.p,self.Dt)
        sp_H_jacs_run_eval(self.sp_Hx_run.data,
                        self.sp_Hy_run.data,
                        self.sp_Hu_run.data,
                        self.x,self.y_run,self.u_run,self.p,self.Dt)
        sp_jac_run = self.sp_jac_run
        sp_jac_run_eval(sp_jac_run.data,
                        self.x,self.y_run,
                        self.u_run,self.p,
                        self.Dt)



        Hxy_run = sspa.bmat([[self.sp_Hx_run,self.sp_Hy_run]])
        FGu_run = sspa.bmat([[self.sp_Fu_run],[self.sp_Gu_run]])
        

        #((sspa.linalg.spsolve(s.sp_jac_ini,-Hxy_run)) @ FGu_run + sp_Hu_run )@s.u_ini

        self.jac_u2z = Hxy_run @ sspa.linalg.spsolve(self.sp_jac_run,-FGu_run) + self.sp_Hu_run  
        
        
    def step(self,t_end,up_dict):
        for item in up_dict:
            self.set_value(item,up_dict[item])

        t = self.t
        p = self.p
        it = self.it
        it_store = self.it_store
        xy = self.xy
        u = self.u_run
        z = self.z

        t,it,xy = daestep(t,t_end,it,
                          xy,u,p,z,
                          self.jac_trap,
                          self.iters,
                          self.Dt,
                          self.N_x,
                          self.N_y,
                          self.N_z,
                          max_it=self.max_it,itol=self.itol,store=self.store)

        self.t = t
        self.it = it
        self.it_store = it_store
        self.xy = xy
        self.z = z
           
            
    def save_run(self,file_name):
        np.savez(file_name,Time=self.Time,
             X=self.X,Y=self.Y,Z=self.Z,
             x_list = self.x_list,
             y_ini_list = self.y_ini_list,
             y_run_list = self.y_run_list,
             u_ini_list=self.u_ini_list,
             u_run_list=self.u_run_list,  
             z_list=self.outputs_list, 
            )
        
    def load_run(self,file_name):
        data = np.load(f'{file_name}.npz')
        self.Time = data['Time']
        self.X = data['X']
        self.Y = data['Y']
        self.Z = data['Z']
        self.x_list = list(data['x_list'] )
        self.y_run_list = list(data['y_run_list'] )
        self.outputs_list = list(data['z_list'] )
        
    def full_jacs_eval(self):
        N_x = self.N_x
        N_y = self.N_y
        N_xy = N_x + N_y
    
        sp_jac_run = self.sp_jac_run
        sp_Fu = self.sp_Fu_run
        sp_Gu = self.sp_Gu_run
        sp_Hx = self.sp_Hx_run
        sp_Hy = self.sp_Hy_run
        sp_Hu = self.sp_Hu_run
        
        x = self.xy[0:N_x]
        y = self.xy[N_x:]
        u = self.u_run
        p = self.p
        Dt = self.Dt
    
        sp_jac_run_eval(sp_jac_run.data,x,y,u,p,Dt)
        
        self.Fx = sp_jac_run[0:N_x,0:N_x]
        self.Fy = sp_jac_run[ 0:N_x,N_x:]
        self.Gx = sp_jac_run[ N_x:,0:N_x]
        self.Gy = sp_jac_run[ N_x:, N_x:]
        
        sp_Fu_run_eval(sp_Fu.data,x,y,u,p,Dt)
        sp_Gu_run_eval(sp_Gu.data,x,y,u,p,Dt)
        sp_H_jacs_run_eval(sp_Hx.data,sp_Hy.data,sp_Hu.data,x,y,u,p,Dt)
        
        self.Fu = sp_Fu
        self.Gu = sp_Gu
        self.Hx = sp_Hx
        self.Hy = sp_Hy
        self.Hu = sp_Hu


@numba.njit() 
def daestep(t,t_end,it,xy,u,p,z,jac_trap,iters,Dt,N_x,N_y,N_z,max_it=50,itol=1e-8,store=1): 


    fg = np.zeros((N_x+N_y,1),dtype=np.float64)
    fg_i = np.zeros((N_x+N_y),dtype=np.float64)
    x = xy[:N_x]
    y = xy[N_x:]
    fg = np.zeros((N_x+N_y,),dtype=np.float64)
    f = fg[:N_x]
    g = fg[N_x:]
    #h = np.zeros((N_z),dtype=np.float64)
    
    f_ptr=ffi.from_buffer(np.ascontiguousarray(f))
    g_ptr=ffi.from_buffer(np.ascontiguousarray(g))
    z_ptr=ffi.from_buffer(np.ascontiguousarray(z))
    x_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    jac_trap_ptr=ffi.from_buffer(np.ascontiguousarray(jac_trap))
    
    #de_jac_trap_num_eval(jac_trap_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)    
    de_jac_trap_up_eval(jac_trap_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt) 
    de_jac_trap_xy_eval(jac_trap_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt) 
    
    if it == 0:
        f_run_eval(f_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        g_run_eval(g_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        h_eval(z_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        it_store = 0  

    while t<t_end: 
        it += 1
        t += Dt

        f_run_eval(f_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        g_run_eval(g_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)

        x_0 = np.copy(x) 
        y_0 = np.copy(y) 
        f_0 = np.copy(f) 
        g_0 = np.copy(g) 
            
        for iti in range(max_it):
            f_run_eval(f_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
            g_run_eval(g_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
            de_jac_trap_xy_eval(jac_trap_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt) 

            f_n_i = x - x_0 - 0.5*Dt*(f+f_0) 

            fg_i[:N_x] = f_n_i
            fg_i[N_x:] = g
            
            Dxy_i = np.linalg.solve(-jac_trap,fg_i) 

            x += Dxy_i[:N_x]
            y += Dxy_i[N_x:] 
            
            #print(Dxy_i)

            # iteration stop
            max_relative = 0.0
            for it_var in range(N_x+N_y):
                abs_value = np.abs(xy[it_var])
                if abs_value < 0.001:
                    abs_value = 0.001
                relative_error = np.abs(Dxy_i[it_var])/abs_value

                if relative_error > max_relative: max_relative = relative_error

            if max_relative<itol:
                break
                
        h_eval(z_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        xy[:N_x] = x
        xy[N_x:] = y
        
    return t,it,xy


def daesolver_sp(t,t_end,it,it_store,xy,u,p,sp_jac_trap,T,X,Y,Z,iters,Dt,N_x,N_y,N_z,decimation,max_it=50,itol=1e-8,store=1): 

    fg = np.zeros((N_x+N_y,1),dtype=np.float64)
    fg_i = np.zeros((N_x+N_y),dtype=np.float64)
    x = xy[:N_x]
    y = xy[N_x:]
    fg = np.zeros((N_x+N_y,),dtype=np.float64)
    f = fg[:N_x]
    g = fg[N_x:]
    h = np.zeros((N_z),dtype=np.float64)
    sp_jac_trap_eval_up(sp_jac_trap.data,x,y,u,p,Dt,xyup=1)
    
    if it == 0:
        f_run_eval(f,x,y,u,p)
        h_eval(h,x,y,u,p)
        it_store = 0  
        T[0] = t 
        X[0,:] = x  
        Y[0,:] = y  
        Z[0,:] = h  

    while t<t_end: 
        it += 1
        t += Dt

        f_run_eval(f,x,y,u,p)
        g_run_eval(g,x,y,u,p)

        x_0 = np.copy(x) 
        y_0 = np.copy(y) 
        f_0 = np.copy(f) 
        g_0 = np.copy(g) 
            
        for iti in range(max_it):
            f_run_eval(f,x,y,u,p)
            g_run_eval(g,x,y,u,p)
            sp_jac_trap_eval(sp_jac_trap.data,x,y,u,p,Dt,xyup=1)            

            f_n_i = x - x_0 - 0.5*Dt*(f+f_0) 

            fg_i[:N_x] = f_n_i
            fg_i[N_x:] = g
            
            Dxy_i = spsolve(sp_jac_trap,-fg_i) 

            x = x + Dxy_i[:N_x]
            y = y + Dxy_i[N_x:]              

            # iteration stop
            max_relative = 0.0
            for it_var in range(N_x+N_y):
                abs_value = np.abs(xy[it_var])
                if abs_value < 0.001:
                    abs_value = 0.001
                relative_error = np.abs(Dxy_i[it_var])/abs_value

                if relative_error > max_relative: max_relative = relative_error

            if max_relative<itol:
                break
                
        h_eval(h,x,y,u,p)
        xy[:N_x] = x
        xy[N_x:] = y
        
        # store in channels 
        if store == 1:
            if it >= it_store*decimation: 
                T[it_store+1] = t 
                X[it_store+1,:] = x 
                Y[it_store+1,:] = y
                Z[it_store+1,:] = h
                iters[it_store+1] = iti
                it_store += 1 

    return t,it,it_store,xy




@numba.njit()
def sprichardson(A_d,A_i,A_p,b,P_d,P_i,P_p,perm_r,perm_c,x,iparams,damp=1.0,max_it=100,tol=1e-3):
    N_A = A_p.shape[0]-1
    f = np.zeros(N_A)
    for it in range(max_it):
        spMvmul(N_A,A_d,A_i,A_p,x,f) 
        f -= b                          # A@x-b
        x = x - damp*splu_solve(P_d,P_i,P_p,perm_r,perm_c,f)   
        if np.linalg.norm(f,2) < tol: break
    iparams[0] = it
    return x
    
@numba.njit()
def spconjgradm(A_d,A_i,A_p,b,P_d,P_i,P_p,perm_r,perm_c,x,iparams,max_it=100,tol=1e-3, damp=None):
    """
    A function to solve [A]{x} = {b} linear equation system with the 
    preconditioned conjugate gradient method.
    More at: http://en.wikipedia.org/wiki/Conjugate_gradient_method
    ========== Parameters ==========
    A_d,A_i,A_p : sparse matrix 
        components in CRS form A_d = A_crs.data, A_i = A_crs.indices, A_p = A_crs.indptr.
    b : vector
        The right hand side (RHS) vector of the system.
    x : vector
        The starting guess for the solution.
    P_d,P_i,P_p,perm_r,perm_c: preconditioner LU matrix
        components in scipy.spilu form P_d,P_i,P_p,perm_r,perm_c = slu2pydae(M)
        with M = scipy.sparse.linalg.spilu(A_csc) 

    """  
    N   = len(b)
    Ax  = np.zeros(N)
    Ap  = np.zeros(N)
    App = np.zeros(N)
    pAp = np.zeros(N)
    z   = np.zeros(N)
    
    spMvmul(N,A_d,A_i,A_p,x,Ax)
    r = -(Ax - b)
    z = splu_solve(P_d,P_i,P_p,perm_r,perm_c,r) #z = M.solve(r)
    p = z
    zsold = 0.0
    for it in range(N):  # zsold = np.dot(np.transpose(z), z)
        zsold += z[it]*z[it]
    for i in range(max_it):
        spMvmul(N,A_d,A_i,A_p,p,App)  # #App = np.dot(A, p)
        Ap = splu_solve(P_d,P_i,P_p,perm_r,perm_c,App) #Ap = M.solve(App)
        pAp = 0.0
        for it in range(N):
            pAp += p[it]*Ap[it]

        alpha = zsold / pAp
        x = x + alpha*p
        z = z - alpha*Ap
        zz = 0.0
        for it in range(N):  # z.T@z
            zz += z[it]*z[it]
        zsnew = zz
        if np.sqrt(zsnew) < tol:
            break
            
        p = z + (zsnew/zsold)*p
        zsold = zsnew
    iparams[0] = i

    return x


@numba.njit()
def spsstate(xy,u,p,
             J_d,J_i,J_p,
             P_d,P_i,P_p,perm_r,perm_c,
             N_x,N_y,
             max_it=50,tol=1e-8,
             lmax_it=20,ltol=1e-8,ldamp=1.0, solver=2):
    
   
    x = xy[:N_x]
    y = xy[N_x:]
    fg = np.zeros((N_x+N_y,),dtype=np.float64)
    f = fg[:N_x]
    g = fg[N_x:]
    iparams = np.array([0],dtype=np.int64)    
    
    f_c_ptr=ffi.from_buffer(np.ascontiguousarray(f))
    g_c_ptr=ffi.from_buffer(np.ascontiguousarray(g))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))
    J_d_ptr=ffi.from_buffer(np.ascontiguousarray(J_d))

    #sp_jac_ini_num_eval(J_d_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)
    sp_jac_ini_up_eval(J_d_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)
    
    #sp_jac_ini_eval_up(J_d,x,y,u,p,0.0)

    Dxy = np.zeros(N_x + N_y)
    for it in range(max_it):
        
        x = xy[:N_x]
        y = xy[N_x:]   
       
        sp_jac_ini_xy_eval(J_d_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)

        
        f_ini_eval(f_c_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)
        g_ini_eval(g_c_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)
        
        #f_ini_eval(f,x,y,u,p)
        #g_ini_eval(g,x,y,u,p)
        
        fg[:N_x] = f
        fg[N_x:] = g
        
        if solver==1:
               
            Dxy = sprichardson(J_d,J_i,J_p,-fg,P_d,P_i,P_p,perm_r,perm_c,Dxy,iparams,damp=ldamp,max_it=lmax_it,tol=ltol)
   
        if solver==2:
            
            Dxy = spconjgradm(J_d,J_i,J_p,-fg,P_d,P_i,P_p,perm_r,perm_c,Dxy,iparams,damp=ldamp,max_it=lmax_it,tol=ltol)
            
        xy += Dxy
        #if np.max(np.abs(fg))<tol: break
        if np.linalg.norm(fg,np.inf)<tol: break

    return xy,it,iparams


    
@numba.njit() 
def daesolver(t,t_end,it,it_store,xy,u,p,z,jac_trap,T,X,Y,Z,iters,Dt,N_x,N_y,N_z,decimation,max_it=50,itol=1e-8,store=1): 


    fg = np.zeros((N_x+N_y,1),dtype=np.float64)
    fg_i = np.zeros((N_x+N_y),dtype=np.float64)
    x = xy[:N_x]
    y = xy[N_x:]
    fg = np.zeros((N_x+N_y,),dtype=np.float64)
    f = fg[:N_x]
    g = fg[N_x:]
    #h = np.zeros((N_z),dtype=np.float64)
    
    f_ptr=ffi.from_buffer(np.ascontiguousarray(f))
    g_ptr=ffi.from_buffer(np.ascontiguousarray(g))
    z_ptr=ffi.from_buffer(np.ascontiguousarray(z))
    x_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    jac_trap_ptr=ffi.from_buffer(np.ascontiguousarray(jac_trap))
    
    #de_jac_trap_num_eval(jac_trap_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)    
    de_jac_trap_up_eval(jac_trap_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt) 
    de_jac_trap_xy_eval(jac_trap_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt) 
    
    if it == 0:
        f_run_eval(f_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        g_run_eval(g_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        h_eval(z_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        it_store = 0  
        T[0] = t 
        X[0,:] = x  
        Y[0,:] = y  
        Z[0,:] = z  

    while t<t_end: 
        it += 1
        t += Dt

        f_run_eval(f_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        g_run_eval(g_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)

        x_0 = np.copy(x) 
        y_0 = np.copy(y) 
        f_0 = np.copy(f) 
        g_0 = np.copy(g) 
            
        for iti in range(max_it):
            f_run_eval(f_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
            g_run_eval(g_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
            de_jac_trap_xy_eval(jac_trap_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt) 

            f_n_i = x - x_0 - 0.5*Dt*(f+f_0) 

            fg_i[:N_x] = f_n_i
            fg_i[N_x:] = g
            
            Dxy_i = np.linalg.solve(-jac_trap,fg_i) 

            x += Dxy_i[:N_x]
            y += Dxy_i[N_x:] 
            
            #print(Dxy_i)

            # iteration stop
            max_relative = 0.0
            for it_var in range(N_x+N_y):
                abs_value = np.abs(xy[it_var])
                if abs_value < 0.001:
                    abs_value = 0.001
                relative_error = np.abs(Dxy_i[it_var])/abs_value

                if relative_error > max_relative: max_relative = relative_error

            if max_relative<itol:
                break
                
        h_eval(z_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        xy[:N_x] = x
        xy[N_x:] = y
        
        # store in channels 
        if store == 1:
            if it >= it_store*decimation: 
                T[it_store+1] = t 
                X[it_store+1,:] = x 
                Y[it_store+1,:] = y
                Z[it_store+1,:] = z
                iters[it_store+1] = iti
                it_store += 1 

    return t,it,it_store,xy
    
@numba.njit() 
def spdaesolver(t,t_end,it,it_store,xy,u,p,z,
                J_d,J_i,J_p,
                P_d,P_i,P_p,perm_r,perm_c,
                T,X,Y,Z,iters,Dt,N_x,N_y,N_z,decimation,
                iparams,
                max_it=50,itol=1e-8,store=1,
                lmax_it=20,ltol=1e-4,ldamp=1.0,mode=0,lsolver=2):

    fg_i = np.zeros((N_x+N_y),dtype=np.float64)
    x = xy[:N_x]
    y = xy[N_x:]
    fg = np.zeros((N_x+N_y,),dtype=np.float64)
    f = fg[:N_x]
    g = fg[N_x:]
    z = np.zeros((N_z),dtype=np.float64)
    Dxy_i_0 = np.zeros(N_x+N_y,dtype=np.float64) 
    f_ptr=ffi.from_buffer(np.ascontiguousarray(f))
    g_ptr=ffi.from_buffer(np.ascontiguousarray(g))
    z_ptr=ffi.from_buffer(np.ascontiguousarray(z))
    x_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    J_d_ptr=ffi.from_buffer(np.ascontiguousarray(J_d))
    
    #sp_jac_trap_num_eval(J_d_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)    
    sp_jac_trap_up_eval( J_d_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt) 
    sp_jac_trap_xy_eval( J_d_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt) 
    
    if it == 0:
        f_run_eval(f_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        g_run_eval(g_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        h_eval(z_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        it_store = 0  
        T[0] = t 
        X[0,:] = x  
        Y[0,:] = y  
        Z[0,:] = z 

    while t<t_end: 
        it += 1
        t += Dt

        f_run_eval(f_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        g_run_eval(g_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)

        x_0 = np.copy(x) 
        y_0 = np.copy(y) 
        f_0 = np.copy(f) 
        g_0 = np.copy(g) 
            
        for iti in range(max_it):
            f_run_eval(f_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
            g_run_eval(g_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
            sp_jac_trap_xy_eval(J_d_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt) 

            f_n_i = x - x_0 - 0.5*Dt*(f+f_0) 

            fg_i[:N_x] = f_n_i
            fg_i[N_x:] = g
            
            #Dxy_i = np.linalg.solve(-jac_trap,fg_i) 
            if lsolver == 1:
                Dxy_i = sprichardson(J_d,J_i,J_p,-fg_i,P_d,P_i,P_p,perm_r,perm_c,
                                     Dxy_i_0,iparams,damp=ldamp,max_it=lmax_it,tol=ltol)
            if lsolver == 2:
                Dxy_i = spconjgradm(J_d,J_i,J_p,-fg_i,P_d,P_i,P_p,perm_r,perm_c,
                                     Dxy_i_0,iparams,damp=ldamp,max_it=lmax_it,tol=ltol)                

            x += Dxy_i[:N_x]
            y += Dxy_i[N_x:] 
            
            #print(Dxy_i)

            # iteration stop
            max_relative = 0.0
            for it_var in range(N_x+N_y):
                abs_value = np.abs(xy[it_var])
                if abs_value < 0.001:
                    abs_value = 0.001
                relative_error = np.abs(Dxy_i[it_var])/abs_value

                if relative_error > max_relative: max_relative = relative_error

            if max_relative<itol:
                break
                
        h_eval(z_ptr,x_ptr,y_ptr,u_ptr,p_ptr,Dt)
        xy[:N_x] = x
        xy[N_x:] = y
        
        # store in channels 
        if store == 1:
            if it >= it_store*decimation: 
                T[it_store+1] = t 
                X[it_store+1,:] = x 
                Y[it_store+1,:] = y
                Z[it_store+1,:] = z
                iters[it_store+1] = iti
                it_store += 1 

    return t,it,it_store,xy


@cuda.jit()
def ode_solve(x,u,p,f_run,u_idxs,z_i,z,sim):

    N_i,N_j,N_x,N_z,Dt = sim

    # index of thread on GPU:
    i = cuda.grid(1)

    if i < x.size:
        for j in range(N_j):
            f_run_eval(f_run[i,:],x[i,:],u[i,u_idxs[j],:],p[i,:])
            for k in range(N_x):
              x[i,k] +=  Dt*f_run[i,k]

            # outputs in time range
            #z[i,j] = u[i,idxs[j],0]
            z[i,j] = x[i,1]
        h_eval(z_i[i,:],x[i,:],u[i,u_idxs[j],:],p[i,:])
        
def csr2pydae(A_csr):
    '''
    From scipy CSR to the three vectors:
    
    - data
    - indices
    - indptr
    
    '''
    
    A_d = A_csr.data
    A_i = A_csr.indices
    A_p = A_csr.indptr
    
    return A_d,A_i,A_p
    
def slu2pydae(P_slu):
    '''
    From SupderLU matrix to the three vectors:
    
    - data
    - indices
    - indptr
    
    and the premutation vectors:
    
    - perm_r
    - perm_c
    
    '''
    N = P_slu.shape[0]
    #P_slu_full = P_slu.L.A - sspa.eye(N,format='csr') + P_slu.U.A
    P_slu_full = P_slu.L - sspa.eye(N,format='csc') + P_slu.U
    perm_r = P_slu.perm_r
    perm_c = P_slu.perm_c
    P_csr = sspa.csr_matrix(P_slu_full)
    
    P_d = P_csr.data
    P_i = P_csr.indices
    P_p = P_csr.indptr
    
    return P_d,P_i,P_p,perm_r,perm_c

@numba.njit(cache=True)
def spMvmul(N,A_data,A_indices,A_indptr,x,y):
    '''
    y = A @ x
    
    with A in sparse CRS form
    '''
    #y = np.zeros(x.shape[0])
    for i in range(N):
        y[i] = 0.0
        for j in range(A_indptr[i],A_indptr[i + 1]):
            y[i] = y[i] + A_data[j]*x[A_indices[j]]
            
            
@numba.njit(cache=True)
def splu_solve(LU_d,LU_i,LU_p,perm_r,perm_c,b):
    N = len(b)
    y = np.zeros(N)
    x = np.zeros(N)
    z = np.zeros(N)
    bp = np.zeros(N)
    
    for i in range(N): 
        bp[perm_r[i]] = b[i]
        
    for i in range(N): 
        y[i] = bp[i]
        for j in range(LU_p[i],LU_p[i+1]):
            if LU_i[j]>i-1: break
            y[i] -= LU_d[j] * y[LU_i[j]]

    for i in range(N-1,-1,-1): #(int i = N - 1; i >= 0; i--) 
        z[i] = y[i]
        den = 0.0
        for j in range(LU_p[i],LU_p[i+1]): #(int k = i + 1; k < N; k++)
            if LU_i[j] > i:
                z[i] -= LU_d[j] * z[LU_i[j]]
            if LU_i[j] == i: den = LU_d[j]
        z[i] = z[i]/den
 
    for i in range(N):
        x[i] = z[perm_c[i]]
        
    return x



@numba.njit("float64[:,:](float64[:,:],float64[:],float64[:],float64[:],float64[:],float64)")
def de_jac_ini_eval(de_jac_ini,x,y,u,p,Dt):   
    '''
    Computes the dense full initialization jacobian:
    
    jac_ini = [[Fx_ini, Fy_ini],
               [Gx_ini, Gy_ini]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    de_jac_ini : (N, N) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (ini problem).
    u : (N_u,) array_like
        Vector with inputs (ini problem). 
    p : (N_p,) array_like
        Vector with parameters. 
        
    with N = N_x+N_y
 
    Returns
    -------
    
    de_jac_ini : (N, N) array_like
                  Updated matrix.    
    
    '''
    
    de_jac_ini_ptr=ffi.from_buffer(np.ascontiguousarray(de_jac_ini))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    de_jac_ini_num_eval(de_jac_ini_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    de_jac_ini_up_eval( de_jac_ini_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    de_jac_ini_xy_eval( de_jac_ini_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    
    return de_jac_ini

@numba.njit("float64[:,:](float64[:,:],float64[:],float64[:],float64[:],float64[:],float64)")
def de_jac_run_eval(de_jac_run,x,y,u,p,Dt):   
    '''
    Computes the dense full initialization jacobian:
    
    jac_run = [[Fx_run, Fy_run],
               [Gx_run, Gy_run]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    de_jac_run : (N, N) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (ini problem).
    u : (N_u,) array_like
        Vector with inputs (ini problem). 
    p : (N_p,) array_like
        Vector with parameters. 
        
    with N = N_x+N_y
 
    Returns
    -------
    
    de_jac_ini : (N, N) array_like
                  Updated matrix.    
    
    '''
    
    de_jac_run_ptr=ffi.from_buffer(np.ascontiguousarray(de_jac_run))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    de_jac_run_num_eval(de_jac_run_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    de_jac_run_up_eval( de_jac_run_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    de_jac_run_xy_eval( de_jac_run_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    
    return de_jac_run

@numba.njit("float64[:,:](float64[:,:],float64[:],float64[:],float64[:],float64[:],float64)")
def de_jac_trap_eval(de_jac_trap,x,y,u,p,Dt):   
    '''
    Computes the dense full trapezoidal jacobian:
    
    jac_trap = [[eye - 0.5*Dt*Fx_run, -0.5*Dt*Fy_run],
                [             Gx_run,         Gy_run]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    de_jac_trap : (N, N) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (run problem).
    u : (N_u,) array_like
        Vector with inputs (run problem). 
    p : (N_p,) array_like
        Vector with parameters. 
 
    Returns
    -------
    
    de_jac_trap : (N, N) array_like
                  Updated matrix.    
    
    '''
        
    de_jac_trap_ptr = ffi.from_buffer(np.ascontiguousarray(de_jac_trap))
    x_c_ptr = ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr = ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr = ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr = ffi.from_buffer(np.ascontiguousarray(p))

    de_jac_trap_num_eval(de_jac_trap_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    de_jac_trap_up_eval( de_jac_trap_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    de_jac_trap_xy_eval( de_jac_trap_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    
    return de_jac_trap


@numba.njit("float64[:](float64[:],float64[:],float64[:],float64[:],float64[:],float64)")
def sp_jac_run_eval(sp_jac_run,x,y,u,p,Dt):   
    '''
    Computes the sparse full trapezoidal jacobian:
    
    jac_trap = [[eye - 0.5*Dt*Fx_run, -0.5*Dt*Fy_run],
                [             Gx_run,         Gy_run]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    sp_jac_trap : (Nnz,) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (run problem).
    u : (N_u,) array_like
        Vector with inputs (run problem). 
    p : (N_p,) array_like
        Vector with parameters. 
        
    with Nnz the number of non-zeros elements in the jacobian.
 
    Returns
    -------
    
    sp_jac_trap : (Nnz,) array_like
                  Updated matrix.    
    
    '''        
    sp_jac_run_ptr=ffi.from_buffer(np.ascontiguousarray(sp_jac_run))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    sp_jac_run_num_eval( sp_jac_run_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_jac_run_up_eval( sp_jac_run_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_jac_run_xy_eval( sp_jac_run_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    
    return sp_jac_run

@numba.njit("float64[:](float64[:],float64[:],float64[:],float64[:],float64[:],float64)")
def sp_jac_trap_eval(sp_jac_trap,x,y,u,p,Dt):   
    '''
    Computes the sparse full trapezoidal jacobian:
    
    jac_trap = [[eye - 0.5*Dt*Fx_run, -0.5*Dt*Fy_run],
                [             Gx_run,         Gy_run]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    sp_jac_trap : (Nnz,) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (run problem).
    u : (N_u,) array_like
        Vector with inputs (run problem). 
    p : (N_p,) array_like
        Vector with parameters. 
        
    with Nnz the number of non-zeros elements in the jacobian.
 
    Returns
    -------
    
    sp_jac_trap : (Nnz,) array_like
                  Updated matrix.    
    
    '''        
    sp_jac_trap_ptr=ffi.from_buffer(np.ascontiguousarray(sp_jac_trap))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    sp_jac_trap_num_eval(sp_jac_trap_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_jac_trap_up_eval( sp_jac_trap_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_jac_trap_xy_eval( sp_jac_trap_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    
    return sp_jac_trap

@numba.njit("float64[:](float64[:],float64[:],float64[:],float64[:],float64[:],float64)")
def sp_jac_ini_eval(sp_jac_ini,x,y,u,p,Dt):   
    '''
    Computes the SPARSE full initialization jacobian:
    
    jac_ini = [[Fx_ini, Fy_ini],
               [Gx_ini, Gy_ini]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    de_jac_ini : (N, N) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (ini problem).
    u : (N_u,) array_like
        Vector with inputs (ini problem). 
    p : (N_p,) array_like
        Vector with parameters. 
        
    with N = N_x+N_y
 
    Returns
    -------
    
    de_jac_ini : (N, N) array_like
                  Updated matrix.    
    
    '''
    
    sp_jac_ini_ptr=ffi.from_buffer(np.ascontiguousarray(sp_jac_ini))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    sp_jac_ini_num_eval(sp_jac_ini_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_jac_ini_up_eval( sp_jac_ini_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_jac_ini_xy_eval( sp_jac_ini_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    
    return sp_jac_ini


@numba.njit()
def sstate(xy,u,p,jac_ini_ss,N_x,N_y,max_it=50,tol=1e-8):
    
    x = xy[:N_x]
    y = xy[N_x:]
    fg = np.zeros((N_x+N_y,),dtype=np.float64)
    f = fg[:N_x]
    g = fg[N_x:]

    f_c_ptr=ffi.from_buffer(np.ascontiguousarray(f))
    g_c_ptr=ffi.from_buffer(np.ascontiguousarray(g))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))
    jac_ini_ss_ptr=ffi.from_buffer(np.ascontiguousarray(jac_ini_ss))

    #de_jac_ini_num_eval(jac_ini_ss_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)
    de_jac_ini_up_eval(jac_ini_ss_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)

    for it in range(max_it):
        de_jac_ini_xy_eval(jac_ini_ss_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)
        f_ini_eval(f_c_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)
        g_ini_eval(g_c_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,1.0)
        fg[:N_x] = f
        fg[N_x:] = g
        xy += np.linalg.solve(jac_ini_ss,-fg)
        if np.max(np.abs(fg))<tol: break

    return xy,it


@numba.njit("float64[:](float64[:],float64[:],float64[:],float64[:],float64[:],float64)")
def c_h_eval(z,x,y,u,p,Dt):   
    '''
    Computes the SPARSE full initialization jacobian:
    
    jac_ini = [[Fx_ini, Fy_ini],
               [Gx_ini, Gy_ini]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    de_jac_ini : (N, N) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (ini problem).
    u : (N_u,) array_like
        Vector with inputs (ini problem). 
    p : (N_p,) array_like
        Vector with parameters. 
        
    with N = N_x+N_y
 
    Returns
    -------
    
    de_jac_ini : (N, N) array_like
                  Updated matrix.    
    
    '''
    
    z_c_ptr=ffi.from_buffer(np.ascontiguousarray(z))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    h_eval(z_c_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    
    return z

@numba.njit("(float64[:],float64[:],float64[:],float64[:],float64[:],float64)")
def sp_Fu_run_eval(jac,x,y,u,p,Dt):   
    '''
    Computes the dense full initialization jacobian:
    
    jac_ini = [[Fx_ini, Fy_ini],
               [Gx_ini, Gy_ini]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    de_jac_ini : (N, N) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (ini problem).
    u : (N_u,) array_like
        Vector with inputs (ini problem). 
    p : (N_p,) array_like
        Vector with parameters. 
        
    with N = N_x+N_y
 
    Returns
    -------
    
    de_jac_ini : (N, N) array_like
                  Updated matrix.    
    
    '''
    
    jac_ptr=ffi.from_buffer(np.ascontiguousarray(jac))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    sp_Fu_run_up_eval( jac_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_Fu_run_xy_eval( jac_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    
    #return jac

@numba.njit("(float64[:],float64[:],float64[:],float64[:],float64[:],float64)")
def sp_Gu_run_eval(jac,x,y,u,p,Dt):   
    '''
    Computes the dense full initialization jacobian:
    
    jac_ini = [[Fx_ini, Fy_ini],
               [Gx_ini, Gy_ini]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    de_jac_ini : (N, N) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (ini problem).
    u : (N_u,) array_like
        Vector with inputs (ini problem). 
    p : (N_p,) array_like
        Vector with parameters. 
        
    with N = N_x+N_y
 
    Returns
    -------
    
    de_jac_ini : (N, N) array_like
                  Updated matrix.    
    
    '''
    
    jac_ptr=ffi.from_buffer(np.ascontiguousarray(jac))
    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    sp_Gu_run_up_eval( jac_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_Gu_run_xy_eval( jac_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    
    #return jac

@numba.njit("(float64[:],float64[:],float64[:],float64[:],float64[:],float64[:],float64[:],float64)")
def sp_H_jacs_run_eval(H_x,H_y,H_u,x,y,u,p,Dt):   
    '''
    Computes the dense full initialization jacobian:
    
    jac_ini = [[Fx_ini, Fy_ini],
               [Gx_ini, Gy_ini]]
                
    for the given x,y,u,p vectors and Dt time increment.
    
    Parameters
    ----------
    de_jac_ini : (N, N) array_like
                  Input data.
    x : (N_x,) array_like
        Vector with dynamical states.
    y : (N_y,) array_like
        Vector with algebraic states (ini problem).
    u : (N_u,) array_like
        Vector with inputs (ini problem). 
    p : (N_p,) array_like
        Vector with parameters. 
        
    with N = N_x+N_y
 
    Returns
    -------
    
    de_jac_ini : (N, N) array_like
                  Updated matrix.    
    
    '''
    
    H_x_ptr=ffi.from_buffer(np.ascontiguousarray(H_x))
    H_y_ptr=ffi.from_buffer(np.ascontiguousarray(H_y))
    H_u_ptr=ffi.from_buffer(np.ascontiguousarray(H_u))

    x_c_ptr=ffi.from_buffer(np.ascontiguousarray(x))
    y_c_ptr=ffi.from_buffer(np.ascontiguousarray(y))
    u_c_ptr=ffi.from_buffer(np.ascontiguousarray(u))
    p_c_ptr=ffi.from_buffer(np.ascontiguousarray(p))

    sp_Hx_run_up_eval( H_x_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_Hx_run_xy_eval( H_x_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_Hy_run_up_eval( H_y_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_Hy_run_xy_eval( H_y_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_Hu_run_up_eval( H_u_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)
    sp_Hu_run_xy_eval( H_u_ptr,x_c_ptr,y_c_ptr,u_c_ptr,p_c_ptr,Dt)

def sp_jac_ini_vectors():

    sp_jac_ini_ia = [0, 453, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 151, 152, 153, 154, 167, 168, 169, 170, 447, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 151, 152, 153, 154, 167, 168, 169, 170, 450, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 153, 154, 155, 156, 169, 170, 171, 172, 448, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 153, 154, 155, 156, 169, 170, 171, 172, 451, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 151, 152, 155, 156, 167, 168, 171, 172, 449, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 151, 152, 155, 156, 167, 168, 171, 172, 452, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 327, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 328, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 329, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 330, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 331, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 332, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 333, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 334, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 335, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 336, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 337, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 338, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 339, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 340, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 341, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 342, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 343, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 344, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 345, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 346, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 347, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 348, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 349, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 350, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 351, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 352, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 353, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 354, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 355, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 356, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 357, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 358, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 359, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 360, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 361, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 362, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 363, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 364, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 365, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 366, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 367, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 368, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 369, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 370, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 371, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 372, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 373, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 374, 1, 2, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 1, 2, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 1, 2, 3, 4, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 1, 2, 3, 4, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 3, 4, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 3, 4, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 375, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 376, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 377, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 378, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 379, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 380, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 381, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 382, 1, 2, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 383, 1, 2, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 384, 1, 2, 3, 4, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 385, 1, 2, 3, 4, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 386, 3, 4, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 387, 3, 4, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 388, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 389, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 390, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 391, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 392, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 393, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 394, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 395, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 396, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 397, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 398, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 399, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 400, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 401, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 402, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 403, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 404, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 405, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 406, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 407, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 408, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 409, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 410, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 411, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 412, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 413, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 414, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 415, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 416, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 417, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 418, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 419, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 420, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 421, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 422, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 423, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 424, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 425, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 426, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 427, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 428, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 429, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 430, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 431, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 432, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 433, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 434, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 435, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 436, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 437, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 438, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 439, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 440, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 441, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 442, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 443, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 444, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 445, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 446, 7, 8, 13, 14, 327, 328, 9, 10, 13, 14, 329, 330, 11, 12, 13, 14, 331, 332, 7, 8, 13, 14, 327, 328, 9, 10, 13, 14, 329, 330, 11, 12, 13, 14, 331, 332, 327, 329, 331, 333, 328, 330, 332, 334, 87, 88, 93, 94, 335, 336, 89, 90, 93, 94, 337, 338, 91, 92, 93, 94, 339, 340, 87, 88, 93, 94, 335, 336, 89, 90, 93, 94, 337, 338, 91, 92, 93, 94, 339, 340, 335, 337, 339, 341, 336, 338, 340, 342, 119, 120, 125, 126, 343, 344, 121, 122, 125, 126, 345, 346, 123, 124, 125, 126, 347, 348, 119, 120, 125, 126, 343, 344, 121, 122, 125, 126, 345, 346, 123, 124, 125, 126, 347, 348, 343, 345, 347, 349, 344, 346, 348, 350, 127, 128, 133, 134, 351, 352, 129, 130, 133, 134, 353, 354, 131, 132, 133, 134, 355, 356, 127, 128, 133, 134, 351, 352, 129, 130, 133, 134, 353, 354, 131, 132, 133, 134, 355, 356, 351, 353, 355, 357, 352, 354, 356, 358, 135, 136, 141, 142, 359, 360, 137, 138, 141, 142, 361, 362, 139, 140, 141, 142, 363, 364, 135, 136, 141, 142, 359, 360, 137, 138, 141, 142, 361, 362, 139, 140, 141, 142, 363, 364, 359, 361, 363, 365, 360, 362, 364, 366, 143, 144, 149, 150, 367, 368, 145, 146, 149, 150, 369, 370, 147, 148, 149, 150, 371, 372, 143, 144, 149, 150, 367, 368, 145, 146, 149, 150, 369, 370, 147, 148, 149, 150, 371, 372, 367, 369, 371, 373, 368, 370, 372, 374, 159, 160, 165, 166, 375, 376, 161, 162, 165, 166, 377, 378, 163, 164, 165, 166, 379, 380, 159, 160, 165, 166, 375, 376, 161, 162, 165, 166, 377, 378, 163, 164, 165, 166, 379, 380, 375, 377, 379, 381, 376, 378, 380, 382, 167, 168, 173, 174, 383, 384, 169, 170, 173, 174, 385, 386, 171, 172, 173, 174, 387, 388, 167, 168, 173, 174, 383, 384, 169, 170, 173, 174, 385, 386, 171, 172, 173, 174, 387, 388, 383, 385, 387, 389, 384, 386, 388, 390, 255, 256, 261, 262, 391, 392, 257, 258, 261, 262, 393, 394, 259, 260, 261, 262, 395, 396, 255, 256, 261, 262, 391, 392, 257, 258, 261, 262, 393, 394, 259, 260, 261, 262, 395, 396, 391, 393, 395, 397, 392, 394, 396, 398, 263, 264, 269, 270, 399, 400, 265, 266, 269, 270, 401, 402, 267, 268, 269, 270, 403, 404, 263, 264, 269, 270, 399, 400, 265, 266, 269, 270, 401, 402, 267, 268, 269, 270, 403, 404, 399, 401, 403, 405, 400, 402, 404, 406, 271, 272, 277, 278, 407, 408, 273, 274, 277, 278, 409, 410, 275, 276, 277, 278, 411, 412, 271, 272, 277, 278, 407, 408, 273, 274, 277, 278, 409, 410, 275, 276, 277, 278, 411, 412, 407, 409, 411, 413, 408, 410, 412, 414, 295, 296, 301, 302, 415, 416, 297, 298, 301, 302, 417, 418, 299, 300, 301, 302, 419, 420, 295, 296, 301, 302, 415, 416, 297, 298, 301, 302, 417, 418, 299, 300, 301, 302, 419, 420, 415, 417, 419, 421, 416, 418, 420, 422, 303, 304, 309, 310, 423, 424, 305, 306, 309, 310, 425, 426, 307, 308, 309, 310, 427, 428, 303, 304, 309, 310, 423, 424, 305, 306, 309, 310, 425, 426, 307, 308, 309, 310, 427, 428, 423, 425, 427, 429, 424, 426, 428, 430, 311, 312, 317, 318, 431, 432, 313, 314, 317, 318, 433, 434, 315, 316, 317, 318, 435, 436, 311, 312, 317, 318, 431, 432, 313, 314, 317, 318, 433, 434, 315, 316, 317, 318, 435, 436, 431, 433, 435, 437, 432, 434, 436, 438, 319, 320, 325, 326, 439, 440, 321, 322, 325, 326, 441, 442, 323, 324, 325, 326, 443, 444, 319, 320, 325, 326, 439, 440, 321, 322, 325, 326, 441, 442, 323, 324, 325, 326, 443, 444, 439, 441, 443, 445, 440, 442, 444, 446, 1, 447, 450, 3, 448, 451, 5, 449, 452, 2, 447, 450, 4, 448, 451, 6, 449, 452, 453, 0, 453, 454]
    sp_jac_ini_ja = [0, 2, 21, 40, 59, 78, 97, 116, 137, 158, 179, 200, 221, 242, 259, 276, 300, 324, 348, 372, 396, 420, 444, 468, 500, 532, 564, 596, 628, 660, 692, 724, 756, 788, 820, 852, 884, 916, 948, 980, 1004, 1028, 1052, 1076, 1100, 1124, 1148, 1172, 1204, 1236, 1268, 1300, 1332, 1364, 1396, 1428, 1452, 1476, 1500, 1524, 1548, 1572, 1596, 1620, 1644, 1668, 1692, 1716, 1740, 1764, 1788, 1812, 1844, 1876, 1908, 1940, 1972, 2004, 2036, 2068, 2092, 2116, 2140, 2164, 2188, 2212, 2236, 2260, 2277, 2294, 2311, 2328, 2345, 2362, 2379, 2396, 2420, 2444, 2468, 2492, 2516, 2540, 2564, 2588, 2612, 2636, 2660, 2684, 2708, 2732, 2756, 2780, 2804, 2828, 2852, 2876, 2900, 2924, 2948, 2972, 2989, 3006, 3023, 3040, 3057, 3074, 3091, 3108, 3125, 3142, 3159, 3176, 3193, 3210, 3227, 3244, 3261, 3278, 3295, 3312, 3329, 3346, 3363, 3380, 3397, 3414, 3431, 3448, 3465, 3482, 3499, 3516, 3536, 3556, 3576, 3596, 3616, 3636, 3652, 3668, 3685, 3702, 3719, 3736, 3753, 3770, 3787, 3804, 3841, 3878, 3915, 3952, 3989, 4026, 4059, 4092, 4116, 4140, 4164, 4188, 4212, 4236, 4260, 4284, 4316, 4348, 4380, 4412, 4444, 4476, 4508, 4540, 4564, 4588, 4612, 4636, 4660, 4684, 4708, 4732, 4780, 4828, 4876, 4924, 4972, 5020, 5068, 5116, 5148, 5180, 5212, 5244, 5276, 5308, 5340, 5372, 5396, 5420, 5444, 5468, 5492, 5516, 5540, 5564, 5596, 5628, 5660, 5692, 5724, 5756, 5788, 5820, 5844, 5868, 5892, 5916, 5940, 5964, 5988, 6012, 6044, 6076, 6108, 6140, 6172, 6204, 6236, 6268, 6284, 6300, 6316, 6332, 6348, 6364, 6380, 6396, 6413, 6430, 6447, 6464, 6481, 6498, 6515, 6532, 6549, 6566, 6583, 6600, 6617, 6634, 6651, 6668, 6685, 6702, 6719, 6736, 6753, 6770, 6787, 6804, 6820, 6836, 6852, 6868, 6884, 6900, 6916, 6932, 6948, 6964, 6980, 6996, 7012, 7028, 7044, 7060, 7077, 7094, 7111, 7128, 7145, 7162, 7179, 7196, 7213, 7230, 7247, 7264, 7281, 7298, 7315, 7332, 7349, 7366, 7383, 7400, 7417, 7434, 7451, 7468, 7485, 7502, 7519, 7536, 7553, 7570, 7587, 7604, 7610, 7616, 7622, 7628, 7634, 7640, 7644, 7648, 7654, 7660, 7666, 7672, 7678, 7684, 7688, 7692, 7698, 7704, 7710, 7716, 7722, 7728, 7732, 7736, 7742, 7748, 7754, 7760, 7766, 7772, 7776, 7780, 7786, 7792, 7798, 7804, 7810, 7816, 7820, 7824, 7830, 7836, 7842, 7848, 7854, 7860, 7864, 7868, 7874, 7880, 7886, 7892, 7898, 7904, 7908, 7912, 7918, 7924, 7930, 7936, 7942, 7948, 7952, 7956, 7962, 7968, 7974, 7980, 7986, 7992, 7996, 8000, 8006, 8012, 8018, 8024, 8030, 8036, 8040, 8044, 8050, 8056, 8062, 8068, 8074, 8080, 8084, 8088, 8094, 8100, 8106, 8112, 8118, 8124, 8128, 8132, 8138, 8144, 8150, 8156, 8162, 8168, 8172, 8176, 8182, 8188, 8194, 8200, 8206, 8212, 8216, 8220, 8226, 8232, 8238, 8244, 8250, 8256, 8260, 8264, 8267, 8270, 8273, 8276, 8279, 8282, 8283, 8286]
    sp_jac_ini_nia = 455
    sp_jac_ini_nja = 455
    return sp_jac_ini_ia, sp_jac_ini_ja, sp_jac_ini_nia, sp_jac_ini_nja 

def sp_jac_run_vectors():

    sp_jac_run_ia = [0, 453, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 151, 152, 153, 154, 167, 168, 169, 170, 447, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 151, 152, 153, 154, 167, 168, 169, 170, 450, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 153, 154, 155, 156, 169, 170, 171, 172, 448, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 153, 154, 155, 156, 169, 170, 171, 172, 451, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 151, 152, 155, 156, 167, 168, 171, 172, 449, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 151, 152, 155, 156, 167, 168, 171, 172, 452, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 327, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 328, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 329, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 330, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 331, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 332, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 333, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 334, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 335, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 336, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 337, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 338, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 339, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 340, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 341, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 342, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 343, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 344, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 345, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 346, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 347, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 348, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 349, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 350, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 351, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 352, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 353, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 354, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 355, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 356, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 357, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 358, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 359, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 360, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 361, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 362, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 363, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 364, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 365, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 366, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 367, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 368, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 369, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 370, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 371, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 372, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 373, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 374, 1, 2, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 1, 2, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 1, 2, 3, 4, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 1, 2, 3, 4, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 3, 4, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 3, 4, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 375, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 376, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 377, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 378, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 379, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 380, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 381, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 382, 1, 2, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 383, 1, 2, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 384, 1, 2, 3, 4, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 385, 1, 2, 3, 4, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 386, 3, 4, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 387, 3, 4, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 388, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 389, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 390, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 391, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 392, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 393, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 394, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 395, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 396, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 397, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 398, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 399, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 400, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 401, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 402, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 403, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 404, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 405, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 406, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 407, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 408, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 409, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 410, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 411, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 412, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 413, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 414, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 415, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 416, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 417, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 418, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 419, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 420, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 421, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 422, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 423, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 424, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 425, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 426, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 427, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 428, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 429, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 430, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 431, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 432, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 433, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 434, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 435, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 436, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 437, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 438, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 439, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 440, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 441, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 442, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 443, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 444, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 445, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 446, 7, 8, 13, 14, 327, 328, 9, 10, 13, 14, 329, 330, 11, 12, 13, 14, 331, 332, 7, 8, 13, 14, 327, 328, 9, 10, 13, 14, 329, 330, 11, 12, 13, 14, 331, 332, 327, 329, 331, 333, 328, 330, 332, 334, 87, 88, 93, 94, 335, 336, 89, 90, 93, 94, 337, 338, 91, 92, 93, 94, 339, 340, 87, 88, 93, 94, 335, 336, 89, 90, 93, 94, 337, 338, 91, 92, 93, 94, 339, 340, 335, 337, 339, 341, 336, 338, 340, 342, 119, 120, 125, 126, 343, 344, 121, 122, 125, 126, 345, 346, 123, 124, 125, 126, 347, 348, 119, 120, 125, 126, 343, 344, 121, 122, 125, 126, 345, 346, 123, 124, 125, 126, 347, 348, 343, 345, 347, 349, 344, 346, 348, 350, 127, 128, 133, 134, 351, 352, 129, 130, 133, 134, 353, 354, 131, 132, 133, 134, 355, 356, 127, 128, 133, 134, 351, 352, 129, 130, 133, 134, 353, 354, 131, 132, 133, 134, 355, 356, 351, 353, 355, 357, 352, 354, 356, 358, 135, 136, 141, 142, 359, 360, 137, 138, 141, 142, 361, 362, 139, 140, 141, 142, 363, 364, 135, 136, 141, 142, 359, 360, 137, 138, 141, 142, 361, 362, 139, 140, 141, 142, 363, 364, 359, 361, 363, 365, 360, 362, 364, 366, 143, 144, 149, 150, 367, 368, 145, 146, 149, 150, 369, 370, 147, 148, 149, 150, 371, 372, 143, 144, 149, 150, 367, 368, 145, 146, 149, 150, 369, 370, 147, 148, 149, 150, 371, 372, 367, 369, 371, 373, 368, 370, 372, 374, 159, 160, 165, 166, 375, 376, 161, 162, 165, 166, 377, 378, 163, 164, 165, 166, 379, 380, 159, 160, 165, 166, 375, 376, 161, 162, 165, 166, 377, 378, 163, 164, 165, 166, 379, 380, 375, 377, 379, 381, 376, 378, 380, 382, 167, 168, 173, 174, 383, 384, 169, 170, 173, 174, 385, 386, 171, 172, 173, 174, 387, 388, 167, 168, 173, 174, 383, 384, 169, 170, 173, 174, 385, 386, 171, 172, 173, 174, 387, 388, 383, 385, 387, 389, 384, 386, 388, 390, 255, 256, 261, 262, 391, 392, 257, 258, 261, 262, 393, 394, 259, 260, 261, 262, 395, 396, 255, 256, 261, 262, 391, 392, 257, 258, 261, 262, 393, 394, 259, 260, 261, 262, 395, 396, 391, 393, 395, 397, 392, 394, 396, 398, 263, 264, 269, 270, 399, 400, 265, 266, 269, 270, 401, 402, 267, 268, 269, 270, 403, 404, 263, 264, 269, 270, 399, 400, 265, 266, 269, 270, 401, 402, 267, 268, 269, 270, 403, 404, 399, 401, 403, 405, 400, 402, 404, 406, 271, 272, 277, 278, 407, 408, 273, 274, 277, 278, 409, 410, 275, 276, 277, 278, 411, 412, 271, 272, 277, 278, 407, 408, 273, 274, 277, 278, 409, 410, 275, 276, 277, 278, 411, 412, 407, 409, 411, 413, 408, 410, 412, 414, 295, 296, 301, 302, 415, 416, 297, 298, 301, 302, 417, 418, 299, 300, 301, 302, 419, 420, 295, 296, 301, 302, 415, 416, 297, 298, 301, 302, 417, 418, 299, 300, 301, 302, 419, 420, 415, 417, 419, 421, 416, 418, 420, 422, 303, 304, 309, 310, 423, 424, 305, 306, 309, 310, 425, 426, 307, 308, 309, 310, 427, 428, 303, 304, 309, 310, 423, 424, 305, 306, 309, 310, 425, 426, 307, 308, 309, 310, 427, 428, 423, 425, 427, 429, 424, 426, 428, 430, 311, 312, 317, 318, 431, 432, 313, 314, 317, 318, 433, 434, 315, 316, 317, 318, 435, 436, 311, 312, 317, 318, 431, 432, 313, 314, 317, 318, 433, 434, 315, 316, 317, 318, 435, 436, 431, 433, 435, 437, 432, 434, 436, 438, 319, 320, 325, 326, 439, 440, 321, 322, 325, 326, 441, 442, 323, 324, 325, 326, 443, 444, 319, 320, 325, 326, 439, 440, 321, 322, 325, 326, 441, 442, 323, 324, 325, 326, 443, 444, 439, 441, 443, 445, 440, 442, 444, 446, 1, 447, 450, 3, 448, 451, 5, 449, 452, 2, 447, 450, 4, 448, 451, 6, 449, 452, 453, 0, 453, 454]
    sp_jac_run_ja = [0, 2, 21, 40, 59, 78, 97, 116, 137, 158, 179, 200, 221, 242, 259, 276, 300, 324, 348, 372, 396, 420, 444, 468, 500, 532, 564, 596, 628, 660, 692, 724, 756, 788, 820, 852, 884, 916, 948, 980, 1004, 1028, 1052, 1076, 1100, 1124, 1148, 1172, 1204, 1236, 1268, 1300, 1332, 1364, 1396, 1428, 1452, 1476, 1500, 1524, 1548, 1572, 1596, 1620, 1644, 1668, 1692, 1716, 1740, 1764, 1788, 1812, 1844, 1876, 1908, 1940, 1972, 2004, 2036, 2068, 2092, 2116, 2140, 2164, 2188, 2212, 2236, 2260, 2277, 2294, 2311, 2328, 2345, 2362, 2379, 2396, 2420, 2444, 2468, 2492, 2516, 2540, 2564, 2588, 2612, 2636, 2660, 2684, 2708, 2732, 2756, 2780, 2804, 2828, 2852, 2876, 2900, 2924, 2948, 2972, 2989, 3006, 3023, 3040, 3057, 3074, 3091, 3108, 3125, 3142, 3159, 3176, 3193, 3210, 3227, 3244, 3261, 3278, 3295, 3312, 3329, 3346, 3363, 3380, 3397, 3414, 3431, 3448, 3465, 3482, 3499, 3516, 3536, 3556, 3576, 3596, 3616, 3636, 3652, 3668, 3685, 3702, 3719, 3736, 3753, 3770, 3787, 3804, 3841, 3878, 3915, 3952, 3989, 4026, 4059, 4092, 4116, 4140, 4164, 4188, 4212, 4236, 4260, 4284, 4316, 4348, 4380, 4412, 4444, 4476, 4508, 4540, 4564, 4588, 4612, 4636, 4660, 4684, 4708, 4732, 4780, 4828, 4876, 4924, 4972, 5020, 5068, 5116, 5148, 5180, 5212, 5244, 5276, 5308, 5340, 5372, 5396, 5420, 5444, 5468, 5492, 5516, 5540, 5564, 5596, 5628, 5660, 5692, 5724, 5756, 5788, 5820, 5844, 5868, 5892, 5916, 5940, 5964, 5988, 6012, 6044, 6076, 6108, 6140, 6172, 6204, 6236, 6268, 6284, 6300, 6316, 6332, 6348, 6364, 6380, 6396, 6413, 6430, 6447, 6464, 6481, 6498, 6515, 6532, 6549, 6566, 6583, 6600, 6617, 6634, 6651, 6668, 6685, 6702, 6719, 6736, 6753, 6770, 6787, 6804, 6820, 6836, 6852, 6868, 6884, 6900, 6916, 6932, 6948, 6964, 6980, 6996, 7012, 7028, 7044, 7060, 7077, 7094, 7111, 7128, 7145, 7162, 7179, 7196, 7213, 7230, 7247, 7264, 7281, 7298, 7315, 7332, 7349, 7366, 7383, 7400, 7417, 7434, 7451, 7468, 7485, 7502, 7519, 7536, 7553, 7570, 7587, 7604, 7610, 7616, 7622, 7628, 7634, 7640, 7644, 7648, 7654, 7660, 7666, 7672, 7678, 7684, 7688, 7692, 7698, 7704, 7710, 7716, 7722, 7728, 7732, 7736, 7742, 7748, 7754, 7760, 7766, 7772, 7776, 7780, 7786, 7792, 7798, 7804, 7810, 7816, 7820, 7824, 7830, 7836, 7842, 7848, 7854, 7860, 7864, 7868, 7874, 7880, 7886, 7892, 7898, 7904, 7908, 7912, 7918, 7924, 7930, 7936, 7942, 7948, 7952, 7956, 7962, 7968, 7974, 7980, 7986, 7992, 7996, 8000, 8006, 8012, 8018, 8024, 8030, 8036, 8040, 8044, 8050, 8056, 8062, 8068, 8074, 8080, 8084, 8088, 8094, 8100, 8106, 8112, 8118, 8124, 8128, 8132, 8138, 8144, 8150, 8156, 8162, 8168, 8172, 8176, 8182, 8188, 8194, 8200, 8206, 8212, 8216, 8220, 8226, 8232, 8238, 8244, 8250, 8256, 8260, 8264, 8267, 8270, 8273, 8276, 8279, 8282, 8283, 8286]
    sp_jac_run_nia = 455
    sp_jac_run_nja = 455
    return sp_jac_run_ia, sp_jac_run_ja, sp_jac_run_nia, sp_jac_run_nja 

def sp_jac_trap_vectors():

    sp_jac_trap_ia = [0, 453, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 151, 152, 153, 154, 167, 168, 169, 170, 447, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 151, 152, 153, 154, 167, 168, 169, 170, 450, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 153, 154, 155, 156, 169, 170, 171, 172, 448, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 153, 154, 155, 156, 169, 170, 171, 172, 451, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 151, 152, 155, 156, 167, 168, 171, 172, 449, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 151, 152, 155, 156, 167, 168, 171, 172, 452, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 327, 1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 328, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 329, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 330, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 331, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 332, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 333, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 334, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 87, 88, 89, 90, 91, 92, 93, 94, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 95, 96, 97, 98, 99, 100, 101, 102, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 127, 128, 129, 130, 131, 132, 133, 134, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 135, 136, 137, 138, 139, 140, 141, 142, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 335, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 336, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 337, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 338, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 339, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 340, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 341, 23, 24, 25, 26, 27, 28, 29, 30, 87, 88, 89, 90, 91, 92, 93, 94, 342, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 31, 32, 33, 34, 35, 36, 37, 38, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 343, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 344, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 345, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 346, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 347, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 348, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 349, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 350, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 351, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 352, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 353, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 354, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 355, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 356, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 357, 47, 48, 49, 50, 51, 52, 53, 54, 127, 128, 129, 130, 131, 132, 133, 134, 358, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 359, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 360, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 361, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 362, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 363, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 364, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 365, 71, 72, 73, 74, 75, 76, 77, 78, 135, 136, 137, 138, 139, 140, 141, 142, 366, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 367, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 368, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 369, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 370, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 371, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 372, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 373, 79, 80, 81, 82, 83, 84, 85, 86, 143, 144, 145, 146, 147, 148, 149, 150, 374, 1, 2, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 1, 2, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 1, 2, 3, 4, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 1, 2, 3, 4, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 3, 4, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 3, 4, 5, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 375, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 376, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 377, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 378, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 379, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 380, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 381, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 382, 1, 2, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 383, 1, 2, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 384, 1, 2, 3, 4, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 385, 1, 2, 3, 4, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 386, 3, 4, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 387, 3, 4, 5, 6, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 388, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 389, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 390, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 239, 240, 241, 242, 243, 244, 245, 246, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 307, 308, 309, 310, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 295, 296, 297, 298, 299, 300, 301, 302, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 311, 312, 313, 314, 315, 316, 317, 318, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 183, 184, 185, 186, 187, 188, 189, 190, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 271, 272, 273, 274, 275, 276, 277, 278, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 391, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 392, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 393, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 394, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 395, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 396, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 397, 167, 168, 169, 170, 171, 172, 173, 174, 255, 256, 257, 258, 259, 260, 261, 262, 398, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 399, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 400, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 401, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 402, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 403, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 404, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 405, 167, 168, 169, 170, 171, 172, 173, 174, 263, 264, 265, 266, 267, 268, 269, 270, 406, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 407, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 408, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 409, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 410, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 411, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 412, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 413, 239, 240, 241, 242, 243, 244, 245, 246, 271, 272, 273, 274, 275, 276, 277, 278, 414, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 279, 280, 281, 282, 283, 284, 285, 286, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 199, 200, 201, 202, 203, 204, 205, 206, 287, 288, 289, 290, 291, 292, 293, 294, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 415, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 416, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 417, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 418, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 419, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 420, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 421, 207, 208, 209, 210, 211, 212, 213, 214, 295, 296, 297, 298, 299, 300, 301, 302, 422, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 423, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 424, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 425, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 426, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 427, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 428, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 429, 199, 200, 201, 202, 203, 204, 205, 206, 303, 304, 305, 306, 307, 308, 309, 310, 430, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 431, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 432, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 433, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 434, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 435, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 436, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 437, 223, 224, 225, 226, 227, 228, 229, 230, 311, 312, 313, 314, 315, 316, 317, 318, 438, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 439, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 440, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 441, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 442, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 443, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 444, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 445, 231, 232, 233, 234, 235, 236, 237, 238, 319, 320, 321, 322, 323, 324, 325, 326, 446, 7, 8, 13, 14, 327, 328, 9, 10, 13, 14, 329, 330, 11, 12, 13, 14, 331, 332, 7, 8, 13, 14, 327, 328, 9, 10, 13, 14, 329, 330, 11, 12, 13, 14, 331, 332, 327, 329, 331, 333, 328, 330, 332, 334, 87, 88, 93, 94, 335, 336, 89, 90, 93, 94, 337, 338, 91, 92, 93, 94, 339, 340, 87, 88, 93, 94, 335, 336, 89, 90, 93, 94, 337, 338, 91, 92, 93, 94, 339, 340, 335, 337, 339, 341, 336, 338, 340, 342, 119, 120, 125, 126, 343, 344, 121, 122, 125, 126, 345, 346, 123, 124, 125, 126, 347, 348, 119, 120, 125, 126, 343, 344, 121, 122, 125, 126, 345, 346, 123, 124, 125, 126, 347, 348, 343, 345, 347, 349, 344, 346, 348, 350, 127, 128, 133, 134, 351, 352, 129, 130, 133, 134, 353, 354, 131, 132, 133, 134, 355, 356, 127, 128, 133, 134, 351, 352, 129, 130, 133, 134, 353, 354, 131, 132, 133, 134, 355, 356, 351, 353, 355, 357, 352, 354, 356, 358, 135, 136, 141, 142, 359, 360, 137, 138, 141, 142, 361, 362, 139, 140, 141, 142, 363, 364, 135, 136, 141, 142, 359, 360, 137, 138, 141, 142, 361, 362, 139, 140, 141, 142, 363, 364, 359, 361, 363, 365, 360, 362, 364, 366, 143, 144, 149, 150, 367, 368, 145, 146, 149, 150, 369, 370, 147, 148, 149, 150, 371, 372, 143, 144, 149, 150, 367, 368, 145, 146, 149, 150, 369, 370, 147, 148, 149, 150, 371, 372, 367, 369, 371, 373, 368, 370, 372, 374, 159, 160, 165, 166, 375, 376, 161, 162, 165, 166, 377, 378, 163, 164, 165, 166, 379, 380, 159, 160, 165, 166, 375, 376, 161, 162, 165, 166, 377, 378, 163, 164, 165, 166, 379, 380, 375, 377, 379, 381, 376, 378, 380, 382, 167, 168, 173, 174, 383, 384, 169, 170, 173, 174, 385, 386, 171, 172, 173, 174, 387, 388, 167, 168, 173, 174, 383, 384, 169, 170, 173, 174, 385, 386, 171, 172, 173, 174, 387, 388, 383, 385, 387, 389, 384, 386, 388, 390, 255, 256, 261, 262, 391, 392, 257, 258, 261, 262, 393, 394, 259, 260, 261, 262, 395, 396, 255, 256, 261, 262, 391, 392, 257, 258, 261, 262, 393, 394, 259, 260, 261, 262, 395, 396, 391, 393, 395, 397, 392, 394, 396, 398, 263, 264, 269, 270, 399, 400, 265, 266, 269, 270, 401, 402, 267, 268, 269, 270, 403, 404, 263, 264, 269, 270, 399, 400, 265, 266, 269, 270, 401, 402, 267, 268, 269, 270, 403, 404, 399, 401, 403, 405, 400, 402, 404, 406, 271, 272, 277, 278, 407, 408, 273, 274, 277, 278, 409, 410, 275, 276, 277, 278, 411, 412, 271, 272, 277, 278, 407, 408, 273, 274, 277, 278, 409, 410, 275, 276, 277, 278, 411, 412, 407, 409, 411, 413, 408, 410, 412, 414, 295, 296, 301, 302, 415, 416, 297, 298, 301, 302, 417, 418, 299, 300, 301, 302, 419, 420, 295, 296, 301, 302, 415, 416, 297, 298, 301, 302, 417, 418, 299, 300, 301, 302, 419, 420, 415, 417, 419, 421, 416, 418, 420, 422, 303, 304, 309, 310, 423, 424, 305, 306, 309, 310, 425, 426, 307, 308, 309, 310, 427, 428, 303, 304, 309, 310, 423, 424, 305, 306, 309, 310, 425, 426, 307, 308, 309, 310, 427, 428, 423, 425, 427, 429, 424, 426, 428, 430, 311, 312, 317, 318, 431, 432, 313, 314, 317, 318, 433, 434, 315, 316, 317, 318, 435, 436, 311, 312, 317, 318, 431, 432, 313, 314, 317, 318, 433, 434, 315, 316, 317, 318, 435, 436, 431, 433, 435, 437, 432, 434, 436, 438, 319, 320, 325, 326, 439, 440, 321, 322, 325, 326, 441, 442, 323, 324, 325, 326, 443, 444, 319, 320, 325, 326, 439, 440, 321, 322, 325, 326, 441, 442, 323, 324, 325, 326, 443, 444, 439, 441, 443, 445, 440, 442, 444, 446, 1, 447, 450, 3, 448, 451, 5, 449, 452, 2, 447, 450, 4, 448, 451, 6, 449, 452, 453, 0, 453, 454]
    sp_jac_trap_ja = [0, 2, 21, 40, 59, 78, 97, 116, 137, 158, 179, 200, 221, 242, 259, 276, 300, 324, 348, 372, 396, 420, 444, 468, 500, 532, 564, 596, 628, 660, 692, 724, 756, 788, 820, 852, 884, 916, 948, 980, 1004, 1028, 1052, 1076, 1100, 1124, 1148, 1172, 1204, 1236, 1268, 1300, 1332, 1364, 1396, 1428, 1452, 1476, 1500, 1524, 1548, 1572, 1596, 1620, 1644, 1668, 1692, 1716, 1740, 1764, 1788, 1812, 1844, 1876, 1908, 1940, 1972, 2004, 2036, 2068, 2092, 2116, 2140, 2164, 2188, 2212, 2236, 2260, 2277, 2294, 2311, 2328, 2345, 2362, 2379, 2396, 2420, 2444, 2468, 2492, 2516, 2540, 2564, 2588, 2612, 2636, 2660, 2684, 2708, 2732, 2756, 2780, 2804, 2828, 2852, 2876, 2900, 2924, 2948, 2972, 2989, 3006, 3023, 3040, 3057, 3074, 3091, 3108, 3125, 3142, 3159, 3176, 3193, 3210, 3227, 3244, 3261, 3278, 3295, 3312, 3329, 3346, 3363, 3380, 3397, 3414, 3431, 3448, 3465, 3482, 3499, 3516, 3536, 3556, 3576, 3596, 3616, 3636, 3652, 3668, 3685, 3702, 3719, 3736, 3753, 3770, 3787, 3804, 3841, 3878, 3915, 3952, 3989, 4026, 4059, 4092, 4116, 4140, 4164, 4188, 4212, 4236, 4260, 4284, 4316, 4348, 4380, 4412, 4444, 4476, 4508, 4540, 4564, 4588, 4612, 4636, 4660, 4684, 4708, 4732, 4780, 4828, 4876, 4924, 4972, 5020, 5068, 5116, 5148, 5180, 5212, 5244, 5276, 5308, 5340, 5372, 5396, 5420, 5444, 5468, 5492, 5516, 5540, 5564, 5596, 5628, 5660, 5692, 5724, 5756, 5788, 5820, 5844, 5868, 5892, 5916, 5940, 5964, 5988, 6012, 6044, 6076, 6108, 6140, 6172, 6204, 6236, 6268, 6284, 6300, 6316, 6332, 6348, 6364, 6380, 6396, 6413, 6430, 6447, 6464, 6481, 6498, 6515, 6532, 6549, 6566, 6583, 6600, 6617, 6634, 6651, 6668, 6685, 6702, 6719, 6736, 6753, 6770, 6787, 6804, 6820, 6836, 6852, 6868, 6884, 6900, 6916, 6932, 6948, 6964, 6980, 6996, 7012, 7028, 7044, 7060, 7077, 7094, 7111, 7128, 7145, 7162, 7179, 7196, 7213, 7230, 7247, 7264, 7281, 7298, 7315, 7332, 7349, 7366, 7383, 7400, 7417, 7434, 7451, 7468, 7485, 7502, 7519, 7536, 7553, 7570, 7587, 7604, 7610, 7616, 7622, 7628, 7634, 7640, 7644, 7648, 7654, 7660, 7666, 7672, 7678, 7684, 7688, 7692, 7698, 7704, 7710, 7716, 7722, 7728, 7732, 7736, 7742, 7748, 7754, 7760, 7766, 7772, 7776, 7780, 7786, 7792, 7798, 7804, 7810, 7816, 7820, 7824, 7830, 7836, 7842, 7848, 7854, 7860, 7864, 7868, 7874, 7880, 7886, 7892, 7898, 7904, 7908, 7912, 7918, 7924, 7930, 7936, 7942, 7948, 7952, 7956, 7962, 7968, 7974, 7980, 7986, 7992, 7996, 8000, 8006, 8012, 8018, 8024, 8030, 8036, 8040, 8044, 8050, 8056, 8062, 8068, 8074, 8080, 8084, 8088, 8094, 8100, 8106, 8112, 8118, 8124, 8128, 8132, 8138, 8144, 8150, 8156, 8162, 8168, 8172, 8176, 8182, 8188, 8194, 8200, 8206, 8212, 8216, 8220, 8226, 8232, 8238, 8244, 8250, 8256, 8260, 8264, 8267, 8270, 8273, 8276, 8279, 8282, 8283, 8286]
    sp_jac_trap_nia = 455
    sp_jac_trap_nja = 455
    return sp_jac_trap_ia, sp_jac_trap_ja, sp_jac_trap_nia, sp_jac_trap_nja 
